var __getOwnPropNames = Object.getOwnPropertyNames;
var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
  get: (a, b) => (typeof require !== "undefined" ? require : a)[b]
}) : x)(function(x) {
  if (typeof require !== "undefined") return require.apply(this, arguments);
  throw Error('Dynamic require of "' + x + '" is not supported');
});
var __commonJS = (cb, mod) => function __require2() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};

// node_modules/component-emitter/index.js
var require_component_emitter = __commonJS({
  "node_modules/component-emitter/index.js"(exports, module) {
    if (typeof module !== "undefined") {
      module.exports = Emitter;
    }
    function Emitter(obj) {
      if (obj) return mixin(obj);
    }
    function mixin(obj) {
      for (var key in Emitter.prototype) {
        obj[key] = Emitter.prototype[key];
      }
      return obj;
    }
    Emitter.prototype.on = Emitter.prototype.addEventListener = function(event, fn) {
      this._callbacks = this._callbacks || {};
      (this._callbacks["$" + event] = this._callbacks["$" + event] || []).push(fn);
      return this;
    };
    Emitter.prototype.once = function(event, fn) {
      function on() {
        this.off(event, on);
        fn.apply(this, arguments);
      }
      on.fn = fn;
      this.on(event, on);
      return this;
    };
    Emitter.prototype.off = Emitter.prototype.removeListener = Emitter.prototype.removeAllListeners = Emitter.prototype.removeEventListener = function(event, fn) {
      this._callbacks = this._callbacks || {};
      if (0 == arguments.length) {
        this._callbacks = {};
        return this;
      }
      var callbacks = this._callbacks["$" + event];
      if (!callbacks) return this;
      if (1 == arguments.length) {
        delete this._callbacks["$" + event];
        return this;
      }
      var cb;
      for (var i = 0; i < callbacks.length; i++) {
        cb = callbacks[i];
        if (cb === fn || cb.fn === fn) {
          callbacks.splice(i, 1);
          break;
        }
      }
      if (callbacks.length === 0) {
        delete this._callbacks["$" + event];
      }
      return this;
    };
    Emitter.prototype.emit = function(event) {
      this._callbacks = this._callbacks || {};
      var args = new Array(arguments.length - 1), callbacks = this._callbacks["$" + event];
      for (var i = 1; i < arguments.length; i++) {
        args[i - 1] = arguments[i];
      }
      if (callbacks) {
        callbacks = callbacks.slice(0);
        for (var i = 0, len = callbacks.length; i < len; ++i) {
          callbacks[i].apply(this, args);
        }
      }
      return this;
    };
    Emitter.prototype.listeners = function(event) {
      this._callbacks = this._callbacks || {};
      return this._callbacks["$" + event] || [];
    };
    Emitter.prototype.hasListeners = function(event) {
      return !!this.listeners(event).length;
    };
  }
});

// node_modules/fast-safe-stringify/index.js
var require_fast_safe_stringify = __commonJS({
  "node_modules/fast-safe-stringify/index.js"(exports, module) {
    module.exports = stringify;
    stringify.default = stringify;
    stringify.stable = deterministicStringify;
    stringify.stableStringify = deterministicStringify;
    var LIMIT_REPLACE_NODE = "[...]";
    var CIRCULAR_REPLACE_NODE = "[Circular]";
    var arr = [];
    var replacerStack = [];
    function defaultOptions() {
      return {
        depthLimit: Number.MAX_SAFE_INTEGER,
        edgesLimit: Number.MAX_SAFE_INTEGER
      };
    }
    function stringify(obj, replacer, spacer, options) {
      if (typeof options === "undefined") {
        options = defaultOptions();
      }
      decirc(obj, "", 0, [], void 0, 0, options);
      var res;
      try {
        if (replacerStack.length === 0) {
          res = JSON.stringify(obj, replacer, spacer);
        } else {
          res = JSON.stringify(obj, replaceGetterValues(replacer), spacer);
        }
      } catch (_) {
        return JSON.stringify("[unable to serialize, circular reference is too complex to analyze]");
      } finally {
        while (arr.length !== 0) {
          var part = arr.pop();
          if (part.length === 4) {
            Object.defineProperty(part[0], part[1], part[3]);
          } else {
            part[0][part[1]] = part[2];
          }
        }
      }
      return res;
    }
    function setReplace(replace, val, k, parent) {
      var propertyDescriptor = Object.getOwnPropertyDescriptor(parent, k);
      if (propertyDescriptor.get !== void 0) {
        if (propertyDescriptor.configurable) {
          Object.defineProperty(parent, k, { value: replace });
          arr.push([parent, k, val, propertyDescriptor]);
        } else {
          replacerStack.push([val, k, replace]);
        }
      } else {
        parent[k] = replace;
        arr.push([parent, k, val]);
      }
    }
    function decirc(val, k, edgeIndex, stack, parent, depth, options) {
      depth += 1;
      var i;
      if (typeof val === "object" && val !== null) {
        for (i = 0; i < stack.length; i++) {
          if (stack[i] === val) {
            setReplace(CIRCULAR_REPLACE_NODE, val, k, parent);
            return;
          }
        }
        if (typeof options.depthLimit !== "undefined" && depth > options.depthLimit) {
          setReplace(LIMIT_REPLACE_NODE, val, k, parent);
          return;
        }
        if (typeof options.edgesLimit !== "undefined" && edgeIndex + 1 > options.edgesLimit) {
          setReplace(LIMIT_REPLACE_NODE, val, k, parent);
          return;
        }
        stack.push(val);
        if (Array.isArray(val)) {
          for (i = 0; i < val.length; i++) {
            decirc(val[i], i, i, stack, val, depth, options);
          }
        } else {
          var keys = Object.keys(val);
          for (i = 0; i < keys.length; i++) {
            var key = keys[i];
            decirc(val[key], key, i, stack, val, depth, options);
          }
        }
        stack.pop();
      }
    }
    function compareFunction(a, b) {
      if (a < b) {
        return -1;
      }
      if (a > b) {
        return 1;
      }
      return 0;
    }
    function deterministicStringify(obj, replacer, spacer, options) {
      if (typeof options === "undefined") {
        options = defaultOptions();
      }
      var tmp = deterministicDecirc(obj, "", 0, [], void 0, 0, options) || obj;
      var res;
      try {
        if (replacerStack.length === 0) {
          res = JSON.stringify(tmp, replacer, spacer);
        } else {
          res = JSON.stringify(tmp, replaceGetterValues(replacer), spacer);
        }
      } catch (_) {
        return JSON.stringify("[unable to serialize, circular reference is too complex to analyze]");
      } finally {
        while (arr.length !== 0) {
          var part = arr.pop();
          if (part.length === 4) {
            Object.defineProperty(part[0], part[1], part[3]);
          } else {
            part[0][part[1]] = part[2];
          }
        }
      }
      return res;
    }
    function deterministicDecirc(val, k, edgeIndex, stack, parent, depth, options) {
      depth += 1;
      var i;
      if (typeof val === "object" && val !== null) {
        for (i = 0; i < stack.length; i++) {
          if (stack[i] === val) {
            setReplace(CIRCULAR_REPLACE_NODE, val, k, parent);
            return;
          }
        }
        try {
          if (typeof val.toJSON === "function") {
            return;
          }
        } catch (_) {
          return;
        }
        if (typeof options.depthLimit !== "undefined" && depth > options.depthLimit) {
          setReplace(LIMIT_REPLACE_NODE, val, k, parent);
          return;
        }
        if (typeof options.edgesLimit !== "undefined" && edgeIndex + 1 > options.edgesLimit) {
          setReplace(LIMIT_REPLACE_NODE, val, k, parent);
          return;
        }
        stack.push(val);
        if (Array.isArray(val)) {
          for (i = 0; i < val.length; i++) {
            deterministicDecirc(val[i], i, i, stack, val, depth, options);
          }
        } else {
          var tmp = {};
          var keys = Object.keys(val).sort(compareFunction);
          for (i = 0; i < keys.length; i++) {
            var key = keys[i];
            deterministicDecirc(val[key], key, i, stack, val, depth, options);
            tmp[key] = val[key];
          }
          if (typeof parent !== "undefined") {
            arr.push([parent, k, val]);
            parent[k] = tmp;
          } else {
            return tmp;
          }
        }
        stack.pop();
      }
    }
    function replaceGetterValues(replacer) {
      replacer = typeof replacer !== "undefined" ? replacer : function(k, v) {
        return v;
      };
      return function(key, val) {
        if (replacerStack.length > 0) {
          for (var i = 0; i < replacerStack.length; i++) {
            var part = replacerStack[i];
            if (part[1] === key && part[0] === val) {
              val = part[2];
              replacerStack.splice(i, 1);
              break;
            }
          }
        }
        return replacer.call(this, key, val);
      };
    }
  }
});

// node_modules/superagent/lib/is-object.js
var require_is_object = __commonJS({
  "node_modules/superagent/lib/is-object.js"(exports, module) {
    "use strict";
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    function isObject(obj) {
      return obj !== null && _typeof(obj) === "object";
    }
    module.exports = isObject;
  }
});

// node_modules/superagent/lib/request-base.js
var require_request_base = __commonJS({
  "node_modules/superagent/lib/request-base.js"(exports, module) {
    "use strict";
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    var isObject = require_is_object();
    module.exports = RequestBase;
    function RequestBase(obj) {
      if (obj) return mixin(obj);
    }
    function mixin(obj) {
      for (var key in RequestBase.prototype) {
        if (Object.prototype.hasOwnProperty.call(RequestBase.prototype, key)) obj[key] = RequestBase.prototype[key];
      }
      return obj;
    }
    RequestBase.prototype.clearTimeout = function() {
      clearTimeout(this._timer);
      clearTimeout(this._responseTimeoutTimer);
      clearTimeout(this._uploadTimeoutTimer);
      delete this._timer;
      delete this._responseTimeoutTimer;
      delete this._uploadTimeoutTimer;
      return this;
    };
    RequestBase.prototype.parse = function(fn) {
      this._parser = fn;
      return this;
    };
    RequestBase.prototype.responseType = function(val) {
      this._responseType = val;
      return this;
    };
    RequestBase.prototype.serialize = function(fn) {
      this._serializer = fn;
      return this;
    };
    RequestBase.prototype.timeout = function(options) {
      if (!options || _typeof(options) !== "object") {
        this._timeout = options;
        this._responseTimeout = 0;
        this._uploadTimeout = 0;
        return this;
      }
      for (var option in options) {
        if (Object.prototype.hasOwnProperty.call(options, option)) {
          switch (option) {
            case "deadline":
              this._timeout = options.deadline;
              break;
            case "response":
              this._responseTimeout = options.response;
              break;
            case "upload":
              this._uploadTimeout = options.upload;
              break;
            default:
              console.warn("Unknown timeout option", option);
          }
        }
      }
      return this;
    };
    RequestBase.prototype.retry = function(count, fn) {
      if (arguments.length === 0 || count === true) count = 1;
      if (count <= 0) count = 0;
      this._maxRetries = count;
      this._retries = 0;
      this._retryCallback = fn;
      return this;
    };
    var ERROR_CODES = ["ECONNRESET", "ETIMEDOUT", "EADDRINFO", "ESOCKETTIMEDOUT"];
    RequestBase.prototype._shouldRetry = function(err, res) {
      if (!this._maxRetries || this._retries++ >= this._maxRetries) {
        return false;
      }
      if (this._retryCallback) {
        try {
          var override = this._retryCallback(err, res);
          if (override === true) return true;
          if (override === false) return false;
        } catch (err_) {
          console.error(err_);
        }
      }
      if (res && res.status && res.status >= 500 && res.status !== 501) return true;
      if (err) {
        if (err.code && ERROR_CODES.includes(err.code)) return true;
        if (err.timeout && err.code === "ECONNABORTED") return true;
        if (err.crossDomain) return true;
      }
      return false;
    };
    RequestBase.prototype._retry = function() {
      this.clearTimeout();
      if (this.req) {
        this.req = null;
        this.req = this.request();
      }
      this._aborted = false;
      this.timedout = false;
      this.timedoutError = null;
      return this._end();
    };
    RequestBase.prototype.then = function(resolve, reject) {
      var _this = this;
      if (!this._fullfilledPromise) {
        var self2 = this;
        if (this._endCalled) {
          console.warn("Warning: superagent request was sent twice, because both .end() and .then() were called. Never call .end() if you use promises");
        }
        this._fullfilledPromise = new Promise(function(resolve2, reject2) {
          self2.on("abort", function() {
            if (_this._maxRetries && _this._maxRetries > _this._retries) {
              return;
            }
            if (_this.timedout && _this.timedoutError) {
              reject2(_this.timedoutError);
              return;
            }
            var err = new Error("Aborted");
            err.code = "ABORTED";
            err.status = _this.status;
            err.method = _this.method;
            err.url = _this.url;
            reject2(err);
          });
          self2.end(function(err, res) {
            if (err) reject2(err);
            else resolve2(res);
          });
        });
      }
      return this._fullfilledPromise.then(resolve, reject);
    };
    RequestBase.prototype.catch = function(cb) {
      return this.then(void 0, cb);
    };
    RequestBase.prototype.use = function(fn) {
      fn(this);
      return this;
    };
    RequestBase.prototype.ok = function(cb) {
      if (typeof cb !== "function") throw new Error("Callback required");
      this._okCallback = cb;
      return this;
    };
    RequestBase.prototype._isResponseOK = function(res) {
      if (!res) {
        return false;
      }
      if (this._okCallback) {
        return this._okCallback(res);
      }
      return res.status >= 200 && res.status < 300;
    };
    RequestBase.prototype.get = function(field) {
      return this._header[field.toLowerCase()];
    };
    RequestBase.prototype.getHeader = RequestBase.prototype.get;
    RequestBase.prototype.set = function(field, val) {
      if (isObject(field)) {
        for (var key in field) {
          if (Object.prototype.hasOwnProperty.call(field, key)) this.set(key, field[key]);
        }
        return this;
      }
      this._header[field.toLowerCase()] = val;
      this.header[field] = val;
      return this;
    };
    RequestBase.prototype.unset = function(field) {
      delete this._header[field.toLowerCase()];
      delete this.header[field];
      return this;
    };
    RequestBase.prototype.field = function(name, val) {
      if (name === null || void 0 === name) {
        throw new Error(".field(name, val) name can not be empty");
      }
      if (this._data) {
        throw new Error(".field() can't be used if .send() is used. Please use only .send() or only .field() & .attach()");
      }
      if (isObject(name)) {
        for (var key in name) {
          if (Object.prototype.hasOwnProperty.call(name, key)) this.field(key, name[key]);
        }
        return this;
      }
      if (Array.isArray(val)) {
        for (var i in val) {
          if (Object.prototype.hasOwnProperty.call(val, i)) this.field(name, val[i]);
        }
        return this;
      }
      if (val === null || void 0 === val) {
        throw new Error(".field(name, val) val can not be empty");
      }
      if (typeof val === "boolean") {
        val = String(val);
      }
      this._getFormData().append(name, val);
      return this;
    };
    RequestBase.prototype.abort = function() {
      if (this._aborted) {
        return this;
      }
      this._aborted = true;
      if (this.xhr) this.xhr.abort();
      if (this.req) this.req.abort();
      this.clearTimeout();
      this.emit("abort");
      return this;
    };
    RequestBase.prototype._auth = function(user, pass, options, base64Encoder) {
      switch (options.type) {
        case "basic":
          this.set("Authorization", "Basic ".concat(base64Encoder("".concat(user, ":").concat(pass))));
          break;
        case "auto":
          this.username = user;
          this.password = pass;
          break;
        case "bearer":
          this.set("Authorization", "Bearer ".concat(user));
          break;
        default:
          break;
      }
      return this;
    };
    RequestBase.prototype.withCredentials = function(on) {
      if (on === void 0) on = true;
      this._withCredentials = on;
      return this;
    };
    RequestBase.prototype.redirects = function(n) {
      this._maxRedirects = n;
      return this;
    };
    RequestBase.prototype.maxResponseSize = function(n) {
      if (typeof n !== "number") {
        throw new TypeError("Invalid argument");
      }
      this._maxResponseSize = n;
      return this;
    };
    RequestBase.prototype.toJSON = function() {
      return {
        method: this.method,
        url: this.url,
        data: this._data,
        headers: this._header
      };
    };
    RequestBase.prototype.send = function(data) {
      var isObj = isObject(data);
      var type = this._header["content-type"];
      if (this._formData) {
        throw new Error(".send() can't be used if .attach() or .field() is used. Please use only .send() or only .field() & .attach()");
      }
      if (isObj && !this._data) {
        if (Array.isArray(data)) {
          this._data = [];
        } else if (!this._isHost(data)) {
          this._data = {};
        }
      } else if (data && this._data && this._isHost(this._data)) {
        throw new Error("Can't merge these send calls");
      }
      if (isObj && isObject(this._data)) {
        for (var key in data) {
          if (Object.prototype.hasOwnProperty.call(data, key)) this._data[key] = data[key];
        }
      } else if (typeof data === "string") {
        if (!type) this.type("form");
        type = this._header["content-type"];
        if (type === "application/x-www-form-urlencoded") {
          this._data = this._data ? "".concat(this._data, "&").concat(data) : data;
        } else {
          this._data = (this._data || "") + data;
        }
      } else {
        this._data = data;
      }
      if (!isObj || this._isHost(data)) {
        return this;
      }
      if (!type) this.type("json");
      return this;
    };
    RequestBase.prototype.sortQuery = function(sort) {
      this._sort = typeof sort === "undefined" ? true : sort;
      return this;
    };
    RequestBase.prototype._finalizeQueryString = function() {
      var query = this._query.join("&");
      if (query) {
        this.url += (this.url.includes("?") ? "&" : "?") + query;
      }
      this._query.length = 0;
      if (this._sort) {
        var index = this.url.indexOf("?");
        if (index >= 0) {
          var queryArr = this.url.slice(index + 1).split("&");
          if (typeof this._sort === "function") {
            queryArr.sort(this._sort);
          } else {
            queryArr.sort();
          }
          this.url = this.url.slice(0, index) + "?" + queryArr.join("&");
        }
      }
    };
    RequestBase.prototype._appendQueryString = function() {
      console.warn("Unsupported");
    };
    RequestBase.prototype._timeoutError = function(reason, timeout, errno) {
      if (this._aborted) {
        return;
      }
      var err = new Error("".concat(reason + timeout, "ms exceeded"));
      err.timeout = timeout;
      err.code = "ECONNABORTED";
      err.errno = errno;
      this.timedout = true;
      this.timedoutError = err;
      this.abort();
      this.callback(err);
    };
    RequestBase.prototype._setTimeouts = function() {
      var self2 = this;
      if (this._timeout && !this._timer) {
        this._timer = setTimeout(function() {
          self2._timeoutError("Timeout of ", self2._timeout, "ETIME");
        }, this._timeout);
      }
      if (this._responseTimeout && !this._responseTimeoutTimer) {
        this._responseTimeoutTimer = setTimeout(function() {
          self2._timeoutError("Response timeout of ", self2._responseTimeout, "ETIMEDOUT");
        }, this._responseTimeout);
      }
    };
  }
});

// node_modules/superagent/lib/utils.js
var require_utils = __commonJS({
  "node_modules/superagent/lib/utils.js"(exports) {
    "use strict";
    exports.type = function(str) {
      return str.split(/ *; */).shift();
    };
    exports.params = function(str) {
      return str.split(/ *; */).reduce(function(obj, str2) {
        var parts = str2.split(/ *= */);
        var key = parts.shift();
        var val = parts.shift();
        if (key && val) obj[key] = val;
        return obj;
      }, {});
    };
    exports.parseLinks = function(str) {
      return str.split(/ *, */).reduce(function(obj, str2) {
        var parts = str2.split(/ *; */);
        var url = parts[0].slice(1, -1);
        var rel = parts[1].split(/ *= */)[1].slice(1, -1);
        obj[rel] = url;
        return obj;
      }, {});
    };
    exports.cleanHeader = function(header, changesOrigin) {
      delete header["content-type"];
      delete header["content-length"];
      delete header["transfer-encoding"];
      delete header.host;
      if (changesOrigin) {
        delete header.authorization;
        delete header.cookie;
      }
      return header;
    };
  }
});

// node_modules/superagent/lib/response-base.js
var require_response_base = __commonJS({
  "node_modules/superagent/lib/response-base.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    module.exports = ResponseBase;
    function ResponseBase(obj) {
      if (obj) return mixin(obj);
    }
    function mixin(obj) {
      for (var key in ResponseBase.prototype) {
        if (Object.prototype.hasOwnProperty.call(ResponseBase.prototype, key)) obj[key] = ResponseBase.prototype[key];
      }
      return obj;
    }
    ResponseBase.prototype.get = function(field) {
      return this.header[field.toLowerCase()];
    };
    ResponseBase.prototype._setHeaderProperties = function(header) {
      var ct = header["content-type"] || "";
      this.type = utils.type(ct);
      var params = utils.params(ct);
      for (var key in params) {
        if (Object.prototype.hasOwnProperty.call(params, key)) this[key] = params[key];
      }
      this.links = {};
      try {
        if (header.link) {
          this.links = utils.parseLinks(header.link);
        }
      } catch (_unused) {
      }
    };
    ResponseBase.prototype._setStatusProperties = function(status) {
      var type = status / 100 | 0;
      this.statusCode = status;
      this.status = this.statusCode;
      this.statusType = type;
      this.info = type === 1;
      this.ok = type === 2;
      this.redirect = type === 3;
      this.clientError = type === 4;
      this.serverError = type === 5;
      this.error = type === 4 || type === 5 ? this.toError() : false;
      this.created = status === 201;
      this.accepted = status === 202;
      this.noContent = status === 204;
      this.badRequest = status === 400;
      this.unauthorized = status === 401;
      this.notAcceptable = status === 406;
      this.forbidden = status === 403;
      this.notFound = status === 404;
      this.unprocessableEntity = status === 422;
    };
  }
});

// node_modules/superagent/lib/agent-base.js
var require_agent_base = __commonJS({
  "node_modules/superagent/lib/agent-base.js"(exports, module) {
    "use strict";
    function _toConsumableArray(arr) {
      return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
    }
    function _nonIterableSpread() {
      throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }
    function _iterableToArray(iter) {
      if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
    }
    function _arrayWithoutHoles(arr) {
      if (Array.isArray(arr)) return _arrayLikeToArray(arr);
    }
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length) len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }
      return arr2;
    }
    function Agent() {
      this._defaults = [];
    }
    ["use", "on", "once", "set", "query", "type", "accept", "auth", "withCredentials", "sortQuery", "retry", "ok", "redirects", "timeout", "buffer", "serialize", "parse", "ca", "key", "pfx", "cert", "disableTLSCerts"].forEach(function(fn) {
      Agent.prototype[fn] = function() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        this._defaults.push({
          fn,
          args
        });
        return this;
      };
    });
    Agent.prototype._setDefaults = function(req) {
      this._defaults.forEach(function(def) {
        req[def.fn].apply(req, _toConsumableArray(def.args));
      });
    };
    module.exports = Agent;
  }
});

// node_modules/superagent/lib/client.js
var require_client = __commonJS({
  "node_modules/superagent/lib/client.js"(exports, module) {
    "use strict";
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    var root;
    if (typeof window !== "undefined") {
      root = window;
    } else if (typeof self === "undefined") {
      console.warn("Using browser-only version of superagent in non-browser environment");
      root = void 0;
    } else {
      root = self;
    }
    var Emitter = require_component_emitter();
    var safeStringify = require_fast_safe_stringify();
    var RequestBase = require_request_base();
    var isObject = require_is_object();
    var ResponseBase = require_response_base();
    var Agent = require_agent_base();
    function noop() {
    }
    module.exports = function(method, url) {
      if (typeof url === "function") {
        return new exports.Request("GET", method).end(url);
      }
      if (arguments.length === 1) {
        return new exports.Request("GET", method);
      }
      return new exports.Request(method, url);
    };
    exports = module.exports;
    var request = exports;
    exports.Request = Request;
    request.getXHR = function() {
      if (root.XMLHttpRequest && (!root.location || root.location.protocol !== "file:" || !root.ActiveXObject)) {
        return new XMLHttpRequest();
      }
      try {
        return new ActiveXObject("Microsoft.XMLHTTP");
      } catch (_unused) {
      }
      try {
        return new ActiveXObject("Msxml2.XMLHTTP.6.0");
      } catch (_unused2) {
      }
      try {
        return new ActiveXObject("Msxml2.XMLHTTP.3.0");
      } catch (_unused3) {
      }
      try {
        return new ActiveXObject("Msxml2.XMLHTTP");
      } catch (_unused4) {
      }
      throw new Error("Browser-only version of superagent could not find XHR");
    };
    var trim = "".trim ? function(s) {
      return s.trim();
    } : function(s) {
      return s.replace(/(^\s*|\s*$)/g, "");
    };
    function serialize(obj) {
      if (!isObject(obj)) return obj;
      var pairs = [];
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) pushEncodedKeyValuePair(pairs, key, obj[key]);
      }
      return pairs.join("&");
    }
    function pushEncodedKeyValuePair(pairs, key, val) {
      if (val === void 0) return;
      if (val === null) {
        pairs.push(encodeURI(key));
        return;
      }
      if (Array.isArray(val)) {
        val.forEach(function(v) {
          pushEncodedKeyValuePair(pairs, key, v);
        });
      } else if (isObject(val)) {
        for (var subkey in val) {
          if (Object.prototype.hasOwnProperty.call(val, subkey)) pushEncodedKeyValuePair(pairs, "".concat(key, "[").concat(subkey, "]"), val[subkey]);
        }
      } else {
        pairs.push(encodeURI(key) + "=" + encodeURIComponent(val));
      }
    }
    request.serializeObject = serialize;
    function parseString(str) {
      var obj = {};
      var pairs = str.split("&");
      var pair;
      var pos;
      for (var i = 0, len = pairs.length; i < len; ++i) {
        pair = pairs[i];
        pos = pair.indexOf("=");
        if (pos === -1) {
          obj[decodeURIComponent(pair)] = "";
        } else {
          obj[decodeURIComponent(pair.slice(0, pos))] = decodeURIComponent(pair.slice(pos + 1));
        }
      }
      return obj;
    }
    request.parseString = parseString;
    request.types = {
      html: "text/html",
      json: "application/json",
      xml: "text/xml",
      urlencoded: "application/x-www-form-urlencoded",
      form: "application/x-www-form-urlencoded",
      "form-data": "application/x-www-form-urlencoded"
    };
    request.serialize = {
      "application/x-www-form-urlencoded": serialize,
      "application/json": safeStringify
    };
    request.parse = {
      "application/x-www-form-urlencoded": parseString,
      "application/json": JSON.parse
    };
    function parseHeader(str) {
      var lines = str.split(/\r?\n/);
      var fields = {};
      var index;
      var line;
      var field;
      var val;
      for (var i = 0, len = lines.length; i < len; ++i) {
        line = lines[i];
        index = line.indexOf(":");
        if (index === -1) {
          continue;
        }
        field = line.slice(0, index).toLowerCase();
        val = trim(line.slice(index + 1));
        fields[field] = val;
      }
      return fields;
    }
    function isJSON(mime) {
      return /[/+]json($|[^-\w])/.test(mime);
    }
    function Response(req) {
      this.req = req;
      this.xhr = this.req.xhr;
      this.text = this.req.method !== "HEAD" && (this.xhr.responseType === "" || this.xhr.responseType === "text") || typeof this.xhr.responseType === "undefined" ? this.xhr.responseText : null;
      this.statusText = this.req.xhr.statusText;
      var status = this.xhr.status;
      if (status === 1223) {
        status = 204;
      }
      this._setStatusProperties(status);
      this.headers = parseHeader(this.xhr.getAllResponseHeaders());
      this.header = this.headers;
      this.header["content-type"] = this.xhr.getResponseHeader("content-type");
      this._setHeaderProperties(this.header);
      if (this.text === null && req._responseType) {
        this.body = this.xhr.response;
      } else {
        this.body = this.req.method === "HEAD" ? null : this._parseBody(this.text ? this.text : this.xhr.response);
      }
    }
    ResponseBase(Response.prototype);
    Response.prototype._parseBody = function(str) {
      var parse = request.parse[this.type];
      if (this.req._parser) {
        return this.req._parser(this, str);
      }
      if (!parse && isJSON(this.type)) {
        parse = request.parse["application/json"];
      }
      return parse && str && (str.length > 0 || str instanceof Object) ? parse(str) : null;
    };
    Response.prototype.toError = function() {
      var req = this.req;
      var method = req.method;
      var url = req.url;
      var msg = "cannot ".concat(method, " ").concat(url, " (").concat(this.status, ")");
      var err = new Error(msg);
      err.status = this.status;
      err.method = method;
      err.url = url;
      return err;
    };
    request.Response = Response;
    function Request(method, url) {
      var self2 = this;
      this._query = this._query || [];
      this.method = method;
      this.url = url;
      this.header = {};
      this._header = {};
      this.on("end", function() {
        var err = null;
        var res = null;
        try {
          res = new Response(self2);
        } catch (err_) {
          err = new Error("Parser is unable to parse the response");
          err.parse = true;
          err.original = err_;
          if (self2.xhr) {
            err.rawResponse = typeof self2.xhr.responseType === "undefined" ? self2.xhr.responseText : self2.xhr.response;
            err.status = self2.xhr.status ? self2.xhr.status : null;
            err.statusCode = err.status;
          } else {
            err.rawResponse = null;
            err.status = null;
          }
          return self2.callback(err);
        }
        self2.emit("response", res);
        var new_err;
        try {
          if (!self2._isResponseOK(res)) {
            new_err = new Error(res.statusText || res.text || "Unsuccessful HTTP response");
          }
        } catch (err_) {
          new_err = err_;
        }
        if (new_err) {
          new_err.original = err;
          new_err.response = res;
          new_err.status = res.status;
          self2.callback(new_err, res);
        } else {
          self2.callback(null, res);
        }
      });
    }
    Emitter(Request.prototype);
    RequestBase(Request.prototype);
    Request.prototype.type = function(type) {
      this.set("Content-Type", request.types[type] || type);
      return this;
    };
    Request.prototype.accept = function(type) {
      this.set("Accept", request.types[type] || type);
      return this;
    };
    Request.prototype.auth = function(user, pass, options) {
      if (arguments.length === 1) pass = "";
      if (_typeof(pass) === "object" && pass !== null) {
        options = pass;
        pass = "";
      }
      if (!options) {
        options = {
          type: typeof btoa === "function" ? "basic" : "auto"
        };
      }
      var encoder = function encoder2(string) {
        if (typeof btoa === "function") {
          return btoa(string);
        }
        throw new Error("Cannot use basic auth, btoa is not a function");
      };
      return this._auth(user, pass, options, encoder);
    };
    Request.prototype.query = function(val) {
      if (typeof val !== "string") val = serialize(val);
      if (val) this._query.push(val);
      return this;
    };
    Request.prototype.attach = function(field, file, options) {
      if (file) {
        if (this._data) {
          throw new Error("superagent can't mix .send() and .attach()");
        }
        this._getFormData().append(field, file, options || file.name);
      }
      return this;
    };
    Request.prototype._getFormData = function() {
      if (!this._formData) {
        this._formData = new root.FormData();
      }
      return this._formData;
    };
    Request.prototype.callback = function(err, res) {
      if (this._shouldRetry(err, res)) {
        return this._retry();
      }
      var fn = this._callback;
      this.clearTimeout();
      if (err) {
        if (this._maxRetries) err.retries = this._retries - 1;
        this.emit("error", err);
      }
      fn(err, res);
    };
    Request.prototype.crossDomainError = function() {
      var err = new Error("Request has been terminated\nPossible causes: the network is offline, Origin is not allowed by Access-Control-Allow-Origin, the page is being unloaded, etc.");
      err.crossDomain = true;
      err.status = this.status;
      err.method = this.method;
      err.url = this.url;
      this.callback(err);
    };
    Request.prototype.agent = function() {
      console.warn("This is not supported in browser version of superagent");
      return this;
    };
    Request.prototype.ca = Request.prototype.agent;
    Request.prototype.buffer = Request.prototype.ca;
    Request.prototype.write = function() {
      throw new Error("Streaming is not supported in browser version of superagent");
    };
    Request.prototype.pipe = Request.prototype.write;
    Request.prototype._isHost = function(obj) {
      return obj && _typeof(obj) === "object" && !Array.isArray(obj) && Object.prototype.toString.call(obj) !== "[object Object]";
    };
    Request.prototype.end = function(fn) {
      if (this._endCalled) {
        console.warn("Warning: .end() was called twice. This is not supported in superagent");
      }
      this._endCalled = true;
      this._callback = fn || noop;
      this._finalizeQueryString();
      this._end();
    };
    Request.prototype._setUploadTimeout = function() {
      var self2 = this;
      if (this._uploadTimeout && !this._uploadTimeoutTimer) {
        this._uploadTimeoutTimer = setTimeout(function() {
          self2._timeoutError("Upload timeout of ", self2._uploadTimeout, "ETIMEDOUT");
        }, this._uploadTimeout);
      }
    };
    Request.prototype._end = function() {
      if (this._aborted) return this.callback(new Error("The request has been aborted even before .end() was called"));
      var self2 = this;
      this.xhr = request.getXHR();
      var xhr = this.xhr;
      var data = this._formData || this._data;
      this._setTimeouts();
      xhr.onreadystatechange = function() {
        var readyState = xhr.readyState;
        if (readyState >= 2 && self2._responseTimeoutTimer) {
          clearTimeout(self2._responseTimeoutTimer);
        }
        if (readyState !== 4) {
          return;
        }
        var status;
        try {
          status = xhr.status;
        } catch (_unused5) {
          status = 0;
        }
        if (!status) {
          if (self2.timedout || self2._aborted) return;
          return self2.crossDomainError();
        }
        self2.emit("end");
      };
      var handleProgress = function handleProgress2(direction, e) {
        if (e.total > 0) {
          e.percent = e.loaded / e.total * 100;
          if (e.percent === 100) {
            clearTimeout(self2._uploadTimeoutTimer);
          }
        }
        e.direction = direction;
        self2.emit("progress", e);
      };
      if (this.hasListeners("progress")) {
        try {
          xhr.addEventListener("progress", handleProgress.bind(null, "download"));
          if (xhr.upload) {
            xhr.upload.addEventListener("progress", handleProgress.bind(null, "upload"));
          }
        } catch (_unused6) {
        }
      }
      if (xhr.upload) {
        this._setUploadTimeout();
      }
      try {
        if (this.username && this.password) {
          xhr.open(this.method, this.url, true, this.username, this.password);
        } else {
          xhr.open(this.method, this.url, true);
        }
      } catch (err) {
        return this.callback(err);
      }
      if (this._withCredentials) xhr.withCredentials = true;
      if (!this._formData && this.method !== "GET" && this.method !== "HEAD" && typeof data !== "string" && !this._isHost(data)) {
        var contentType = this._header["content-type"];
        var _serialize = this._serializer || request.serialize[contentType ? contentType.split(";")[0] : ""];
        if (!_serialize && isJSON(contentType)) {
          _serialize = request.serialize["application/json"];
        }
        if (_serialize) data = _serialize(data);
      }
      for (var field in this.header) {
        if (this.header[field] === null) continue;
        if (Object.prototype.hasOwnProperty.call(this.header, field)) xhr.setRequestHeader(field, this.header[field]);
      }
      if (this._responseType) {
        xhr.responseType = this._responseType;
      }
      this.emit("request", this);
      xhr.send(typeof data === "undefined" ? null : data);
    };
    request.agent = function() {
      return new Agent();
    };
    ["GET", "POST", "OPTIONS", "PATCH", "PUT", "DELETE"].forEach(function(method) {
      Agent.prototype[method.toLowerCase()] = function(url, fn) {
        var req = new request.Request(method, url);
        this._setDefaults(req);
        if (fn) {
          req.end(fn);
        }
        return req;
      };
    });
    Agent.prototype.del = Agent.prototype.delete;
    request.get = function(url, data, fn) {
      var req = request("GET", url);
      if (typeof data === "function") {
        fn = data;
        data = null;
      }
      if (data) req.query(data);
      if (fn) req.end(fn);
      return req;
    };
    request.head = function(url, data, fn) {
      var req = request("HEAD", url);
      if (typeof data === "function") {
        fn = data;
        data = null;
      }
      if (data) req.query(data);
      if (fn) req.end(fn);
      return req;
    };
    request.options = function(url, data, fn) {
      var req = request("OPTIONS", url);
      if (typeof data === "function") {
        fn = data;
        data = null;
      }
      if (data) req.send(data);
      if (fn) req.end(fn);
      return req;
    };
    function del(url, data, fn) {
      var req = request("DELETE", url);
      if (typeof data === "function") {
        fn = data;
        data = null;
      }
      if (data) req.send(data);
      if (fn) req.end(fn);
      return req;
    }
    request.del = del;
    request.delete = del;
    request.patch = function(url, data, fn) {
      var req = request("PATCH", url);
      if (typeof data === "function") {
        fn = data;
        data = null;
      }
      if (data) req.send(data);
      if (fn) req.end(fn);
      return req;
    };
    request.post = function(url, data, fn) {
      var req = request("POST", url);
      if (typeof data === "function") {
        fn = data;
        data = null;
      }
      if (data) req.send(data);
      if (fn) req.end(fn);
      return req;
    };
    request.put = function(url, data, fn) {
      var req = request("PUT", url);
      if (typeof data === "function") {
        fn = data;
        data = null;
      }
      if (data) req.send(data);
      if (fn) req.end(fn);
      return req;
    };
  }
});

// browser-external:querystring
var require_querystring = __commonJS({
  "browser-external:querystring"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "querystring" has been externalized for browser compatibility. Cannot access "querystring.${key}" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// browser-external:fs
var require_fs = __commonJS({
  "browser-external:fs"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "fs" has been externalized for browser compatibility. Cannot access "fs.${key}" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// node_modules/theblockchainapi/dist/ApiClient.js
var require_ApiClient = __commonJS({
  "node_modules/theblockchainapi/dist/ApiClient.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _superagent = _interopRequireDefault(require_client());
    var _querystring = _interopRequireDefault(require_querystring());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var ApiClient = function() {
      function ApiClient2() {
        var basePath = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "https://api.blockchainapi.com/v1";
        _classCallCheck(this, ApiClient2);
        this.basePath = basePath.replace(/\/+$/, "");
        this.authentications = {
          "APIKeyID": {
            type: "apiKey",
            "in": "header",
            name: "APIKeyID"
          },
          "APISecretKey": {
            type: "apiKey",
            "in": "header",
            name: "APISecretKey"
          }
        };
        this.defaultHeaders = {
          "User-Agent": "OpenAPI-Generator/1.0.9407/Javascript"
        };
        this.timeout = 3e5;
        this.cache = true;
        this.enableCookies = false;
        if (typeof window === "undefined") {
          this.agent = new _superagent["default"].agent();
        }
        this.requestAgent = null;
        this.plugins = null;
      }
      _createClass(ApiClient2, [{
        key: "paramToString",
        value: function paramToString(param) {
          if (param == void 0 || param == null) {
            return "";
          }
          if (param instanceof Date) {
            return param.toJSON();
          }
          if (ApiClient2.canBeJsonified(param)) {
            return JSON.stringify(param);
          }
          return param.toString();
        }
        /**
        * Returns a boolean indicating if the parameter could be JSON.stringified
        * @param param The actual parameter
        * @returns {Boolean} Flag indicating if <code>param</code> can be JSON.stringified
        */
      }, {
        key: "buildUrl",
        value: (
          /**
           * Builds full URL by appending the given path to the base URL and replacing path parameter place-holders with parameter values.
           * NOTE: query parameters are not handled here.
           * @param {String} path The path to append to the base URL.
           * @param {Object} pathParams The parameter values to append.
           * @param {String} apiBasePath Base path defined in the path, operation level to override the default one
           * @returns {String} The encoded path with parameter values substituted.
           */
          function buildUrl(path, pathParams, apiBasePath) {
            var _this = this;
            if (!path.match(/^\//)) {
              path = "/" + path;
            }
            var url = this.basePath + path;
            if (apiBasePath !== null && apiBasePath !== void 0) {
              url = apiBasePath + path;
            }
            url = url.replace(/\{([\w-\.]+)\}/g, function(fullMatch, key) {
              var value;
              if (pathParams.hasOwnProperty(key)) {
                value = _this.paramToString(pathParams[key]);
              } else {
                value = fullMatch;
              }
              return encodeURIComponent(value);
            });
            return url;
          }
        )
        /**
        * Checks whether the given content type represents JSON.<br>
        * JSON content type examples:<br>
        * <ul>
        * <li>application/json</li>
        * <li>application/json; charset=UTF8</li>
        * <li>APPLICATION/JSON</li>
        * </ul>
        * @param {String} contentType The MIME content type to check.
        * @returns {Boolean} <code>true</code> if <code>contentType</code> represents JSON, otherwise <code>false</code>.
        */
      }, {
        key: "isJsonMime",
        value: function isJsonMime(contentType) {
          return Boolean(contentType != null && contentType.match(/^application\/json(;.*)?$/i));
        }
        /**
        * Chooses a content type from the given array, with JSON preferred; i.e. return JSON if included, otherwise return the first.
        * @param {Array.<String>} contentTypes
        * @returns {String} The chosen content type, preferring JSON.
        */
      }, {
        key: "jsonPreferredMime",
        value: function jsonPreferredMime(contentTypes) {
          for (var i = 0; i < contentTypes.length; i++) {
            if (this.isJsonMime(contentTypes[i])) {
              return contentTypes[i];
            }
          }
          return contentTypes[0];
        }
        /**
        * Checks whether the given parameter value represents file-like content.
        * @param param The parameter to check.
        * @returns {Boolean} <code>true</code> if <code>param</code> represents a file.
        */
      }, {
        key: "isFileParam",
        value: function isFileParam(param) {
          if (typeof __require === "function") {
            var fs;
            try {
              fs = require_fs();
            } catch (err) {
            }
            if (fs && fs.ReadStream && param instanceof fs.ReadStream) {
              return true;
            }
          }
          if (typeof Buffer === "function" && param instanceof Buffer) {
            return true;
          }
          if (typeof Blob === "function" && param instanceof Blob) {
            return true;
          }
          if (typeof File === "function" && param instanceof File) {
            return true;
          }
          return false;
        }
        /**
        * Normalizes parameter values:
        * <ul>
        * <li>remove nils</li>
        * <li>keep files and arrays</li>
        * <li>format to string with `paramToString` for other cases</li>
        * </ul>
        * @param {Object.<String, Object>} params The parameters as object properties.
        * @returns {Object.<String, Object>} normalized parameters.
        */
      }, {
        key: "normalizeParams",
        value: function normalizeParams(params) {
          var newParams = {};
          for (var key in params) {
            if (params.hasOwnProperty(key) && params[key] != void 0 && params[key] != null) {
              var value = params[key];
              if (this.isFileParam(value) || Array.isArray(value)) {
                newParams[key] = value;
              } else {
                newParams[key] = this.paramToString(value);
              }
            }
          }
          return newParams;
        }
        /**
        * Builds a string representation of an array-type actual parameter, according to the given collection format.
        * @param {Array} param An array parameter.
        * @param {module:ApiClient.CollectionFormatEnum} collectionFormat The array element separator strategy.
        * @returns {String|Array} A string representation of the supplied collection, using the specified delimiter. Returns
        * <code>param</code> as is if <code>collectionFormat</code> is <code>multi</code>.
        */
      }, {
        key: "buildCollectionParam",
        value: function buildCollectionParam(param, collectionFormat) {
          if (param == null) {
            return null;
          }
          switch (collectionFormat) {
            case "csv":
              return param.map(this.paramToString, this).join(",");
            case "ssv":
              return param.map(this.paramToString, this).join(" ");
            case "tsv":
              return param.map(this.paramToString, this).join("	");
            case "pipes":
              return param.map(this.paramToString, this).join("|");
            case "multi":
              return param.map(this.paramToString, this);
            case "passthrough":
              return param;
            default:
              throw new Error("Unknown collection format: " + collectionFormat);
          }
        }
        /**
        * Applies authentication headers to the request.
        * @param {Object} request The request object created by a <code>superagent()</code> call.
        * @param {Array.<String>} authNames An array of authentication method names.
        */
      }, {
        key: "applyAuthToRequest",
        value: function applyAuthToRequest(request, authNames) {
          var _this2 = this;
          authNames.forEach(function(authName) {
            var auth = _this2.authentications[authName];
            switch (auth.type) {
              case "basic":
                if (auth.username || auth.password) {
                  request.auth(auth.username || "", auth.password || "");
                }
                break;
              case "bearer":
                if (auth.accessToken) {
                  var localVarBearerToken = typeof auth.accessToken === "function" ? auth.accessToken() : auth.accessToken;
                  request.set({
                    "Authorization": "Bearer " + localVarBearerToken
                  });
                }
                break;
              case "apiKey":
                if (auth.apiKey) {
                  var data = {};
                  if (auth.apiKeyPrefix) {
                    data[auth.name] = auth.apiKeyPrefix + " " + auth.apiKey;
                  } else {
                    data[auth.name] = auth.apiKey;
                  }
                  if (auth["in"] === "header") {
                    request.set(data);
                  } else {
                    request.query(data);
                  }
                }
                break;
              case "oauth2":
                if (auth.accessToken) {
                  request.set({
                    "Authorization": "Bearer " + auth.accessToken
                  });
                }
                break;
              default:
                throw new Error("Unknown authentication type: " + auth.type);
            }
          });
        }
        /**
         * Deserializes an HTTP response body into a value of the specified type.
         * @param {Object} response A SuperAgent response object.
         * @param {(String|Array.<String>|Object.<String, Object>|Function)} returnType The type to return. Pass a string for simple types
         * or the constructor function for a complex type. Pass an array containing the type name to return an array of that type. To
         * return an object, pass an object with one property whose name is the key type and whose value is the corresponding value type:
         * all properties on <code>data<code> will be converted to this type.
         * @returns A value of the specified type.
         */
      }, {
        key: "deserialize",
        value: function deserialize(response, returnType) {
          if (response == null || returnType == null || response.status == 204) {
            return null;
          }
          var data = response.body;
          if (data == null || _typeof(data) === "object" && typeof data.length === "undefined" && !Object.keys(data).length) {
            data = response.text;
          }
          return ApiClient2.convertToType(data, returnType);
        }
        /**
         * Invokes the REST service using the supplied settings and parameters.
         * @param {String} path The base URL to invoke.
         * @param {String} httpMethod The HTTP method to use.
         * @param {Object.<String, String>} pathParams A map of path parameters and their values.
         * @param {Object.<String, Object>} queryParams A map of query parameters and their values.
         * @param {Object.<String, Object>} headerParams A map of header parameters and their values.
         * @param {Object.<String, Object>} formParams A map of form parameters and their values.
         * @param {Object} bodyParam The value to pass as the request body.
         * @param {Array.<String>} authNames An array of authentication type names.
         * @param {Array.<String>} contentTypes An array of request MIME types.
         * @param {Array.<String>} accepts An array of acceptable response MIME types.
         * @param {(String|Array|ObjectFunction)} returnType The required type to return; can be a string for simple types or the
         * constructor for a complex type.
         * @param {String} apiBasePath base path defined in the operation/path level to override the default one
         * @returns {Promise} A {@link https://www.promisejs.org/|Promise} object.
         */
      }, {
        key: "callApi",
        value: function callApi(path, httpMethod, pathParams, queryParams, headerParams, formParams, bodyParam, authNames, contentTypes, accepts, returnType, apiBasePath) {
          var _this3 = this;
          var url = this.buildUrl(path, pathParams, apiBasePath);
          var request = (0, _superagent["default"])(httpMethod, url);
          if (this.plugins !== null) {
            for (var index in this.plugins) {
              if (this.plugins.hasOwnProperty(index)) {
                request.use(this.plugins[index]);
              }
            }
          }
          this.applyAuthToRequest(request, authNames);
          if (httpMethod.toUpperCase() === "GET" && this.cache === false) {
            queryParams["_"] = (/* @__PURE__ */ new Date()).getTime();
          }
          request.query(this.normalizeParams(queryParams));
          request.set(this.defaultHeaders).set(this.normalizeParams(headerParams));
          if (this.requestAgent) {
            request.agent(this.requestAgent);
          }
          request.timeout(this.timeout);
          var contentType = this.jsonPreferredMime(contentTypes);
          if (contentType) {
            if (contentType != "multipart/form-data") {
              request.type(contentType);
            }
          }
          if (contentType === "application/x-www-form-urlencoded") {
            request.send(_querystring["default"].stringify(this.normalizeParams(formParams)));
          } else if (contentType == "multipart/form-data") {
            var _formParams = this.normalizeParams(formParams);
            for (var key in _formParams) {
              if (_formParams.hasOwnProperty(key)) {
                var _formParamsValue = _formParams[key];
                if (this.isFileParam(_formParamsValue)) {
                  request.attach(key, _formParamsValue);
                } else if (Array.isArray(_formParamsValue) && _formParamsValue.length && this.isFileParam(_formParamsValue[0])) {
                  _formParamsValue.forEach(function(file) {
                    return request.attach(key, file);
                  });
                } else {
                  request.field(key, _formParamsValue);
                }
              }
            }
          } else if (bodyParam !== null && bodyParam !== void 0) {
            if (!request.header["Content-Type"]) {
              request.type("application/json");
            }
            request.send(bodyParam);
          }
          var accept = this.jsonPreferredMime(accepts);
          if (accept) {
            request.accept(accept);
          }
          if (returnType === "Blob") {
            request.responseType("blob");
          } else if (returnType === "String") {
            request.responseType("string");
          }
          if (this.enableCookies) {
            if (typeof window === "undefined") {
              this.agent._attachCookies(request);
            } else {
              request.withCredentials();
            }
          }
          return new Promise(function(resolve, reject) {
            request.end(function(error, response) {
              if (error) {
                var err = {};
                if (response) {
                  err.status = response.status;
                  err.statusText = response.statusText;
                  err.body = response.body;
                  err.response = response;
                }
                err.error = error;
                reject(err);
              } else {
                try {
                  var data = _this3.deserialize(response, returnType);
                  if (_this3.enableCookies && typeof window === "undefined") {
                    _this3.agent._saveCookies(response);
                  }
                  resolve({
                    data,
                    response
                  });
                } catch (err2) {
                  reject(err2);
                }
              }
            });
          });
        }
        /**
        * Parses an ISO-8601 string representation or epoch representation of a date value.
        * @param {String} str The date value as a string.
        * @returns {Date} The parsed date object.
        */
      }, {
        key: "hostSettings",
        value: (
          /**
            * Gets an array of host settings
            * @returns An array of host settings
            */
          function hostSettings() {
            return [{
              "url": "https://api.blockchainapi.com/v1",
              "description": "No description provided"
            }];
          }
        )
      }, {
        key: "getBasePathFromSettings",
        value: function getBasePathFromSettings(index) {
          var variables = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          var servers = this.hostSettings();
          if (index < 0 || index >= servers.length) {
            throw new Error("Invalid index " + index + " when selecting the host settings. Must be less than " + servers.length);
          }
          var server = servers[index];
          var url = server["url"];
          for (var variable_name in server["variables"]) {
            if (variable_name in variables) {
              var variable = server["variables"][variable_name];
              if (!("enum_values" in variable) || variable["enum_values"].includes(variables[variable_name])) {
                url = url.replace("{" + variable_name + "}", variables[variable_name]);
              } else {
                throw new Error("The variable `" + variable_name + "` in the host URL has invalid value " + variables[variable_name] + ". Must be " + server["variables"][variable_name]["enum_values"] + ".");
              }
            } else {
              url = url.replace("{" + variable_name + "}", server["variables"][variable_name]["default_value"]);
            }
          }
          return url;
        }
        /**
        * Constructs a new map or array model from REST data.
        * @param data {Object|Array} The REST data.
        * @param obj {Object|Array} The target object or array.
        */
      }], [{
        key: "canBeJsonified",
        value: function canBeJsonified(str) {
          if (typeof str !== "string" && _typeof(str) !== "object") return false;
          try {
            var type = str.toString();
            return type === "[object Object]" || type === "[object Array]";
          } catch (err) {
            return false;
          }
        }
      }, {
        key: "parseDate",
        value: function parseDate(str) {
          if (isNaN(str)) {
            return new Date(str.replace(/(\d)(T)(\d)/i, "$1 $3"));
          }
          return /* @__PURE__ */ new Date(+str);
        }
        /**
        * Converts a value to the specified type.
        * @param {(String|Object)} data The data to convert, as a string or object.
        * @param {(String|Array.<String>|Object.<String, Object>|Function)} type The type to return. Pass a string for simple types
        * or the constructor function for a complex type. Pass an array containing the type name to return an array of that type. To
        * return an object, pass an object with one property whose name is the key type and whose value is the corresponding value type:
        * all properties on <code>data<code> will be converted to this type.
        * @returns An instance of the specified type or null or undefined if data is null or undefined.
        */
      }, {
        key: "convertToType",
        value: function convertToType(data, type) {
          if (data === null || data === void 0) return data;
          switch (type) {
            case "Boolean":
              return Boolean(data);
            case "Integer":
              return parseInt(data, 10);
            case "Number":
              return parseFloat(data);
            case "String":
              return String(data);
            case "Date":
              return ApiClient2.parseDate(String(data));
            case "Blob":
              return data;
            default:
              if (type === Object) {
                return data;
              } else if (typeof type.constructFromObject === "function") {
                return type.constructFromObject(data);
              } else if (Array.isArray(type)) {
                var itemType = type[0];
                return data.map(function(item) {
                  return ApiClient2.convertToType(item, itemType);
                });
              } else if (_typeof(type) === "object") {
                var keyType, valueType;
                for (var k in type) {
                  if (type.hasOwnProperty(k)) {
                    keyType = k;
                    valueType = type[k];
                    break;
                  }
                }
                var result = {};
                for (var k in data) {
                  if (data.hasOwnProperty(k)) {
                    var key = ApiClient2.convertToType(k, keyType);
                    var value = ApiClient2.convertToType(data[k], valueType);
                    result[key] = value;
                  }
                }
                return result;
              } else {
                return data;
              }
          }
        }
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj, itemType) {
          if (Array.isArray(data)) {
            for (var i = 0; i < data.length; i++) {
              if (data.hasOwnProperty(i)) obj[i] = ApiClient2.convertToType(data[i], itemType);
            }
          } else {
            for (var k in data) {
              if (data.hasOwnProperty(k)) obj[k] = ApiClient2.convertToType(data[k], itemType);
            }
          }
        }
      }]);
      return ApiClient2;
    }();
    ApiClient.CollectionFormatEnum = {
      /**
       * Comma-separated values. Value: <code>csv</code>
       * @const
       */
      CSV: ",",
      /**
       * Space-separated values. Value: <code>ssv</code>
       * @const
       */
      SSV: " ",
      /**
       * Tab-separated values. Value: <code>tsv</code>
       * @const
       */
      TSV: "	",
      /**
       * Pipe(|)-separated values. Value: <code>pipes</code>
       * @const
       */
      PIPES: "|",
      /**
       * Native array. Value: <code>multi</code>
       * @const
       */
      MULTI: "multi"
    };
    ApiClient.instance = new ApiClient();
    var _default = ApiClient;
    exports["default"] = _default;
  }
});

// node_modules/theblockchainapi/dist/model/ATAResponse.js
var require_ATAResponse = __commonJS({
  "node_modules/theblockchainapi/dist/model/ATAResponse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var ATAResponse = function() {
      function ATAResponse2(associatedTokenAddress) {
        _classCallCheck(this, ATAResponse2);
        ATAResponse2.initialize(this, associatedTokenAddress);
      }
      _createClass(ATAResponse2, null, [{
        key: "initialize",
        value: function initialize(obj, associatedTokenAddress) {
          obj["associated_token_address"] = associatedTokenAddress;
        }
        /**
         * Constructs a <code>ATAResponse</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/ATAResponse} obj Optional instance to populate.
         * @return {module:model/ATAResponse} The populated <code>ATAResponse</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ATAResponse2();
            if (data.hasOwnProperty("associated_token_address")) {
              obj["associated_token_address"] = _ApiClient["default"].convertToType(data["associated_token_address"], "String");
            }
          }
          return obj;
        }
      }]);
      return ATAResponse2;
    }();
    ATAResponse.prototype["associated_token_address"] = void 0;
    var _default = ATAResponse;
    exports["default"] = _default;
  }
});

// node_modules/theblockchainapi/dist/model/AccountContext.js
var require_AccountContext = __commonJS({
  "node_modules/theblockchainapi/dist/model/AccountContext.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var AccountContext = function() {
      function AccountContext2() {
        _classCallCheck(this, AccountContext2);
        AccountContext2.initialize(this);
      }
      _createClass(AccountContext2, null, [{
        key: "initialize",
        value: function initialize(obj) {
        }
        /**
         * Constructs a <code>AccountContext</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/AccountContext} obj Optional instance to populate.
         * @return {module:model/AccountContext} The populated <code>AccountContext</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new AccountContext2();
            if (data.hasOwnProperty("slot")) {
              obj["slot"] = _ApiClient["default"].convertToType(data["slot"], "Number");
            }
          }
          return obj;
        }
      }]);
      return AccountContext2;
    }();
    AccountContext.prototype["slot"] = void 0;
    var _default = AccountContext;
    exports["default"] = _default;
  }
});

// node_modules/theblockchainapi/dist/model/AccountValue.js
var require_AccountValue = __commonJS({
  "node_modules/theblockchainapi/dist/model/AccountValue.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var AccountValue = function() {
      function AccountValue2() {
        _classCallCheck(this, AccountValue2);
        AccountValue2.initialize(this);
      }
      _createClass(AccountValue2, null, [{
        key: "initialize",
        value: function initialize(obj) {
        }
        /**
         * Constructs a <code>AccountValue</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/AccountValue} obj Optional instance to populate.
         * @return {module:model/AccountValue} The populated <code>AccountValue</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new AccountValue2();
            if (data.hasOwnProperty("data")) {
              obj["data"] = _ApiClient["default"].convertToType(data["data"], Object);
            }
            if (data.hasOwnProperty("executable")) {
              obj["executable"] = _ApiClient["default"].convertToType(data["executable"], "Boolean");
            }
            if (data.hasOwnProperty("owner")) {
              obj["owner"] = _ApiClient["default"].convertToType(data["owner"], "String");
            }
            if (data.hasOwnProperty("rent_epoch")) {
              obj["rent_epoch"] = _ApiClient["default"].convertToType(data["rent_epoch"], "Number");
            }
          }
          return obj;
        }
      }]);
      return AccountValue2;
    }();
    AccountValue.prototype["data"] = void 0;
    AccountValue.prototype["executable"] = void 0;
    AccountValue.prototype["owner"] = void 0;
    AccountValue.prototype["rent_epoch"] = void 0;
    var _default = AccountValue;
    exports["default"] = _default;
  }
});

// node_modules/theblockchainapi/dist/model/Account.js
var require_Account = __commonJS({
  "node_modules/theblockchainapi/dist/model/Account.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    var _AccountContext = _interopRequireDefault(require_AccountContext());
    var _AccountValue = _interopRequireDefault(require_AccountValue());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var Account = function() {
      function Account2() {
        _classCallCheck(this, Account2);
        Account2.initialize(this);
      }
      _createClass(Account2, null, [{
        key: "initialize",
        value: function initialize(obj) {
        }
        /**
         * Constructs a <code>Account</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/Account} obj Optional instance to populate.
         * @return {module:model/Account} The populated <code>Account</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new Account2();
            if (data.hasOwnProperty("context")) {
              obj["context"] = _AccountContext["default"].constructFromObject(data["context"]);
            }
            if (data.hasOwnProperty("value")) {
              obj["value"] = _AccountValue["default"].constructFromObject(data["value"]);
            }
          }
          return obj;
        }
      }]);
      return Account2;
    }();
    Account.prototype["context"] = void 0;
    Account.prototype["value"] = void 0;
    var _default = Account;
    exports["default"] = _default;
  }
});

// node_modules/theblockchainapi/dist/model/AccountIsCandyMachine.js
var require_AccountIsCandyMachine = __commonJS({
  "node_modules/theblockchainapi/dist/model/AccountIsCandyMachine.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var AccountIsCandyMachine = function() {
      function AccountIsCandyMachine2(isCandyMachine) {
        _classCallCheck(this, AccountIsCandyMachine2);
        AccountIsCandyMachine2.initialize(this, isCandyMachine);
      }
      _createClass(AccountIsCandyMachine2, null, [{
        key: "initialize",
        value: function initialize(obj, isCandyMachine) {
          obj["is_candy_machine"] = isCandyMachine;
        }
        /**
         * Constructs a <code>AccountIsCandyMachine</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/AccountIsCandyMachine} obj Optional instance to populate.
         * @return {module:model/AccountIsCandyMachine} The populated <code>AccountIsCandyMachine</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new AccountIsCandyMachine2();
            if (data.hasOwnProperty("is_candy_machine")) {
              obj["is_candy_machine"] = _ApiClient["default"].convertToType(data["is_candy_machine"], "Boolean");
            }
            if (data.hasOwnProperty("candy_machine_contract_version")) {
              obj["candy_machine_contract_version"] = _ApiClient["default"].convertToType(data["candy_machine_contract_version"], "String");
            }
          }
          return obj;
        }
      }]);
      return AccountIsCandyMachine2;
    }();
    AccountIsCandyMachine.prototype["is_candy_machine"] = void 0;
    AccountIsCandyMachine.prototype["candy_machine_contract_version"] = void 0;
    AccountIsCandyMachine["CandyMachineContractVersionEnum"] = {
      /**
       * value: "v1"
       * @const
       */
      "v1": "v1",
      /**
       * value: "v2"
       * @const
       */
      "v2": "v2",
      /**
       * value: "magic-eden-v1"
       * @const
       */
      "magic-eden-v1": "magic-eden-v1"
    };
    var _default = AccountIsCandyMachine;
    exports["default"] = _default;
  }
});

// node_modules/theblockchainapi/dist/model/AccountIsNFT.js
var require_AccountIsNFT = __commonJS({
  "node_modules/theblockchainapi/dist/model/AccountIsNFT.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var AccountIsNFT = function() {
      function AccountIsNFT2(isNft) {
        _classCallCheck(this, AccountIsNFT2);
        AccountIsNFT2.initialize(this, isNft);
      }
      _createClass(AccountIsNFT2, null, [{
        key: "initialize",
        value: function initialize(obj, isNft) {
          obj["is_nft"] = isNft;
        }
        /**
         * Constructs a <code>AccountIsNFT</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/AccountIsNFT} obj Optional instance to populate.
         * @return {module:model/AccountIsNFT} The populated <code>AccountIsNFT</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new AccountIsNFT2();
            if (data.hasOwnProperty("is_nft")) {
              obj["is_nft"] = _ApiClient["default"].convertToType(data["is_nft"], "Boolean");
            }
          }
          return obj;
        }
      }]);
      return AccountIsNFT2;
    }();
    AccountIsNFT.prototype["is_nft"] = void 0;
    var _default = AccountIsNFT;
    exports["default"] = _default;
  }
});

// node_modules/theblockchainapi/dist/model/AirdropRequest.js
var require_AirdropRequest = __commonJS({
  "node_modules/theblockchainapi/dist/model/AirdropRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var AirdropRequest = function() {
      function AirdropRequest2(recipientAddress) {
        _classCallCheck(this, AirdropRequest2);
        AirdropRequest2.initialize(this, recipientAddress);
      }
      _createClass(AirdropRequest2, null, [{
        key: "initialize",
        value: function initialize(obj, recipientAddress) {
          obj["recipient_address"] = recipientAddress;
        }
        /**
         * Constructs a <code>AirdropRequest</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/AirdropRequest} obj Optional instance to populate.
         * @return {module:model/AirdropRequest} The populated <code>AirdropRequest</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new AirdropRequest2();
            if (data.hasOwnProperty("recipient_address")) {
              obj["recipient_address"] = _ApiClient["default"].convertToType(data["recipient_address"], "String");
            }
          }
          return obj;
        }
      }]);
      return AirdropRequest2;
    }();
    AirdropRequest.prototype["recipient_address"] = void 0;
    var _default = AirdropRequest;
    exports["default"] = _default;
  }
});

// node_modules/theblockchainapi/dist/model/AvalancheCChainPublicAddress.js
var require_AvalancheCChainPublicAddress = __commonJS({
  "node_modules/theblockchainapi/dist/model/AvalancheCChainPublicAddress.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var AvalancheCChainPublicAddress = function() {
      function AvalancheCChainPublicAddress2() {
        _classCallCheck(this, AvalancheCChainPublicAddress2);
        AvalancheCChainPublicAddress2.initialize(this);
      }
      _createClass(AvalancheCChainPublicAddress2, null, [{
        key: "initialize",
        value: function initialize(obj) {
        }
        /**
         * Constructs a <code>AvalancheCChainPublicAddress</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/AvalancheCChainPublicAddress} obj Optional instance to populate.
         * @return {module:model/AvalancheCChainPublicAddress} The populated <code>AvalancheCChainPublicAddress</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new AvalancheCChainPublicAddress2();
            if (data.hasOwnProperty("hex_public_address")) {
              obj["hex_public_address"] = _ApiClient["default"].convertToType(data["hex_public_address"], "String");
            }
            if (data.hasOwnProperty("hex_public_key")) {
              obj["hex_public_key"] = _ApiClient["default"].convertToType(data["hex_public_key"], "String");
            }
          }
          return obj;
        }
      }]);
      return AvalancheCChainPublicAddress2;
    }();
    AvalancheCChainPublicAddress.prototype["hex_public_address"] = void 0;
    AvalancheCChainPublicAddress.prototype["hex_public_key"] = void 0;
    var _default = AvalancheCChainPublicAddress;
    exports["default"] = _default;
  }
});

// node_modules/theblockchainapi/dist/model/AvalancheXPChainPublicAddress.js
var require_AvalancheXPChainPublicAddress = __commonJS({
  "node_modules/theblockchainapi/dist/model/AvalancheXPChainPublicAddress.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var AvalancheXPChainPublicAddress = function() {
      function AvalancheXPChainPublicAddress2() {
        _classCallCheck(this, AvalancheXPChainPublicAddress2);
        AvalancheXPChainPublicAddress2.initialize(this);
      }
      _createClass(AvalancheXPChainPublicAddress2, null, [{
        key: "initialize",
        value: function initialize(obj) {
        }
        /**
         * Constructs a <code>AvalancheXPChainPublicAddress</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/AvalancheXPChainPublicAddress} obj Optional instance to populate.
         * @return {module:model/AvalancheXPChainPublicAddress} The populated <code>AvalancheXPChainPublicAddress</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new AvalancheXPChainPublicAddress2();
            if (data.hasOwnProperty("bech_public_address")) {
              obj["bech_public_address"] = _ApiClient["default"].convertToType(data["bech_public_address"], "String");
            }
            if (data.hasOwnProperty("hex_public_address")) {
              obj["hex_public_address"] = _ApiClient["default"].convertToType(data["hex_public_address"], "String");
            }
          }
          return obj;
        }
      }]);
      return AvalancheXPChainPublicAddress2;
    }();
    AvalancheXPChainPublicAddress.prototype["bech_public_address"] = void 0;
    AvalancheXPChainPublicAddress.prototype["hex_public_address"] = void 0;
    var _default = AvalancheXPChainPublicAddress;
    exports["default"] = _default;
  }
});

// node_modules/theblockchainapi/dist/model/B58PrivateKey.js
var require_B58PrivateKey = __commonJS({
  "node_modules/theblockchainapi/dist/model/B58PrivateKey.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var B58PrivateKey = function() {
      function B58PrivateKey2(b58PrivateKey) {
        _classCallCheck(this, B58PrivateKey2);
        B58PrivateKey2.initialize(this, b58PrivateKey);
      }
      _createClass(B58PrivateKey2, null, [{
        key: "initialize",
        value: function initialize(obj, b58PrivateKey) {
          obj["b58_private_key"] = b58PrivateKey;
        }
        /**
         * Constructs a <code>B58PrivateKey</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/B58PrivateKey} obj Optional instance to populate.
         * @return {module:model/B58PrivateKey} The populated <code>B58PrivateKey</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new B58PrivateKey2();
            if (data.hasOwnProperty("b58_private_key")) {
              obj["b58_private_key"] = _ApiClient["default"].convertToType(data["b58_private_key"], "String");
            }
          }
          return obj;
        }
      }]);
      return B58PrivateKey2;
    }();
    B58PrivateKey.prototype["b58_private_key"] = void 0;
    var _default = B58PrivateKey;
    exports["default"] = _default;
  }
});

// node_modules/theblockchainapi/dist/model/BSCPublicAddress.js
var require_BSCPublicAddress = __commonJS({
  "node_modules/theblockchainapi/dist/model/BSCPublicAddress.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var BSCPublicAddress = function() {
      function BSCPublicAddress2() {
        _classCallCheck(this, BSCPublicAddress2);
        BSCPublicAddress2.initialize(this);
      }
      _createClass(BSCPublicAddress2, null, [{
        key: "initialize",
        value: function initialize(obj) {
        }
        /**
         * Constructs a <code>BSCPublicAddress</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/BSCPublicAddress} obj Optional instance to populate.
         * @return {module:model/BSCPublicAddress} The populated <code>BSCPublicAddress</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new BSCPublicAddress2();
            if (data.hasOwnProperty("hex_public_address")) {
              obj["hex_public_address"] = _ApiClient["default"].convertToType(data["hex_public_address"], "String");
            }
            if (data.hasOwnProperty("hex_public_key")) {
              obj["hex_public_key"] = _ApiClient["default"].convertToType(data["hex_public_key"], "String");
            }
          }
          return obj;
        }
      }]);
      return BSCPublicAddress2;
    }();
    BSCPublicAddress.prototype["hex_public_address"] = void 0;
    BSCPublicAddress.prototype["hex_public_key"] = void 0;
    var _default = BSCPublicAddress;
    exports["default"] = _default;
  }
});

// node_modules/theblockchainapi/dist/model/BalanceRequest.js
var require_BalanceRequest = __commonJS({
  "node_modules/theblockchainapi/dist/model/BalanceRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var BalanceRequest = function() {
      function BalanceRequest2(publicKey) {
        _classCallCheck(this, BalanceRequest2);
        BalanceRequest2.initialize(this, publicKey);
      }
      _createClass(BalanceRequest2, null, [{
        key: "initialize",
        value: function initialize(obj, publicKey) {
          obj["public_key"] = publicKey;
        }
        /**
         * Constructs a <code>BalanceRequest</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/BalanceRequest} obj Optional instance to populate.
         * @return {module:model/BalanceRequest} The populated <code>BalanceRequest</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new BalanceRequest2();
            if (data.hasOwnProperty("public_key")) {
              obj["public_key"] = _ApiClient["default"].convertToType(data["public_key"], "String");
            }
            if (data.hasOwnProperty("unit")) {
              obj["unit"] = _ApiClient["default"].convertToType(data["unit"], "String");
            }
            if (data.hasOwnProperty("network")) {
              obj["network"] = _ApiClient["default"].convertToType(data["network"], "String");
            }
            if (data.hasOwnProperty("mint_address")) {
              obj["mint_address"] = _ApiClient["default"].convertToType(data["mint_address"], "String");
            }
          }
          return obj;
        }
      }]);
      return BalanceRequest2;
    }();
    BalanceRequest.prototype["public_key"] = void 0;
    BalanceRequest.prototype["unit"] = "lamport";
    BalanceRequest.prototype["network"] = "devnet";
    BalanceRequest.prototype["mint_address"] = "null";
    BalanceRequest["UnitEnum"] = {
      /**
       * value: "lamport"
       * @const
       */
      "lamport": "lamport",
      /**
       * value: "sol"
       * @const
       */
      "sol": "sol"
    };
    BalanceRequest["NetworkEnum"] = {
      /**
       * value: "devnet"
       * @const
       */
      "devnet": "devnet",
      /**
       * value: "mainnet-beta"
       * @const
       */
      "mainnet-beta": "mainnet-beta"
    };
    var _default = BalanceRequest;
    exports["default"] = _default;
  }
});

// node_modules/theblockchainapi/dist/model/BalanceResponse.js
var require_BalanceResponse = __commonJS({
  "node_modules/theblockchainapi/dist/model/BalanceResponse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var BalanceResponse = function() {
      function BalanceResponse2(balance, network) {
        _classCallCheck(this, BalanceResponse2);
        BalanceResponse2.initialize(this, balance, network);
      }
      _createClass(BalanceResponse2, null, [{
        key: "initialize",
        value: function initialize(obj, balance, network) {
          obj["balance"] = balance;
          obj["network"] = network;
        }
        /**
         * Constructs a <code>BalanceResponse</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/BalanceResponse} obj Optional instance to populate.
         * @return {module:model/BalanceResponse} The populated <code>BalanceResponse</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new BalanceResponse2();
            if (data.hasOwnProperty("balance")) {
              obj["balance"] = _ApiClient["default"].convertToType(data["balance"], "Number");
            }
            if (data.hasOwnProperty("integer_balance")) {
              obj["integer_balance"] = _ApiClient["default"].convertToType(data["integer_balance"], "Number");
            }
            if (data.hasOwnProperty("decimals")) {
              obj["decimals"] = _ApiClient["default"].convertToType(data["decimals"], "Number");
            }
            if (data.hasOwnProperty("network")) {
              obj["network"] = _ApiClient["default"].convertToType(data["network"], "String");
            }
            if (data.hasOwnProperty("unit")) {
              obj["unit"] = _ApiClient["default"].convertToType(data["unit"], "String");
            }
          }
          return obj;
        }
      }]);
      return BalanceResponse2;
    }();
    BalanceResponse.prototype["balance"] = void 0;
    BalanceResponse.prototype["integer_balance"] = void 0;
    BalanceResponse.prototype["decimals"] = void 0;
    BalanceResponse.prototype["network"] = void 0;
    BalanceResponse.prototype["unit"] = void 0;
    BalanceResponse["NetworkEnum"] = {
      /**
       * value: "devnet"
       * @const
       */
      "devnet": "devnet",
      /**
       * value: "mainnet-beta"
       * @const
       */
      "mainnet-beta": "mainnet-beta"
    };
    BalanceResponse["UnitEnum"] = {
      /**
       * value: "lamport"
       * @const
       */
      "lamport": "lamport",
      /**
       * value: "sol"
       * @const
       */
      "sol": "sol"
    };
    var _default = BalanceResponse;
    exports["default"] = _default;
  }
});

// node_modules/theblockchainapi/dist/model/CCPaymentBlockchainPaymentDetails.js
var require_CCPaymentBlockchainPaymentDetails = __commonJS({
  "node_modules/theblockchainapi/dist/model/CCPaymentBlockchainPaymentDetails.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var CCPaymentBlockchainPaymentDetails = function() {
      function CCPaymentBlockchainPaymentDetails2() {
        _classCallCheck(this, CCPaymentBlockchainPaymentDetails2);
        CCPaymentBlockchainPaymentDetails2.initialize(this);
      }
      _createClass(CCPaymentBlockchainPaymentDetails2, null, [{
        key: "initialize",
        value: function initialize(obj) {
        }
        /**
         * Constructs a <code>CCPaymentBlockchainPaymentDetails</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/CCPaymentBlockchainPaymentDetails} obj Optional instance to populate.
         * @return {module:model/CCPaymentBlockchainPaymentDetails} The populated <code>CCPaymentBlockchainPaymentDetails</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new CCPaymentBlockchainPaymentDetails2();
            if (data.hasOwnProperty("chain")) {
              obj["chain"] = _ApiClient["default"].convertToType(data["chain"], "String");
            }
            if (data.hasOwnProperty("fee_amount")) {
              obj["fee_amount"] = _ApiClient["default"].convertToType(data["fee_amount"], "String");
            }
            if (data.hasOwnProperty("payout_amount")) {
              obj["payout_amount"] = _ApiClient["default"].convertToType(data["payout_amount"], "String");
            }
            if (data.hasOwnProperty("token_blockchain_identifier")) {
              obj["token_blockchain_identifier"] = _ApiClient["default"].convertToType(data["token_blockchain_identifier"], "String");
            }
            if (data.hasOwnProperty("total_paid")) {
              obj["total_paid"] = _ApiClient["default"].convertToType(data["total_paid"], "String");
            }
            if (data.hasOwnProperty("transaction_signature")) {
              obj["transaction_signature"] = _ApiClient["default"].convertToType(data["transaction_signature"], "String");
            }
          }
          return obj;
        }
      }]);
      return CCPaymentBlockchainPaymentDetails2;
    }();
    CCPaymentBlockchainPaymentDetails.prototype["chain"] = void 0;
    CCPaymentBlockchainPaymentDetails.prototype["fee_amount"] = void 0;
    CCPaymentBlockchainPaymentDetails.prototype["payout_amount"] = void 0;
    CCPaymentBlockchainPaymentDetails.prototype["token_blockchain_identifier"] = void 0;
    CCPaymentBlockchainPaymentDetails.prototype["total_paid"] = void 0;
    CCPaymentBlockchainPaymentDetails.prototype["transaction_signature"] = void 0;
    CCPaymentBlockchainPaymentDetails["ChainEnum"] = {
      /**
       * value: "solana"
       * @const
       */
      "solana": "solana"
    };
    var _default = CCPaymentBlockchainPaymentDetails;
    exports["default"] = _default;
  }
});

// node_modules/theblockchainapi/dist/model/CCPayment.js
var require_CCPayment = __commonJS({
  "node_modules/theblockchainapi/dist/model/CCPayment.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    var _CCPaymentBlockchainPaymentDetails = _interopRequireDefault(require_CCPaymentBlockchainPaymentDetails());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var CCPayment = function() {
      function CCPayment2() {
        _classCallCheck(this, CCPayment2);
        CCPayment2.initialize(this);
      }
      _createClass(CCPayment2, null, [{
        key: "initialize",
        value: function initialize(obj) {
        }
        /**
         * Constructs a <code>CCPayment</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/CCPayment} obj Optional instance to populate.
         * @return {module:model/CCPayment} The populated <code>CCPayment</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new CCPayment2();
            if (data.hasOwnProperty("project_id")) {
              obj["project_id"] = _ApiClient["default"].convertToType(data["project_id"], "String");
            }
            if (data.hasOwnProperty("product_id")) {
              obj["product_id"] = _ApiClient["default"].convertToType(data["product_id"], "String");
            }
            if (data.hasOwnProperty("plan_id")) {
              obj["plan_id"] = _ApiClient["default"].convertToType(data["plan_id"], "String");
            }
            if (data.hasOwnProperty("payment_id")) {
              obj["payment_id"] = _ApiClient["default"].convertToType(data["payment_id"], "String");
            }
            if (data.hasOwnProperty("blockchain_identifier")) {
              obj["blockchain_identifier"] = _ApiClient["default"].convertToType(data["blockchain_identifier"], "String");
            }
            if (data.hasOwnProperty("blockchain_payment_details")) {
              obj["blockchain_payment_details"] = _CCPaymentBlockchainPaymentDetails["default"].constructFromObject(data["blockchain_payment_details"]);
            }
            if (data.hasOwnProperty("customer_id")) {
              obj["customer_id"] = _ApiClient["default"].convertToType(data["customer_id"], "String");
            }
            if (data.hasOwnProperty("payment_validation_code")) {
              obj["payment_validation_code"] = _ApiClient["default"].convertToType(data["payment_validation_code"], "String");
            }
            if (data.hasOwnProperty("period_end")) {
              obj["period_end"] = _ApiClient["default"].convertToType(data["period_end"], "Number");
            }
            if (data.hasOwnProperty("period_start")) {
              obj["period_start"] = _ApiClient["default"].convertToType(data["period_start"], "Number");
            }
            if (data.hasOwnProperty("transaction_blockchain_identifier")) {
              obj["transaction_blockchain_identifier"] = _ApiClient["default"].convertToType(data["transaction_blockchain_identifier"], "String");
            }
          }
          return obj;
        }
      }]);
      return CCPayment2;
    }();
    CCPayment.prototype["project_id"] = void 0;
    CCPayment.prototype["product_id"] = void 0;
    CCPayment.prototype["plan_id"] = void 0;
    CCPayment.prototype["payment_id"] = void 0;
    CCPayment.prototype["blockchain_identifier"] = void 0;
    CCPayment.prototype["blockchain_payment_details"] = void 0;
    CCPayment.prototype["customer_id"] = void 0;
    CCPayment.prototype["payment_validation_code"] = void 0;
    CCPayment.prototype["period_end"] = void 0;
    CCPayment.prototype["period_start"] = void 0;
    CCPayment.prototype["transaction_blockchain_identifier"] = void 0;
    var _default = CCPayment;
    exports["default"] = _default;
  }
});

// node_modules/theblockchainapi/dist/model/CCProjectCreateRequestCustomerIdToCollect.js
var require_CCProjectCreateRequestCustomerIdToCollect = __commonJS({
  "node_modules/theblockchainapi/dist/model/CCProjectCreateRequestCustomerIdToCollect.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var CCProjectCreateRequestCustomerIdToCollect = function() {
      function CCProjectCreateRequestCustomerIdToCollect2(idType, name) {
        _classCallCheck(this, CCProjectCreateRequestCustomerIdToCollect2);
        CCProjectCreateRequestCustomerIdToCollect2.initialize(this, idType, name);
      }
      _createClass(CCProjectCreateRequestCustomerIdToCollect2, null, [{
        key: "initialize",
        value: function initialize(obj, idType, name) {
          obj["id_type"] = idType;
          obj["name"] = name;
        }
        /**
         * Constructs a <code>CCProjectCreateRequestCustomerIdToCollect</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/CCProjectCreateRequestCustomerIdToCollect} obj Optional instance to populate.
         * @return {module:model/CCProjectCreateRequestCustomerIdToCollect} The populated <code>CCProjectCreateRequestCustomerIdToCollect</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new CCProjectCreateRequestCustomerIdToCollect2();
            if (data.hasOwnProperty("id_type")) {
              obj["id_type"] = _ApiClient["default"].convertToType(data["id_type"], "String");
            }
            if (data.hasOwnProperty("name")) {
              obj["name"] = _ApiClient["default"].convertToType(data["name"], "String");
            }
            if (data.hasOwnProperty("description")) {
              obj["description"] = _ApiClient["default"].convertToType(data["description"], "String");
            }
            if (data.hasOwnProperty("required")) {
              obj["required"] = _ApiClient["default"].convertToType(data["required"], "Boolean");
            }
          }
          return obj;
        }
      }]);
      return CCProjectCreateRequestCustomerIdToCollect2;
    }();
    CCProjectCreateRequestCustomerIdToCollect.prototype["id_type"] = void 0;
    CCProjectCreateRequestCustomerIdToCollect.prototype["name"] = void 0;
    CCProjectCreateRequestCustomerIdToCollect.prototype["description"] = "";
    CCProjectCreateRequestCustomerIdToCollect.prototype["required"] = false;
    CCProjectCreateRequestCustomerIdToCollect["IdTypeEnum"] = {
      /**
       * value: "misc"
       * @const
       */
      "misc": "misc",
      /**
       * value: "email"
       * @const
       */
      "email": "email"
    };
    var _default = CCProjectCreateRequestCustomerIdToCollect;
    exports["default"] = _default;
  }
});

// node_modules/theblockchainapi/dist/model/CCProjectCreateRequestPayoutMethod.js
var require_CCProjectCreateRequestPayoutMethod = __commonJS({
  "node_modules/theblockchainapi/dist/model/CCProjectCreateRequestPayoutMethod.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var CCProjectCreateRequestPayoutMethod = function() {
      function CCProjectCreateRequestPayoutMethod2(blockchainIdentifier) {
        _classCallCheck(this, CCProjectCreateRequestPayoutMethod2);
        CCProjectCreateRequestPayoutMethod2.initialize(this, blockchainIdentifier);
      }
      _createClass(CCProjectCreateRequestPayoutMethod2, null, [{
        key: "initialize",
        value: function initialize(obj, blockchainIdentifier) {
          obj["blockchain_identifier"] = blockchainIdentifier;
        }
        /**
         * Constructs a <code>CCProjectCreateRequestPayoutMethod</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/CCProjectCreateRequestPayoutMethod} obj Optional instance to populate.
         * @return {module:model/CCProjectCreateRequestPayoutMethod} The populated <code>CCProjectCreateRequestPayoutMethod</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new CCProjectCreateRequestPayoutMethod2();
            if (data.hasOwnProperty("blockchain_identifier")) {
              obj["blockchain_identifier"] = _ApiClient["default"].convertToType(data["blockchain_identifier"], "String");
            }
          }
          return obj;
        }
      }]);
      return CCProjectCreateRequestPayoutMethod2;
    }();
    CCProjectCreateRequestPayoutMethod.prototype["blockchain_identifier"] = void 0;
    var _default = CCProjectCreateRequestPayoutMethod;
    exports["default"] = _default;
  }
});

// node_modules/theblockchainapi/dist/model/CCProject.js
var require_CCProject = __commonJS({
  "node_modules/theblockchainapi/dist/model/CCProject.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    var _CCProjectCreateRequestCustomerIdToCollect = _interopRequireDefault(require_CCProjectCreateRequestCustomerIdToCollect());
    var _CCProjectCreateRequestPayoutMethod = _interopRequireDefault(require_CCProjectCreateRequestPayoutMethod());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var CCProject = function() {
      function CCProject2(projectId, name) {
        _classCallCheck(this, CCProject2);
        CCProject2.initialize(this, projectId, name);
      }
      _createClass(CCProject2, null, [{
        key: "initialize",
        value: function initialize(obj, projectId, name) {
          obj["project_id"] = projectId;
          obj["name"] = name;
        }
        /**
         * Constructs a <code>CCProject</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/CCProject} obj Optional instance to populate.
         * @return {module:model/CCProject} The populated <code>CCProject</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new CCProject2();
            if (data.hasOwnProperty("project_id")) {
              obj["project_id"] = _ApiClient["default"].convertToType(data["project_id"], "String");
            }
            if (data.hasOwnProperty("name")) {
              obj["name"] = _ApiClient["default"].convertToType(data["name"], "String");
            }
            if (data.hasOwnProperty("description")) {
              obj["description"] = _ApiClient["default"].convertToType(data["description"], "String");
            }
            if (data.hasOwnProperty("webhook")) {
              obj["webhook"] = _ApiClient["default"].convertToType(data["webhook"], "String");
            }
            if (data.hasOwnProperty("website")) {
              obj["website"] = _ApiClient["default"].convertToType(data["website"], "String");
            }
            if (data.hasOwnProperty("discord_webhook")) {
              obj["discord_webhook"] = _ApiClient["default"].convertToType(data["discord_webhook"], "String");
            }
            if (data.hasOwnProperty("logo_url")) {
              obj["logo_url"] = _ApiClient["default"].convertToType(data["logo_url"], "String");
            }
            if (data.hasOwnProperty("customer_id_to_collect")) {
              obj["customer_id_to_collect"] = _CCProjectCreateRequestCustomerIdToCollect["default"].constructFromObject(data["customer_id_to_collect"]);
            }
            if (data.hasOwnProperty("success_url")) {
              obj["success_url"] = _ApiClient["default"].convertToType(data["success_url"], "String");
            }
            if (data.hasOwnProperty("payout_method")) {
              obj["payout_method"] = _CCProjectCreateRequestPayoutMethod["default"].constructFromObject(data["payout_method"]);
            }
          }
          return obj;
        }
      }]);
      return CCProject2;
    }();
    CCProject.prototype["project_id"] = void 0;
    CCProject.prototype["name"] = void 0;
    CCProject.prototype["description"] = void 0;
    CCProject.prototype["webhook"] = void 0;
    CCProject.prototype["website"] = void 0;
    CCProject.prototype["discord_webhook"] = void 0;
    CCProject.prototype["logo_url"] = void 0;
    CCProject.prototype["customer_id_to_collect"] = void 0;
    CCProject.prototype["success_url"] = void 0;
    CCProject.prototype["payout_method"] = void 0;
    var _default = CCProject;
    exports["default"] = _default;
  }
});

// node_modules/theblockchainapi/dist/model/CCProjectCreateRequest.js
var require_CCProjectCreateRequest = __commonJS({
  "node_modules/theblockchainapi/dist/model/CCProjectCreateRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    var _CCProjectCreateRequestCustomerIdToCollect = _interopRequireDefault(require_CCProjectCreateRequestCustomerIdToCollect());
    var _CCProjectCreateRequestPayoutMethod = _interopRequireDefault(require_CCProjectCreateRequestPayoutMethod());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var CCProjectCreateRequest = function() {
      function CCProjectCreateRequest2(name) {
        _classCallCheck(this, CCProjectCreateRequest2);
        CCProjectCreateRequest2.initialize(this, name);
      }
      _createClass(CCProjectCreateRequest2, null, [{
        key: "initialize",
        value: function initialize(obj, name) {
          obj["name"] = name;
        }
        /**
         * Constructs a <code>CCProjectCreateRequest</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/CCProjectCreateRequest} obj Optional instance to populate.
         * @return {module:model/CCProjectCreateRequest} The populated <code>CCProjectCreateRequest</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new CCProjectCreateRequest2();
            if (data.hasOwnProperty("name")) {
              obj["name"] = _ApiClient["default"].convertToType(data["name"], "String");
            }
            if (data.hasOwnProperty("description")) {
              obj["description"] = _ApiClient["default"].convertToType(data["description"], "String");
            }
            if (data.hasOwnProperty("webhook")) {
              obj["webhook"] = _ApiClient["default"].convertToType(data["webhook"], "String");
            }
            if (data.hasOwnProperty("website")) {
              obj["website"] = _ApiClient["default"].convertToType(data["website"], "String");
            }
            if (data.hasOwnProperty("discord_webhook")) {
              obj["discord_webhook"] = _ApiClient["default"].convertToType(data["discord_webhook"], "String");
            }
            if (data.hasOwnProperty("logo_url")) {
              obj["logo_url"] = _ApiClient["default"].convertToType(data["logo_url"], "String");
            }
            if (data.hasOwnProperty("customer_id_to_collect")) {
              obj["customer_id_to_collect"] = _CCProjectCreateRequestCustomerIdToCollect["default"].constructFromObject(data["customer_id_to_collect"]);
            }
            if (data.hasOwnProperty("success_url")) {
              obj["success_url"] = _ApiClient["default"].convertToType(data["success_url"], "String");
            }
            if (data.hasOwnProperty("payout_method")) {
              obj["payout_method"] = _CCProjectCreateRequestPayoutMethod["default"].constructFromObject(data["payout_method"]);
            }
          }
          return obj;
        }
      }]);
      return CCProjectCreateRequest2;
    }();
    CCProjectCreateRequest.prototype["name"] = void 0;
    CCProjectCreateRequest.prototype["description"] = void 0;
    CCProjectCreateRequest.prototype["webhook"] = void 0;
    CCProjectCreateRequest.prototype["website"] = void 0;
    CCProjectCreateRequest.prototype["discord_webhook"] = void 0;
    CCProjectCreateRequest.prototype["logo_url"] = void 0;
    CCProjectCreateRequest.prototype["customer_id_to_collect"] = void 0;
    CCProjectCreateRequest.prototype["success_url"] = void 0;
    CCProjectCreateRequest.prototype["payout_method"] = void 0;
    var _default = CCProjectCreateRequest;
    exports["default"] = _default;
  }
});

// node_modules/theblockchainapi/dist/model/CCWebhook.js
var require_CCWebhook = __commonJS({
  "node_modules/theblockchainapi/dist/model/CCWebhook.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    var _CCPayment = _interopRequireDefault(require_CCPayment());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var CCWebhook = function() {
      function CCWebhook2() {
        _classCallCheck(this, CCWebhook2);
        CCWebhook2.initialize(this);
      }
      _createClass(CCWebhook2, null, [{
        key: "initialize",
        value: function initialize(obj) {
        }
        /**
         * Constructs a <code>CCWebhook</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/CCWebhook} obj Optional instance to populate.
         * @return {module:model/CCWebhook} The populated <code>CCWebhook</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new CCWebhook2();
            if (data.hasOwnProperty("webhook_id")) {
              obj["webhook_id"] = _ApiClient["default"].convertToType(data["webhook_id"], "String");
            }
            if (data.hasOwnProperty("signature")) {
              obj["signature"] = _ApiClient["default"].convertToType(data["signature"], Object);
            }
            if (data.hasOwnProperty("time_sent")) {
              obj["time_sent"] = _ApiClient["default"].convertToType(data["time_sent"], "Number");
            }
            if (data.hasOwnProperty("data")) {
              obj["data"] = _CCPayment["default"].constructFromObject(data["data"]);
            }
          }
          return obj;
        }
      }]);
      return CCWebhook2;
    }();
    CCWebhook.prototype["webhook_id"] = void 0;
    CCWebhook.prototype["signature"] = void 0;
    CCWebhook.prototype["time_sent"] = void 0;
    CCWebhook.prototype["data"] = void 0;
    var _default = CCWebhook;
    exports["default"] = _default;
  }
});

// node_modules/theblockchainapi/dist/model/CCWebhookValidateRequest.js
var require_CCWebhookValidateRequest = __commonJS({
  "node_modules/theblockchainapi/dist/model/CCWebhookValidateRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var CCWebhookValidateRequest = function() {
      function CCWebhookValidateRequest2(webhookId, webhookSignature, timeSent) {
        _classCallCheck(this, CCWebhookValidateRequest2);
        CCWebhookValidateRequest2.initialize(this, webhookId, webhookSignature, timeSent);
      }
      _createClass(CCWebhookValidateRequest2, null, [{
        key: "initialize",
        value: function initialize(obj, webhookId, webhookSignature, timeSent) {
          obj["webhook_id"] = webhookId;
          obj["webhook_signature"] = webhookSignature;
          obj["time_sent"] = timeSent;
        }
        /**
         * Constructs a <code>CCWebhookValidateRequest</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/CCWebhookValidateRequest} obj Optional instance to populate.
         * @return {module:model/CCWebhookValidateRequest} The populated <code>CCWebhookValidateRequest</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new CCWebhookValidateRequest2();
            if (data.hasOwnProperty("webhook_id")) {
              obj["webhook_id"] = _ApiClient["default"].convertToType(data["webhook_id"], "String");
            }
            if (data.hasOwnProperty("webhook_signature")) {
              obj["webhook_signature"] = _ApiClient["default"].convertToType(data["webhook_signature"], Object);
            }
            if (data.hasOwnProperty("time_sent")) {
              obj["time_sent"] = _ApiClient["default"].convertToType(data["time_sent"], "Number");
            }
          }
          return obj;
        }
      }]);
      return CCWebhookValidateRequest2;
    }();
    CCWebhookValidateRequest.prototype["webhook_id"] = void 0;
    CCWebhookValidateRequest.prototype["webhook_signature"] = void 0;
    CCWebhookValidateRequest.prototype["time_sent"] = void 0;
    var _default = CCWebhookValidateRequest;
    exports["default"] = _default;
  }
});

// node_modules/theblockchainapi/dist/model/CandyMachineSearchRequest.js
var require_CandyMachineSearchRequest = __commonJS({
  "node_modules/theblockchainapi/dist/model/CandyMachineSearchRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var CandyMachineSearchRequest = function() {
      function CandyMachineSearchRequest2() {
        _classCallCheck(this, CandyMachineSearchRequest2);
        CandyMachineSearchRequest2.initialize(this);
      }
      _createClass(CandyMachineSearchRequest2, null, [{
        key: "initialize",
        value: function initialize(obj) {
        }
        /**
         * Constructs a <code>CandyMachineSearchRequest</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/CandyMachineSearchRequest} obj Optional instance to populate.
         * @return {module:model/CandyMachineSearchRequest} The populated <code>CandyMachineSearchRequest</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new CandyMachineSearchRequest2();
            if (data.hasOwnProperty("update_authority")) {
              obj["update_authority"] = _ApiClient["default"].convertToType(data["update_authority"], "String");
            }
            if (data.hasOwnProperty("update_authority_search_method")) {
              obj["update_authority_search_method"] = _ApiClient["default"].convertToType(data["update_authority_search_method"], "String");
            }
            if (data.hasOwnProperty("config_address")) {
              obj["config_address"] = _ApiClient["default"].convertToType(data["config_address"], "String");
            }
            if (data.hasOwnProperty("config_address_search_method")) {
              obj["config_address_search_method"] = _ApiClient["default"].convertToType(data["config_address_search_method"], "String");
            }
            if (data.hasOwnProperty("uuid")) {
              obj["uuid"] = _ApiClient["default"].convertToType(data["uuid"], "String");
            }
            if (data.hasOwnProperty("uuid_search_method")) {
              obj["uuid_search_method"] = _ApiClient["default"].convertToType(data["uuid_search_method"], "String");
            }
            if (data.hasOwnProperty("symbol")) {
              obj["symbol"] = _ApiClient["default"].convertToType(data["symbol"], "String");
            }
            if (data.hasOwnProperty("symbol_search_method")) {
              obj["symbol_search_method"] = _ApiClient["default"].convertToType(data["symbol_search_method"], "String");
            }
            if (data.hasOwnProperty("nft_name")) {
              obj["nft_name"] = _ApiClient["default"].convertToType(data["nft_name"], "String");
            }
            if (data.hasOwnProperty("nft_name_index")) {
              obj["nft_name_index"] = _ApiClient["default"].convertToType(data["nft_name_index"], "String");
            }
            if (data.hasOwnProperty("nft_name_search_method")) {
              obj["nft_name_search_method"] = _ApiClient["default"].convertToType(data["nft_name_search_method"], "String");
            }
            if (data.hasOwnProperty("network")) {
              obj["network"] = _ApiClient["default"].convertToType(data["network"], "String");
            }
            if (data.hasOwnProperty("candy_machine_contract_version")) {
              obj["candy_machine_contract_version"] = _ApiClient["default"].convertToType(data["candy_machine_contract_version"], "String");
            }
          }
          return obj;
        }
      }]);
      return CandyMachineSearchRequest2;
    }();
    CandyMachineSearchRequest.prototype["update_authority"] = void 0;
    CandyMachineSearchRequest.prototype["update_authority_search_method"] = "exact_match";
    CandyMachineSearchRequest.prototype["config_address"] = void 0;
    CandyMachineSearchRequest.prototype["config_address_search_method"] = "exact_match";
    CandyMachineSearchRequest.prototype["uuid"] = void 0;
    CandyMachineSearchRequest.prototype["uuid_search_method"] = "exact_match";
    CandyMachineSearchRequest.prototype["symbol"] = void 0;
    CandyMachineSearchRequest.prototype["symbol_search_method"] = "exact_match";
    CandyMachineSearchRequest.prototype["nft_name"] = void 0;
    CandyMachineSearchRequest.prototype["nft_name_index"] = "0";
    CandyMachineSearchRequest.prototype["nft_name_search_method"] = "exact_match";
    CandyMachineSearchRequest.prototype["network"] = "devnet";
    CandyMachineSearchRequest.prototype["candy_machine_contract_version"] = "v1";
    CandyMachineSearchRequest["UpdateAuthoritySearchMethodEnum"] = {
      /**
       * value: "exact_match"
       * @const
       */
      "exact_match": "exact_match"
    };
    CandyMachineSearchRequest["ConfigAddressSearchMethodEnum"] = {
      /**
       * value: "exact_match"
       * @const
       */
      "exact_match": "exact_match"
    };
    CandyMachineSearchRequest["UuidSearchMethodEnum"] = {
      /**
       * value: "exact_match"
       * @const
       */
      "exact_match": "exact_match"
    };
    CandyMachineSearchRequest["SymbolSearchMethodEnum"] = {
      /**
       * value: "begins_with"
       * @const
       */
      "begins_with": "begins_with",
      /**
       * value: "exact_match"
       * @const
       */
      "exact_match": "exact_match"
    };
    CandyMachineSearchRequest["NftNameSearchMethodEnum"] = {
      /**
       * value: "begins_with"
       * @const
       */
      "begins_with": "begins_with",
      /**
       * value: "exact_match"
       * @const
       */
      "exact_match": "exact_match"
    };
    CandyMachineSearchRequest["NetworkEnum"] = {
      /**
       * value: "devnet"
       * @const
       */
      "devnet": "devnet",
      /**
       * value: "mainnet-beta"
       * @const
       */
      "mainnet-beta": "mainnet-beta"
    };
    CandyMachineSearchRequest["CandyMachineContractVersionEnum"] = {
      /**
       * value: "v1"
       * @const
       */
      "v1": "v1",
      /**
       * value: "v2"
       * @const
       */
      "v2": "v2"
    };
    var _default = CandyMachineSearchRequest;
    exports["default"] = _default;
  }
});

// node_modules/theblockchainapi/dist/model/TransferResponse.js
var require_TransferResponse = __commonJS({
  "node_modules/theblockchainapi/dist/model/TransferResponse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var TransferResponse = function() {
      function TransferResponse2() {
        _classCallCheck(this, TransferResponse2);
        TransferResponse2.initialize(this);
      }
      _createClass(TransferResponse2, null, [{
        key: "initialize",
        value: function initialize(obj) {
        }
        /**
         * Constructs a <code>TransferResponse</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/TransferResponse} obj Optional instance to populate.
         * @return {module:model/TransferResponse} The populated <code>TransferResponse</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new TransferResponse2();
            if (data.hasOwnProperty("transaction_signature")) {
              obj["transaction_signature"] = _ApiClient["default"].convertToType(data["transaction_signature"], "String");
            }
            if (data.hasOwnProperty("confirmed")) {
              obj["confirmed"] = _ApiClient["default"].convertToType(data["confirmed"], "Boolean");
            }
          }
          return obj;
        }
      }]);
      return TransferResponse2;
    }();
    TransferResponse.prototype["transaction_signature"] = void 0;
    TransferResponse.prototype["confirmed"] = void 0;
    var _default = TransferResponse;
    exports["default"] = _default;
  }
});

// node_modules/theblockchainapi/dist/model/TransferResponseCompiled.js
var require_TransferResponseCompiled = __commonJS({
  "node_modules/theblockchainapi/dist/model/TransferResponseCompiled.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var TransferResponseCompiled = function() {
      function TransferResponseCompiled2() {
        _classCallCheck(this, TransferResponseCompiled2);
        TransferResponseCompiled2.initialize(this);
      }
      _createClass(TransferResponseCompiled2, null, [{
        key: "initialize",
        value: function initialize(obj) {
        }
        /**
         * Constructs a <code>TransferResponseCompiled</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/TransferResponseCompiled} obj Optional instance to populate.
         * @return {module:model/TransferResponseCompiled} The populated <code>TransferResponseCompiled</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new TransferResponseCompiled2();
            if (data.hasOwnProperty("b58_compiled_transaction")) {
              obj["b58_compiled_transaction"] = _ApiClient["default"].convertToType(data["b58_compiled_transaction"], "String");
            }
            if (data.hasOwnProperty("compiled_transaction")) {
              obj["compiled_transaction"] = _ApiClient["default"].convertToType(data["compiled_transaction"], Object);
            }
          }
          return obj;
        }
      }]);
      return TransferResponseCompiled2;
    }();
    TransferResponseCompiled.prototype["b58_compiled_transaction"] = void 0;
    TransferResponseCompiled.prototype["compiled_transaction"] = void 0;
    var _default = TransferResponseCompiled;
    exports["default"] = _default;
  }
});

// node_modules/theblockchainapi/dist/model/DoubleTransferResponse.js
var require_DoubleTransferResponse = __commonJS({
  "node_modules/theblockchainapi/dist/model/DoubleTransferResponse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    var _TransferResponse = _interopRequireDefault(require_TransferResponse());
    var _TransferResponseCompiled = _interopRequireDefault(require_TransferResponseCompiled());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var DoubleTransferResponse = function() {
      function DoubleTransferResponse2() {
        _classCallCheck(this, DoubleTransferResponse2);
        _TransferResponse["default"].initialize(this);
        _TransferResponseCompiled["default"].initialize(this);
        DoubleTransferResponse2.initialize(this);
      }
      _createClass(DoubleTransferResponse2, null, [{
        key: "initialize",
        value: function initialize(obj) {
        }
        /**
         * Constructs a <code>DoubleTransferResponse</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/DoubleTransferResponse} obj Optional instance to populate.
         * @return {module:model/DoubleTransferResponse} The populated <code>DoubleTransferResponse</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new DoubleTransferResponse2();
            _TransferResponse["default"].constructFromObject(data, obj);
            _TransferResponseCompiled["default"].constructFromObject(data, obj);
            if (data.hasOwnProperty("transaction_signature")) {
              obj["transaction_signature"] = _ApiClient["default"].convertToType(data["transaction_signature"], "String");
            }
            if (data.hasOwnProperty("confirmed")) {
              obj["confirmed"] = _ApiClient["default"].convertToType(data["confirmed"], "Boolean");
            }
            if (data.hasOwnProperty("b58_compiled_transaction")) {
              obj["b58_compiled_transaction"] = _ApiClient["default"].convertToType(data["b58_compiled_transaction"], "String");
            }
            if (data.hasOwnProperty("compiled_transaction")) {
              obj["compiled_transaction"] = _ApiClient["default"].convertToType(data["compiled_transaction"], Object);
            }
          }
          return obj;
        }
      }]);
      return DoubleTransferResponse2;
    }();
    DoubleTransferResponse.prototype["transaction_signature"] = void 0;
    DoubleTransferResponse.prototype["confirmed"] = void 0;
    DoubleTransferResponse.prototype["b58_compiled_transaction"] = void 0;
    DoubleTransferResponse.prototype["compiled_transaction"] = void 0;
    _TransferResponse["default"].prototype["transaction_signature"] = void 0;
    _TransferResponse["default"].prototype["confirmed"] = void 0;
    _TransferResponseCompiled["default"].prototype["b58_compiled_transaction"] = void 0;
    _TransferResponseCompiled["default"].prototype["compiled_transaction"] = void 0;
    var _default = DoubleTransferResponse;
    exports["default"] = _default;
  }
});

// node_modules/theblockchainapi/dist/model/EthereumPublicAddress.js
var require_EthereumPublicAddress = __commonJS({
  "node_modules/theblockchainapi/dist/model/EthereumPublicAddress.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var EthereumPublicAddress = function() {
      function EthereumPublicAddress2() {
        _classCallCheck(this, EthereumPublicAddress2);
        EthereumPublicAddress2.initialize(this);
      }
      _createClass(EthereumPublicAddress2, null, [{
        key: "initialize",
        value: function initialize(obj) {
        }
        /**
         * Constructs a <code>EthereumPublicAddress</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/EthereumPublicAddress} obj Optional instance to populate.
         * @return {module:model/EthereumPublicAddress} The populated <code>EthereumPublicAddress</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new EthereumPublicAddress2();
            if (data.hasOwnProperty("hex_public_address")) {
              obj["hex_public_address"] = _ApiClient["default"].convertToType(data["hex_public_address"], "String");
            }
            if (data.hasOwnProperty("hex_public_key")) {
              obj["hex_public_key"] = _ApiClient["default"].convertToType(data["hex_public_key"], "String");
            }
          }
          return obj;
        }
      }]);
      return EthereumPublicAddress2;
    }();
    EthereumPublicAddress.prototype["hex_public_address"] = void 0;
    EthereumPublicAddress.prototype["hex_public_key"] = void 0;
    var _default = EthereumPublicAddress;
    exports["default"] = _default;
  }
});

// node_modules/theblockchainapi/dist/model/EthereumTransaction.js
var require_EthereumTransaction = __commonJS({
  "node_modules/theblockchainapi/dist/model/EthereumTransaction.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var EthereumTransaction = function() {
      function EthereumTransaction2() {
        _classCallCheck(this, EthereumTransaction2);
        EthereumTransaction2.initialize(this);
      }
      _createClass(EthereumTransaction2, null, [{
        key: "initialize",
        value: function initialize(obj) {
        }
        /**
         * Constructs a <code>EthereumTransaction</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/EthereumTransaction} obj Optional instance to populate.
         * @return {module:model/EthereumTransaction} The populated <code>EthereumTransaction</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new EthereumTransaction2();
            if (data.hasOwnProperty("access_list")) {
              obj["access_list"] = _ApiClient["default"].convertToType(data["access_list"], Object);
            }
            if (data.hasOwnProperty("block_hash")) {
              obj["block_hash"] = _ApiClient["default"].convertToType(data["block_hash"], "String");
            }
            if (data.hasOwnProperty("block_number")) {
              obj["block_number"] = _ApiClient["default"].convertToType(data["block_number"], "String");
            }
            if (data.hasOwnProperty("chain_id")) {
              obj["chain_id"] = _ApiClient["default"].convertToType(data["chain_id"], "String");
            }
            if (data.hasOwnProperty("from")) {
              obj["from"] = _ApiClient["default"].convertToType(data["from"], "String");
            }
            if (data.hasOwnProperty("gas")) {
              obj["gas"] = _ApiClient["default"].convertToType(data["gas"], "String");
            }
            if (data.hasOwnProperty("gas_price")) {
              obj["gas_price"] = _ApiClient["default"].convertToType(data["gas_price"], "String");
            }
            if (data.hasOwnProperty("hash")) {
              obj["hash"] = _ApiClient["default"].convertToType(data["hash"], "String");
            }
            if (data.hasOwnProperty("input")) {
              obj["input"] = _ApiClient["default"].convertToType(data["input"], "String");
            }
            if (data.hasOwnProperty("max_fee_per_gas")) {
              obj["max_fee_per_gas"] = _ApiClient["default"].convertToType(data["max_fee_per_gas"], "String");
            }
            if (data.hasOwnProperty("max_priority_fee_per_gas")) {
              obj["max_priority_fee_per_gas"] = _ApiClient["default"].convertToType(data["max_priority_fee_per_gas"], "String");
            }
            if (data.hasOwnProperty("nonce")) {
              obj["nonce"] = _ApiClient["default"].convertToType(data["nonce"], "String");
            }
            if (data.hasOwnProperty("r")) {
              obj["r"] = _ApiClient["default"].convertToType(data["r"], "String");
            }
            if (data.hasOwnProperty("s")) {
              obj["s"] = _ApiClient["default"].convertToType(data["s"], "String");
            }
            if (data.hasOwnProperty("to")) {
              obj["to"] = _ApiClient["default"].convertToType(data["to"], "String");
            }
            if (data.hasOwnProperty("transaction_index")) {
              obj["transaction_index"] = _ApiClient["default"].convertToType(data["transaction_index"], "String");
            }
            if (data.hasOwnProperty("type")) {
              obj["type"] = _ApiClient["default"].convertToType(data["type"], "String");
            }
            if (data.hasOwnProperty("v")) {
              obj["v"] = _ApiClient["default"].convertToType(data["v"], "String");
            }
            if (data.hasOwnProperty("value")) {
              obj["value"] = _ApiClient["default"].convertToType(data["value"], "String");
            }
          }
          return obj;
        }
      }]);
      return EthereumTransaction2;
    }();
    EthereumTransaction.prototype["access_list"] = void 0;
    EthereumTransaction.prototype["block_hash"] = void 0;
    EthereumTransaction.prototype["block_number"] = void 0;
    EthereumTransaction.prototype["chain_id"] = void 0;
    EthereumTransaction.prototype["from"] = void 0;
    EthereumTransaction.prototype["gas"] = void 0;
    EthereumTransaction.prototype["gas_price"] = void 0;
    EthereumTransaction.prototype["hash"] = void 0;
    EthereumTransaction.prototype["input"] = void 0;
    EthereumTransaction.prototype["max_fee_per_gas"] = void 0;
    EthereumTransaction.prototype["max_priority_fee_per_gas"] = void 0;
    EthereumTransaction.prototype["nonce"] = void 0;
    EthereumTransaction.prototype["r"] = void 0;
    EthereumTransaction.prototype["s"] = void 0;
    EthereumTransaction.prototype["to"] = void 0;
    EthereumTransaction.prototype["transaction_index"] = void 0;
    EthereumTransaction.prototype["type"] = void 0;
    EthereumTransaction.prototype["v"] = void 0;
    EthereumTransaction.prototype["value"] = void 0;
    var _default = EthereumTransaction;
    exports["default"] = _default;
  }
});

// node_modules/theblockchainapi/dist/model/EthereumTransactionCompiledResponse.js
var require_EthereumTransactionCompiledResponse = __commonJS({
  "node_modules/theblockchainapi/dist/model/EthereumTransactionCompiledResponse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var EthereumTransactionCompiledResponse = function() {
      function EthereumTransactionCompiledResponse2() {
        _classCallCheck(this, EthereumTransactionCompiledResponse2);
        EthereumTransactionCompiledResponse2.initialize(this);
      }
      _createClass(EthereumTransactionCompiledResponse2, null, [{
        key: "initialize",
        value: function initialize(obj) {
        }
        /**
         * Constructs a <code>EthereumTransactionCompiledResponse</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/EthereumTransactionCompiledResponse} obj Optional instance to populate.
         * @return {module:model/EthereumTransactionCompiledResponse} The populated <code>EthereumTransactionCompiledResponse</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new EthereumTransactionCompiledResponse2();
            if (data.hasOwnProperty("chain_id")) {
              obj["chain_id"] = _ApiClient["default"].convertToType(data["chain_id"], "String");
            }
            if (data.hasOwnProperty("data")) {
              obj["data"] = _ApiClient["default"].convertToType(data["data"], "String");
            }
            if (data.hasOwnProperty("from")) {
              obj["from"] = _ApiClient["default"].convertToType(data["from"], "String");
            }
            if (data.hasOwnProperty("to")) {
              obj["to"] = _ApiClient["default"].convertToType(data["to"], "String");
            }
            if (data.hasOwnProperty("gas")) {
              obj["gas"] = _ApiClient["default"].convertToType(data["gas"], "Number");
            }
            if (data.hasOwnProperty("max_fee_per_gas")) {
              obj["max_fee_per_gas"] = _ApiClient["default"].convertToType(data["max_fee_per_gas"], "Number");
            }
            if (data.hasOwnProperty("max_priority_fee_per_gas")) {
              obj["max_priority_fee_per_gas"] = _ApiClient["default"].convertToType(data["max_priority_fee_per_gas"], "Number");
            }
            if (data.hasOwnProperty("nonce")) {
              obj["nonce"] = _ApiClient["default"].convertToType(data["nonce"], "Number");
            }
            if (data.hasOwnProperty("value")) {
              obj["value"] = _ApiClient["default"].convertToType(data["value"], "Number");
            }
          }
          return obj;
        }
      }]);
      return EthereumTransactionCompiledResponse2;
    }();
    EthereumTransactionCompiledResponse.prototype["chain_id"] = void 0;
    EthereumTransactionCompiledResponse.prototype["data"] = void 0;
    EthereumTransactionCompiledResponse.prototype["from"] = void 0;
    EthereumTransactionCompiledResponse.prototype["to"] = void 0;
    EthereumTransactionCompiledResponse.prototype["gas"] = void 0;
    EthereumTransactionCompiledResponse.prototype["max_fee_per_gas"] = void 0;
    EthereumTransactionCompiledResponse.prototype["max_priority_fee_per_gas"] = void 0;
    EthereumTransactionCompiledResponse.prototype["nonce"] = void 0;
    EthereumTransactionCompiledResponse.prototype["value"] = void 0;
    var _default = EthereumTransactionCompiledResponse;
    exports["default"] = _default;
  }
});

// node_modules/theblockchainapi/dist/model/EthereumTransactionMadeResponse.js
var require_EthereumTransactionMadeResponse = __commonJS({
  "node_modules/theblockchainapi/dist/model/EthereumTransactionMadeResponse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var EthereumTransactionMadeResponse = function() {
      function EthereumTransactionMadeResponse2() {
        _classCallCheck(this, EthereumTransactionMadeResponse2);
        EthereumTransactionMadeResponse2.initialize(this);
      }
      _createClass(EthereumTransactionMadeResponse2, null, [{
        key: "initialize",
        value: function initialize(obj) {
        }
        /**
         * Constructs a <code>EthereumTransactionMadeResponse</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/EthereumTransactionMadeResponse} obj Optional instance to populate.
         * @return {module:model/EthereumTransactionMadeResponse} The populated <code>EthereumTransactionMadeResponse</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new EthereumTransactionMadeResponse2();
            if (data.hasOwnProperty("transaction_blockchain_identifier")) {
              obj["transaction_blockchain_identifier"] = _ApiClient["default"].convertToType(data["transaction_blockchain_identifier"], "String");
            }
            if (data.hasOwnProperty("transaction_confirmed")) {
              obj["transaction_confirmed"] = _ApiClient["default"].convertToType(data["transaction_confirmed"], "Boolean");
            }
          }
          return obj;
        }
      }]);
      return EthereumTransactionMadeResponse2;
    }();
    EthereumTransactionMadeResponse.prototype["transaction_blockchain_identifier"] = void 0;
    EthereumTransactionMadeResponse.prototype["transaction_confirmed"] = void 0;
    var _default = EthereumTransactionMadeResponse;
    exports["default"] = _default;
  }
});

// node_modules/theblockchainapi/dist/model/PrivateKey.js
var require_PrivateKey = __commonJS({
  "node_modules/theblockchainapi/dist/model/PrivateKey.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var PrivateKey = function() {
      function PrivateKey2(privateKey) {
        _classCallCheck(this, PrivateKey2);
        PrivateKey2.initialize(this, privateKey);
      }
      _createClass(PrivateKey2, null, [{
        key: "initialize",
        value: function initialize(obj, privateKey) {
          obj["private_key"] = privateKey;
        }
        /**
         * Constructs a <code>PrivateKey</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/PrivateKey} obj Optional instance to populate.
         * @return {module:model/PrivateKey} The populated <code>PrivateKey</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new PrivateKey2();
            if (data.hasOwnProperty("private_key")) {
              obj["private_key"] = _ApiClient["default"].convertToType(data["private_key"], Object);
            }
          }
          return obj;
        }
      }]);
      return PrivateKey2;
    }();
    PrivateKey.prototype["private_key"] = void 0;
    var _default = PrivateKey;
    exports["default"] = _default;
  }
});

// node_modules/theblockchainapi/dist/model/SecretRecoveryPhrase.js
var require_SecretRecoveryPhrase = __commonJS({
  "node_modules/theblockchainapi/dist/model/SecretRecoveryPhrase.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var SecretRecoveryPhrase = function() {
      function SecretRecoveryPhrase2(secretRecoveryPhrase) {
        _classCallCheck(this, SecretRecoveryPhrase2);
        SecretRecoveryPhrase2.initialize(this, secretRecoveryPhrase);
      }
      _createClass(SecretRecoveryPhrase2, null, [{
        key: "initialize",
        value: function initialize(obj, secretRecoveryPhrase) {
          obj["secret_recovery_phrase"] = secretRecoveryPhrase;
        }
        /**
         * Constructs a <code>SecretRecoveryPhrase</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/SecretRecoveryPhrase} obj Optional instance to populate.
         * @return {module:model/SecretRecoveryPhrase} The populated <code>SecretRecoveryPhrase</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new SecretRecoveryPhrase2();
            if (data.hasOwnProperty("secret_recovery_phrase")) {
              obj["secret_recovery_phrase"] = _ApiClient["default"].convertToType(data["secret_recovery_phrase"], "String");
            }
            if (data.hasOwnProperty("derivation_path")) {
              obj["derivation_path"] = _ApiClient["default"].convertToType(data["derivation_path"], "String");
            }
            if (data.hasOwnProperty("passphrase")) {
              obj["passphrase"] = _ApiClient["default"].convertToType(data["passphrase"], "String");
            }
          }
          return obj;
        }
      }]);
      return SecretRecoveryPhrase2;
    }();
    SecretRecoveryPhrase.prototype["secret_recovery_phrase"] = void 0;
    SecretRecoveryPhrase.prototype["derivation_path"] = "m/44/501/0/0";
    SecretRecoveryPhrase.prototype["passphrase"] = "";
    var _default = SecretRecoveryPhrase;
    exports["default"] = _default;
  }
});

// node_modules/theblockchainapi/dist/model/FeePayerWallet.js
var require_FeePayerWallet = __commonJS({
  "node_modules/theblockchainapi/dist/model/FeePayerWallet.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    var _B58PrivateKey = _interopRequireDefault(require_B58PrivateKey());
    var _PrivateKey = _interopRequireDefault(require_PrivateKey());
    var _SecretRecoveryPhrase = _interopRequireDefault(require_SecretRecoveryPhrase());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var FeePayerWallet = function() {
      function FeePayerWallet2(secretRecoveryPhrase, privateKey, b58PrivateKey) {
        _classCallCheck(this, FeePayerWallet2);
        _SecretRecoveryPhrase["default"].initialize(this, secretRecoveryPhrase);
        _PrivateKey["default"].initialize(this, privateKey);
        _B58PrivateKey["default"].initialize(this, b58PrivateKey);
        FeePayerWallet2.initialize(this, secretRecoveryPhrase, privateKey, b58PrivateKey);
      }
      _createClass(FeePayerWallet2, null, [{
        key: "initialize",
        value: function initialize(obj, secretRecoveryPhrase, privateKey, b58PrivateKey) {
          obj["secret_recovery_phrase"] = secretRecoveryPhrase;
          obj["private_key"] = privateKey;
          obj["b58_private_key"] = b58PrivateKey;
        }
        /**
         * Constructs a <code>FeePayerWallet</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/FeePayerWallet} obj Optional instance to populate.
         * @return {module:model/FeePayerWallet} The populated <code>FeePayerWallet</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new FeePayerWallet2();
            _SecretRecoveryPhrase["default"].constructFromObject(data, obj);
            _PrivateKey["default"].constructFromObject(data, obj);
            _B58PrivateKey["default"].constructFromObject(data, obj);
            if (data.hasOwnProperty("secret_recovery_phrase")) {
              obj["secret_recovery_phrase"] = _ApiClient["default"].convertToType(data["secret_recovery_phrase"], "String");
            }
            if (data.hasOwnProperty("derivation_path")) {
              obj["derivation_path"] = _ApiClient["default"].convertToType(data["derivation_path"], "String");
            }
            if (data.hasOwnProperty("passphrase")) {
              obj["passphrase"] = _ApiClient["default"].convertToType(data["passphrase"], "String");
            }
            if (data.hasOwnProperty("private_key")) {
              obj["private_key"] = _ApiClient["default"].convertToType(data["private_key"], Object);
            }
            if (data.hasOwnProperty("b58_private_key")) {
              obj["b58_private_key"] = _ApiClient["default"].convertToType(data["b58_private_key"], "String");
            }
          }
          return obj;
        }
      }]);
      return FeePayerWallet2;
    }();
    FeePayerWallet.prototype["secret_recovery_phrase"] = void 0;
    FeePayerWallet.prototype["derivation_path"] = "m/44/501/0/0";
    FeePayerWallet.prototype["passphrase"] = "";
    FeePayerWallet.prototype["private_key"] = void 0;
    FeePayerWallet.prototype["b58_private_key"] = void 0;
    _SecretRecoveryPhrase["default"].prototype["secret_recovery_phrase"] = void 0;
    _SecretRecoveryPhrase["default"].prototype["derivation_path"] = "m/44/501/0/0";
    _SecretRecoveryPhrase["default"].prototype["passphrase"] = "";
    _PrivateKey["default"].prototype["private_key"] = void 0;
    _B58PrivateKey["default"].prototype["b58_private_key"] = void 0;
    var _default = FeePayerWallet;
    exports["default"] = _default;
  }
});

// node_modules/theblockchainapi/dist/model/GeneralAirdropRequest.js
var require_GeneralAirdropRequest = __commonJS({
  "node_modules/theblockchainapi/dist/model/GeneralAirdropRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var GeneralAirdropRequest = function() {
      function GeneralAirdropRequest2(recipientBlockchainIdentifier) {
        _classCallCheck(this, GeneralAirdropRequest2);
        GeneralAirdropRequest2.initialize(this, recipientBlockchainIdentifier);
      }
      _createClass(GeneralAirdropRequest2, null, [{
        key: "initialize",
        value: function initialize(obj, recipientBlockchainIdentifier) {
          obj["recipient_blockchain_identifier"] = recipientBlockchainIdentifier;
        }
        /**
         * Constructs a <code>GeneralAirdropRequest</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/GeneralAirdropRequest} obj Optional instance to populate.
         * @return {module:model/GeneralAirdropRequest} The populated <code>GeneralAirdropRequest</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new GeneralAirdropRequest2();
            if (data.hasOwnProperty("recipient_blockchain_identifier")) {
              obj["recipient_blockchain_identifier"] = _ApiClient["default"].convertToType(data["recipient_blockchain_identifier"], "String");
            }
          }
          return obj;
        }
      }]);
      return GeneralAirdropRequest2;
    }();
    GeneralAirdropRequest.prototype["recipient_blockchain_identifier"] = void 0;
    var _default = GeneralAirdropRequest;
    exports["default"] = _default;
  }
});

// node_modules/theblockchainapi/dist/model/GeneralB58PrivateKey.js
var require_GeneralB58PrivateKey = __commonJS({
  "node_modules/theblockchainapi/dist/model/GeneralB58PrivateKey.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var GeneralB58PrivateKey = function() {
      function GeneralB58PrivateKey2(b58PrivateKey) {
        _classCallCheck(this, GeneralB58PrivateKey2);
        GeneralB58PrivateKey2.initialize(this, b58PrivateKey);
      }
      _createClass(GeneralB58PrivateKey2, null, [{
        key: "initialize",
        value: function initialize(obj, b58PrivateKey) {
          obj["b58_private_key"] = b58PrivateKey;
        }
        /**
         * Constructs a <code>GeneralB58PrivateKey</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/GeneralB58PrivateKey} obj Optional instance to populate.
         * @return {module:model/GeneralB58PrivateKey} The populated <code>GeneralB58PrivateKey</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new GeneralB58PrivateKey2();
            if (data.hasOwnProperty("b58_private_key")) {
              obj["b58_private_key"] = _ApiClient["default"].convertToType(data["b58_private_key"], "String");
            }
          }
          return obj;
        }
      }]);
      return GeneralB58PrivateKey2;
    }();
    GeneralB58PrivateKey.prototype["b58_private_key"] = void 0;
    var _default = GeneralB58PrivateKey;
    exports["default"] = _default;
  }
});

// node_modules/theblockchainapi/dist/model/GeneralBalanceRequest.js
var require_GeneralBalanceRequest = __commonJS({
  "node_modules/theblockchainapi/dist/model/GeneralBalanceRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var GeneralBalanceRequest = function() {
      function GeneralBalanceRequest2() {
        _classCallCheck(this, GeneralBalanceRequest2);
        GeneralBalanceRequest2.initialize(this);
      }
      _createClass(GeneralBalanceRequest2, null, [{
        key: "initialize",
        value: function initialize(obj) {
        }
        /**
         * Constructs a <code>GeneralBalanceRequest</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/GeneralBalanceRequest} obj Optional instance to populate.
         * @return {module:model/GeneralBalanceRequest} The populated <code>GeneralBalanceRequest</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new GeneralBalanceRequest2();
            if (data.hasOwnProperty("blockchain_identifier")) {
              obj["blockchain_identifier"] = _ApiClient["default"].convertToType(data["blockchain_identifier"], "String");
            }
            if (data.hasOwnProperty("unit")) {
              obj["unit"] = _ApiClient["default"].convertToType(data["unit"], "String");
            }
            if (data.hasOwnProperty("network")) {
              obj["network"] = _ApiClient["default"].convertToType(data["network"], "String");
            }
            if (data.hasOwnProperty("token_blockchain_identifier")) {
              obj["token_blockchain_identifier"] = _ApiClient["default"].convertToType(data["token_blockchain_identifier"], "String");
            }
          }
          return obj;
        }
      }]);
      return GeneralBalanceRequest2;
    }();
    GeneralBalanceRequest.prototype["blockchain_identifier"] = void 0;
    GeneralBalanceRequest.prototype["unit"] = void 0;
    GeneralBalanceRequest.prototype["network"] = void 0;
    GeneralBalanceRequest.prototype["token_blockchain_identifier"] = "null";
    var _default = GeneralBalanceRequest;
    exports["default"] = _default;
  }
});

// node_modules/theblockchainapi/dist/model/GeneralBalanceResponse.js
var require_GeneralBalanceResponse = __commonJS({
  "node_modules/theblockchainapi/dist/model/GeneralBalanceResponse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var GeneralBalanceResponse = function() {
      function GeneralBalanceResponse2(balance, network) {
        _classCallCheck(this, GeneralBalanceResponse2);
        GeneralBalanceResponse2.initialize(this, balance, network);
      }
      _createClass(GeneralBalanceResponse2, null, [{
        key: "initialize",
        value: function initialize(obj, balance, network) {
          obj["balance"] = balance;
          obj["network"] = network;
        }
        /**
         * Constructs a <code>GeneralBalanceResponse</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/GeneralBalanceResponse} obj Optional instance to populate.
         * @return {module:model/GeneralBalanceResponse} The populated <code>GeneralBalanceResponse</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new GeneralBalanceResponse2();
            if (data.hasOwnProperty("balance")) {
              obj["balance"] = _ApiClient["default"].convertToType(data["balance"], "Number");
            }
            if (data.hasOwnProperty("integer_balance")) {
              obj["integer_balance"] = _ApiClient["default"].convertToType(data["integer_balance"], "Number");
            }
            if (data.hasOwnProperty("decimals")) {
              obj["decimals"] = _ApiClient["default"].convertToType(data["decimals"], "Number");
            }
            if (data.hasOwnProperty("network")) {
              obj["network"] = _ApiClient["default"].convertToType(data["network"], "String");
            }
            if (data.hasOwnProperty("unit")) {
              obj["unit"] = _ApiClient["default"].convertToType(data["unit"], "String");
            }
          }
          return obj;
        }
      }]);
      return GeneralBalanceResponse2;
    }();
    GeneralBalanceResponse.prototype["balance"] = void 0;
    GeneralBalanceResponse.prototype["integer_balance"] = void 0;
    GeneralBalanceResponse.prototype["decimals"] = void 0;
    GeneralBalanceResponse.prototype["network"] = void 0;
    GeneralBalanceResponse.prototype["unit"] = void 0;
    var _default = GeneralBalanceResponse;
    exports["default"] = _default;
  }
});

// node_modules/theblockchainapi/dist/model/GeneralPrivateKey.js
var require_GeneralPrivateKey = __commonJS({
  "node_modules/theblockchainapi/dist/model/GeneralPrivateKey.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var GeneralPrivateKey = function() {
      function GeneralPrivateKey2(privateKey) {
        _classCallCheck(this, GeneralPrivateKey2);
        GeneralPrivateKey2.initialize(this, privateKey);
      }
      _createClass(GeneralPrivateKey2, null, [{
        key: "initialize",
        value: function initialize(obj, privateKey) {
          obj["private_key"] = privateKey;
        }
        /**
         * Constructs a <code>GeneralPrivateKey</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/GeneralPrivateKey} obj Optional instance to populate.
         * @return {module:model/GeneralPrivateKey} The populated <code>GeneralPrivateKey</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new GeneralPrivateKey2();
            if (data.hasOwnProperty("private_key")) {
              obj["private_key"] = _ApiClient["default"].convertToType(data["private_key"], Object);
            }
          }
          return obj;
        }
      }]);
      return GeneralPrivateKey2;
    }();
    GeneralPrivateKey.prototype["private_key"] = void 0;
    var _default = GeneralPrivateKey;
    exports["default"] = _default;
  }
});

// node_modules/theblockchainapi/dist/model/GeneralSecretRecoveryPhrase.js
var require_GeneralSecretRecoveryPhrase = __commonJS({
  "node_modules/theblockchainapi/dist/model/GeneralSecretRecoveryPhrase.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var GeneralSecretRecoveryPhrase = function() {
      function GeneralSecretRecoveryPhrase2(secretRecoveryPhrase) {
        _classCallCheck(this, GeneralSecretRecoveryPhrase2);
        GeneralSecretRecoveryPhrase2.initialize(this, secretRecoveryPhrase);
      }
      _createClass(GeneralSecretRecoveryPhrase2, null, [{
        key: "initialize",
        value: function initialize(obj, secretRecoveryPhrase) {
          obj["secret_recovery_phrase"] = secretRecoveryPhrase;
        }
        /**
         * Constructs a <code>GeneralSecretRecoveryPhrase</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/GeneralSecretRecoveryPhrase} obj Optional instance to populate.
         * @return {module:model/GeneralSecretRecoveryPhrase} The populated <code>GeneralSecretRecoveryPhrase</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new GeneralSecretRecoveryPhrase2();
            if (data.hasOwnProperty("secret_recovery_phrase")) {
              obj["secret_recovery_phrase"] = _ApiClient["default"].convertToType(data["secret_recovery_phrase"], "String");
            }
            if (data.hasOwnProperty("derivation_path")) {
              obj["derivation_path"] = _ApiClient["default"].convertToType(data["derivation_path"], "String");
            }
            if (data.hasOwnProperty("passphrase")) {
              obj["passphrase"] = _ApiClient["default"].convertToType(data["passphrase"], "String");
            }
          }
          return obj;
        }
      }]);
      return GeneralSecretRecoveryPhrase2;
    }();
    GeneralSecretRecoveryPhrase.prototype["secret_recovery_phrase"] = void 0;
    GeneralSecretRecoveryPhrase.prototype["derivation_path"] = void 0;
    GeneralSecretRecoveryPhrase.prototype["passphrase"] = "";
    var _default = GeneralSecretRecoveryPhrase;
    exports["default"] = _default;
  }
});

// node_modules/theblockchainapi/dist/model/HexPrivateKey.js
var require_HexPrivateKey = __commonJS({
  "node_modules/theblockchainapi/dist/model/HexPrivateKey.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var HexPrivateKey = function() {
      function HexPrivateKey2(hexPrivateKey) {
        _classCallCheck(this, HexPrivateKey2);
        HexPrivateKey2.initialize(this, hexPrivateKey);
      }
      _createClass(HexPrivateKey2, null, [{
        key: "initialize",
        value: function initialize(obj, hexPrivateKey) {
          obj["hex_private_key"] = hexPrivateKey;
        }
        /**
         * Constructs a <code>HexPrivateKey</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/HexPrivateKey} obj Optional instance to populate.
         * @return {module:model/HexPrivateKey} The populated <code>HexPrivateKey</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new HexPrivateKey2();
            if (data.hasOwnProperty("hex_private_key")) {
              obj["hex_private_key"] = _ApiClient["default"].convertToType(data["hex_private_key"], "String");
            }
          }
          return obj;
        }
      }]);
      return HexPrivateKey2;
    }();
    HexPrivateKey.prototype["hex_private_key"] = void 0;
    var _default = HexPrivateKey;
    exports["default"] = _default;
  }
});

// node_modules/theblockchainapi/dist/model/GeneralFeePayerWallet.js
var require_GeneralFeePayerWallet = __commonJS({
  "node_modules/theblockchainapi/dist/model/GeneralFeePayerWallet.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    var _GeneralB58PrivateKey = _interopRequireDefault(require_GeneralB58PrivateKey());
    var _GeneralPrivateKey = _interopRequireDefault(require_GeneralPrivateKey());
    var _GeneralSecretRecoveryPhrase = _interopRequireDefault(require_GeneralSecretRecoveryPhrase());
    var _HexPrivateKey = _interopRequireDefault(require_HexPrivateKey());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var GeneralFeePayerWallet = function() {
      function GeneralFeePayerWallet2(secretRecoveryPhrase, hexPrivateKey, privateKey, b58PrivateKey) {
        _classCallCheck(this, GeneralFeePayerWallet2);
        _GeneralSecretRecoveryPhrase["default"].initialize(this, secretRecoveryPhrase);
        _HexPrivateKey["default"].initialize(this, hexPrivateKey);
        _GeneralPrivateKey["default"].initialize(this, privateKey);
        _GeneralB58PrivateKey["default"].initialize(this, b58PrivateKey);
        GeneralFeePayerWallet2.initialize(this, secretRecoveryPhrase, hexPrivateKey, privateKey, b58PrivateKey);
      }
      _createClass(GeneralFeePayerWallet2, null, [{
        key: "initialize",
        value: function initialize(obj, secretRecoveryPhrase, hexPrivateKey, privateKey, b58PrivateKey) {
          obj["secret_recovery_phrase"] = secretRecoveryPhrase;
          obj["hex_private_key"] = hexPrivateKey;
          obj["private_key"] = privateKey;
          obj["b58_private_key"] = b58PrivateKey;
        }
        /**
         * Constructs a <code>GeneralFeePayerWallet</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/GeneralFeePayerWallet} obj Optional instance to populate.
         * @return {module:model/GeneralFeePayerWallet} The populated <code>GeneralFeePayerWallet</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new GeneralFeePayerWallet2();
            _GeneralSecretRecoveryPhrase["default"].constructFromObject(data, obj);
            _HexPrivateKey["default"].constructFromObject(data, obj);
            _GeneralPrivateKey["default"].constructFromObject(data, obj);
            _GeneralB58PrivateKey["default"].constructFromObject(data, obj);
            if (data.hasOwnProperty("secret_recovery_phrase")) {
              obj["secret_recovery_phrase"] = _ApiClient["default"].convertToType(data["secret_recovery_phrase"], "String");
            }
            if (data.hasOwnProperty("derivation_path")) {
              obj["derivation_path"] = _ApiClient["default"].convertToType(data["derivation_path"], "String");
            }
            if (data.hasOwnProperty("passphrase")) {
              obj["passphrase"] = _ApiClient["default"].convertToType(data["passphrase"], "String");
            }
            if (data.hasOwnProperty("hex_private_key")) {
              obj["hex_private_key"] = _ApiClient["default"].convertToType(data["hex_private_key"], "String");
            }
            if (data.hasOwnProperty("private_key")) {
              obj["private_key"] = _ApiClient["default"].convertToType(data["private_key"], Object);
            }
            if (data.hasOwnProperty("b58_private_key")) {
              obj["b58_private_key"] = _ApiClient["default"].convertToType(data["b58_private_key"], "String");
            }
          }
          return obj;
        }
      }]);
      return GeneralFeePayerWallet2;
    }();
    GeneralFeePayerWallet.prototype["secret_recovery_phrase"] = void 0;
    GeneralFeePayerWallet.prototype["derivation_path"] = void 0;
    GeneralFeePayerWallet.prototype["passphrase"] = "";
    GeneralFeePayerWallet.prototype["hex_private_key"] = void 0;
    GeneralFeePayerWallet.prototype["private_key"] = void 0;
    GeneralFeePayerWallet.prototype["b58_private_key"] = void 0;
    _GeneralSecretRecoveryPhrase["default"].prototype["secret_recovery_phrase"] = void 0;
    _GeneralSecretRecoveryPhrase["default"].prototype["derivation_path"] = void 0;
    _GeneralSecretRecoveryPhrase["default"].prototype["passphrase"] = "";
    _HexPrivateKey["default"].prototype["hex_private_key"] = void 0;
    _GeneralPrivateKey["default"].prototype["private_key"] = void 0;
    _GeneralB58PrivateKey["default"].prototype["b58_private_key"] = void 0;
    var _default = GeneralFeePayerWallet;
    exports["default"] = _default;
  }
});

// node_modules/theblockchainapi/dist/model/GeneralGeneratePrivateKeyResponse.js
var require_GeneralGeneratePrivateKeyResponse = __commonJS({
  "node_modules/theblockchainapi/dist/model/GeneralGeneratePrivateKeyResponse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    var _GeneralB58PrivateKey = _interopRequireDefault(require_GeneralB58PrivateKey());
    var _GeneralPrivateKey = _interopRequireDefault(require_GeneralPrivateKey());
    var _HexPrivateKey = _interopRequireDefault(require_HexPrivateKey());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var GeneralGeneratePrivateKeyResponse = function() {
      function GeneralGeneratePrivateKeyResponse2(hexPrivateKey, privateKey, b58PrivateKey) {
        _classCallCheck(this, GeneralGeneratePrivateKeyResponse2);
        _HexPrivateKey["default"].initialize(this, hexPrivateKey);
        _GeneralPrivateKey["default"].initialize(this, privateKey);
        _GeneralB58PrivateKey["default"].initialize(this, b58PrivateKey);
        GeneralGeneratePrivateKeyResponse2.initialize(this, hexPrivateKey, privateKey, b58PrivateKey);
      }
      _createClass(GeneralGeneratePrivateKeyResponse2, null, [{
        key: "initialize",
        value: function initialize(obj, hexPrivateKey, privateKey, b58PrivateKey) {
          obj["hex_private_key"] = hexPrivateKey;
          obj["private_key"] = privateKey;
          obj["b58_private_key"] = b58PrivateKey;
        }
        /**
         * Constructs a <code>GeneralGeneratePrivateKeyResponse</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/GeneralGeneratePrivateKeyResponse} obj Optional instance to populate.
         * @return {module:model/GeneralGeneratePrivateKeyResponse} The populated <code>GeneralGeneratePrivateKeyResponse</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new GeneralGeneratePrivateKeyResponse2();
            _HexPrivateKey["default"].constructFromObject(data, obj);
            _GeneralPrivateKey["default"].constructFromObject(data, obj);
            _GeneralB58PrivateKey["default"].constructFromObject(data, obj);
            if (data.hasOwnProperty("hex_private_key")) {
              obj["hex_private_key"] = _ApiClient["default"].convertToType(data["hex_private_key"], "String");
            }
            if (data.hasOwnProperty("private_key")) {
              obj["private_key"] = _ApiClient["default"].convertToType(data["private_key"], Object);
            }
            if (data.hasOwnProperty("b58_private_key")) {
              obj["b58_private_key"] = _ApiClient["default"].convertToType(data["b58_private_key"], "String");
            }
          }
          return obj;
        }
      }]);
      return GeneralGeneratePrivateKeyResponse2;
    }();
    GeneralGeneratePrivateKeyResponse.prototype["hex_private_key"] = void 0;
    GeneralGeneratePrivateKeyResponse.prototype["private_key"] = void 0;
    GeneralGeneratePrivateKeyResponse.prototype["b58_private_key"] = void 0;
    _HexPrivateKey["default"].prototype["hex_private_key"] = void 0;
    _GeneralPrivateKey["default"].prototype["private_key"] = void 0;
    _GeneralB58PrivateKey["default"].prototype["b58_private_key"] = void 0;
    var _default = GeneralGeneratePrivateKeyResponse;
    exports["default"] = _default;
  }
});

// node_modules/theblockchainapi/dist/model/GeneralSecretPhrase.js
var require_GeneralSecretPhrase = __commonJS({
  "node_modules/theblockchainapi/dist/model/GeneralSecretPhrase.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var GeneralSecretPhrase = function() {
      function GeneralSecretPhrase2() {
        _classCallCheck(this, GeneralSecretPhrase2);
        GeneralSecretPhrase2.initialize(this);
      }
      _createClass(GeneralSecretPhrase2, null, [{
        key: "initialize",
        value: function initialize(obj) {
        }
        /**
         * Constructs a <code>GeneralSecretPhrase</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/GeneralSecretPhrase} obj Optional instance to populate.
         * @return {module:model/GeneralSecretPhrase} The populated <code>GeneralSecretPhrase</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new GeneralSecretPhrase2();
            if (data.hasOwnProperty("secret_recovery_phrase")) {
              obj["secret_recovery_phrase"] = _ApiClient["default"].convertToType(data["secret_recovery_phrase"], "String");
            }
          }
          return obj;
        }
      }]);
      return GeneralSecretPhrase2;
    }();
    GeneralSecretPhrase.prototype["secret_recovery_phrase"] = void 0;
    var _default = GeneralSecretPhrase;
    exports["default"] = _default;
  }
});

// node_modules/theblockchainapi/dist/model/SolanaTransaction.js
var require_SolanaTransaction = __commonJS({
  "node_modules/theblockchainapi/dist/model/SolanaTransaction.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var SolanaTransaction = function() {
      function SolanaTransaction2() {
        _classCallCheck(this, SolanaTransaction2);
        SolanaTransaction2.initialize(this);
      }
      _createClass(SolanaTransaction2, null, [{
        key: "initialize",
        value: function initialize(obj) {
        }
        /**
         * Constructs a <code>SolanaTransaction</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/SolanaTransaction} obj Optional instance to populate.
         * @return {module:model/SolanaTransaction} The populated <code>SolanaTransaction</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new SolanaTransaction2();
            if (data.hasOwnProperty("block_time")) {
              obj["block_time"] = _ApiClient["default"].convertToType(data["block_time"], "Number");
            }
            if (data.hasOwnProperty("meta")) {
              obj["meta"] = _ApiClient["default"].convertToType(data["meta"], Object);
            }
            if (data.hasOwnProperty("slot")) {
              obj["slot"] = _ApiClient["default"].convertToType(data["slot"], "Number");
            }
            if (data.hasOwnProperty("transaction")) {
              obj["transaction"] = _ApiClient["default"].convertToType(data["transaction"], Object);
            }
          }
          return obj;
        }
      }]);
      return SolanaTransaction2;
    }();
    SolanaTransaction.prototype["block_time"] = void 0;
    SolanaTransaction.prototype["meta"] = void 0;
    SolanaTransaction.prototype["slot"] = void 0;
    SolanaTransaction.prototype["transaction"] = void 0;
    var _default = SolanaTransaction;
    exports["default"] = _default;
  }
});

// node_modules/theblockchainapi/dist/model/GeneralTransaction.js
var require_GeneralTransaction = __commonJS({
  "node_modules/theblockchainapi/dist/model/GeneralTransaction.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    var _EthereumTransaction = _interopRequireDefault(require_EthereumTransaction());
    var _SolanaTransaction = _interopRequireDefault(require_SolanaTransaction());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var GeneralTransaction = function() {
      function GeneralTransaction2() {
        _classCallCheck(this, GeneralTransaction2);
        _EthereumTransaction["default"].initialize(this);
        _SolanaTransaction["default"].initialize(this);
        GeneralTransaction2.initialize(this);
      }
      _createClass(GeneralTransaction2, null, [{
        key: "initialize",
        value: function initialize(obj) {
        }
        /**
         * Constructs a <code>GeneralTransaction</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/GeneralTransaction} obj Optional instance to populate.
         * @return {module:model/GeneralTransaction} The populated <code>GeneralTransaction</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new GeneralTransaction2();
            _EthereumTransaction["default"].constructFromObject(data, obj);
            _SolanaTransaction["default"].constructFromObject(data, obj);
            if (data.hasOwnProperty("access_list")) {
              obj["access_list"] = _ApiClient["default"].convertToType(data["access_list"], Object);
            }
            if (data.hasOwnProperty("block_hash")) {
              obj["block_hash"] = _ApiClient["default"].convertToType(data["block_hash"], "String");
            }
            if (data.hasOwnProperty("block_number")) {
              obj["block_number"] = _ApiClient["default"].convertToType(data["block_number"], "String");
            }
            if (data.hasOwnProperty("chain_id")) {
              obj["chain_id"] = _ApiClient["default"].convertToType(data["chain_id"], "String");
            }
            if (data.hasOwnProperty("from")) {
              obj["from"] = _ApiClient["default"].convertToType(data["from"], "String");
            }
            if (data.hasOwnProperty("gas")) {
              obj["gas"] = _ApiClient["default"].convertToType(data["gas"], "String");
            }
            if (data.hasOwnProperty("gas_price")) {
              obj["gas_price"] = _ApiClient["default"].convertToType(data["gas_price"], "String");
            }
            if (data.hasOwnProperty("hash")) {
              obj["hash"] = _ApiClient["default"].convertToType(data["hash"], "String");
            }
            if (data.hasOwnProperty("input")) {
              obj["input"] = _ApiClient["default"].convertToType(data["input"], "String");
            }
            if (data.hasOwnProperty("max_fee_per_gas")) {
              obj["max_fee_per_gas"] = _ApiClient["default"].convertToType(data["max_fee_per_gas"], "String");
            }
            if (data.hasOwnProperty("max_priority_fee_per_gas")) {
              obj["max_priority_fee_per_gas"] = _ApiClient["default"].convertToType(data["max_priority_fee_per_gas"], "String");
            }
            if (data.hasOwnProperty("nonce")) {
              obj["nonce"] = _ApiClient["default"].convertToType(data["nonce"], "String");
            }
            if (data.hasOwnProperty("r")) {
              obj["r"] = _ApiClient["default"].convertToType(data["r"], "String");
            }
            if (data.hasOwnProperty("s")) {
              obj["s"] = _ApiClient["default"].convertToType(data["s"], "String");
            }
            if (data.hasOwnProperty("to")) {
              obj["to"] = _ApiClient["default"].convertToType(data["to"], "String");
            }
            if (data.hasOwnProperty("transaction_index")) {
              obj["transaction_index"] = _ApiClient["default"].convertToType(data["transaction_index"], "String");
            }
            if (data.hasOwnProperty("type")) {
              obj["type"] = _ApiClient["default"].convertToType(data["type"], "String");
            }
            if (data.hasOwnProperty("v")) {
              obj["v"] = _ApiClient["default"].convertToType(data["v"], "String");
            }
            if (data.hasOwnProperty("value")) {
              obj["value"] = _ApiClient["default"].convertToType(data["value"], "String");
            }
            if (data.hasOwnProperty("block_time")) {
              obj["block_time"] = _ApiClient["default"].convertToType(data["block_time"], "Number");
            }
            if (data.hasOwnProperty("meta")) {
              obj["meta"] = _ApiClient["default"].convertToType(data["meta"], Object);
            }
            if (data.hasOwnProperty("slot")) {
              obj["slot"] = _ApiClient["default"].convertToType(data["slot"], "Number");
            }
            if (data.hasOwnProperty("transaction")) {
              obj["transaction"] = _ApiClient["default"].convertToType(data["transaction"], Object);
            }
          }
          return obj;
        }
      }]);
      return GeneralTransaction2;
    }();
    GeneralTransaction.prototype["access_list"] = void 0;
    GeneralTransaction.prototype["block_hash"] = void 0;
    GeneralTransaction.prototype["block_number"] = void 0;
    GeneralTransaction.prototype["chain_id"] = void 0;
    GeneralTransaction.prototype["from"] = void 0;
    GeneralTransaction.prototype["gas"] = void 0;
    GeneralTransaction.prototype["gas_price"] = void 0;
    GeneralTransaction.prototype["hash"] = void 0;
    GeneralTransaction.prototype["input"] = void 0;
    GeneralTransaction.prototype["max_fee_per_gas"] = void 0;
    GeneralTransaction.prototype["max_priority_fee_per_gas"] = void 0;
    GeneralTransaction.prototype["nonce"] = void 0;
    GeneralTransaction.prototype["r"] = void 0;
    GeneralTransaction.prototype["s"] = void 0;
    GeneralTransaction.prototype["to"] = void 0;
    GeneralTransaction.prototype["transaction_index"] = void 0;
    GeneralTransaction.prototype["type"] = void 0;
    GeneralTransaction.prototype["v"] = void 0;
    GeneralTransaction.prototype["value"] = void 0;
    GeneralTransaction.prototype["block_time"] = void 0;
    GeneralTransaction.prototype["meta"] = void 0;
    GeneralTransaction.prototype["slot"] = void 0;
    GeneralTransaction.prototype["transaction"] = void 0;
    _EthereumTransaction["default"].prototype["access_list"] = void 0;
    _EthereumTransaction["default"].prototype["block_hash"] = void 0;
    _EthereumTransaction["default"].prototype["block_number"] = void 0;
    _EthereumTransaction["default"].prototype["chain_id"] = void 0;
    _EthereumTransaction["default"].prototype["from"] = void 0;
    _EthereumTransaction["default"].prototype["gas"] = void 0;
    _EthereumTransaction["default"].prototype["gas_price"] = void 0;
    _EthereumTransaction["default"].prototype["hash"] = void 0;
    _EthereumTransaction["default"].prototype["input"] = void 0;
    _EthereumTransaction["default"].prototype["max_fee_per_gas"] = void 0;
    _EthereumTransaction["default"].prototype["max_priority_fee_per_gas"] = void 0;
    _EthereumTransaction["default"].prototype["nonce"] = void 0;
    _EthereumTransaction["default"].prototype["r"] = void 0;
    _EthereumTransaction["default"].prototype["s"] = void 0;
    _EthereumTransaction["default"].prototype["to"] = void 0;
    _EthereumTransaction["default"].prototype["transaction_index"] = void 0;
    _EthereumTransaction["default"].prototype["type"] = void 0;
    _EthereumTransaction["default"].prototype["v"] = void 0;
    _EthereumTransaction["default"].prototype["value"] = void 0;
    _SolanaTransaction["default"].prototype["block_time"] = void 0;
    _SolanaTransaction["default"].prototype["meta"] = void 0;
    _SolanaTransaction["default"].prototype["slot"] = void 0;
    _SolanaTransaction["default"].prototype["transaction"] = void 0;
    var _default = GeneralTransaction;
    exports["default"] = _default;
  }
});

// node_modules/theblockchainapi/dist/model/SolanaTransactionMadeResponse.js
var require_SolanaTransactionMadeResponse = __commonJS({
  "node_modules/theblockchainapi/dist/model/SolanaTransactionMadeResponse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var SolanaTransactionMadeResponse = function() {
      function SolanaTransactionMadeResponse2() {
        _classCallCheck(this, SolanaTransactionMadeResponse2);
        SolanaTransactionMadeResponse2.initialize(this);
      }
      _createClass(SolanaTransactionMadeResponse2, null, [{
        key: "initialize",
        value: function initialize(obj) {
        }
        /**
         * Constructs a <code>SolanaTransactionMadeResponse</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/SolanaTransactionMadeResponse} obj Optional instance to populate.
         * @return {module:model/SolanaTransactionMadeResponse} The populated <code>SolanaTransactionMadeResponse</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new SolanaTransactionMadeResponse2();
            if (data.hasOwnProperty("transaction_blockchain_identifier")) {
              obj["transaction_blockchain_identifier"] = _ApiClient["default"].convertToType(data["transaction_blockchain_identifier"], "String");
            }
            if (data.hasOwnProperty("transaction_confirmed")) {
              obj["transaction_confirmed"] = _ApiClient["default"].convertToType(data["transaction_confirmed"], "Boolean");
            }
          }
          return obj;
        }
      }]);
      return SolanaTransactionMadeResponse2;
    }();
    SolanaTransactionMadeResponse.prototype["transaction_blockchain_identifier"] = void 0;
    SolanaTransactionMadeResponse.prototype["transaction_confirmed"] = void 0;
    var _default = SolanaTransactionMadeResponse;
    exports["default"] = _default;
  }
});

// node_modules/theblockchainapi/dist/model/GeneralTransactionMadeResponse.js
var require_GeneralTransactionMadeResponse = __commonJS({
  "node_modules/theblockchainapi/dist/model/GeneralTransactionMadeResponse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    var _EthereumTransactionMadeResponse = _interopRequireDefault(require_EthereumTransactionMadeResponse());
    var _SolanaTransactionMadeResponse = _interopRequireDefault(require_SolanaTransactionMadeResponse());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var GeneralTransactionMadeResponse = function() {
      function GeneralTransactionMadeResponse2() {
        _classCallCheck(this, GeneralTransactionMadeResponse2);
        _SolanaTransactionMadeResponse["default"].initialize(this);
        _EthereumTransactionMadeResponse["default"].initialize(this);
        GeneralTransactionMadeResponse2.initialize(this);
      }
      _createClass(GeneralTransactionMadeResponse2, null, [{
        key: "initialize",
        value: function initialize(obj) {
        }
        /**
         * Constructs a <code>GeneralTransactionMadeResponse</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/GeneralTransactionMadeResponse} obj Optional instance to populate.
         * @return {module:model/GeneralTransactionMadeResponse} The populated <code>GeneralTransactionMadeResponse</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new GeneralTransactionMadeResponse2();
            _SolanaTransactionMadeResponse["default"].constructFromObject(data, obj);
            _EthereumTransactionMadeResponse["default"].constructFromObject(data, obj);
            if (data.hasOwnProperty("transaction_blockchain_identifier")) {
              obj["transaction_blockchain_identifier"] = _ApiClient["default"].convertToType(data["transaction_blockchain_identifier"], "String");
            }
            if (data.hasOwnProperty("transaction_confirmed")) {
              obj["transaction_confirmed"] = _ApiClient["default"].convertToType(data["transaction_confirmed"], "Boolean");
            }
          }
          return obj;
        }
      }]);
      return GeneralTransactionMadeResponse2;
    }();
    GeneralTransactionMadeResponse.prototype["transaction_blockchain_identifier"] = void 0;
    GeneralTransactionMadeResponse.prototype["transaction_confirmed"] = void 0;
    _SolanaTransactionMadeResponse["default"].prototype["transaction_blockchain_identifier"] = void 0;
    _SolanaTransactionMadeResponse["default"].prototype["transaction_confirmed"] = void 0;
    _EthereumTransactionMadeResponse["default"].prototype["transaction_blockchain_identifier"] = void 0;
    _EthereumTransactionMadeResponse["default"].prototype["transaction_confirmed"] = void 0;
    var _default = GeneralTransactionMadeResponse;
    exports["default"] = _default;
  }
});

// node_modules/theblockchainapi/dist/model/SolanaTransactionCompiledResponse.js
var require_SolanaTransactionCompiledResponse = __commonJS({
  "node_modules/theblockchainapi/dist/model/SolanaTransactionCompiledResponse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var SolanaTransactionCompiledResponse = function() {
      function SolanaTransactionCompiledResponse2() {
        _classCallCheck(this, SolanaTransactionCompiledResponse2);
        SolanaTransactionCompiledResponse2.initialize(this);
      }
      _createClass(SolanaTransactionCompiledResponse2, null, [{
        key: "initialize",
        value: function initialize(obj) {
        }
        /**
         * Constructs a <code>SolanaTransactionCompiledResponse</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/SolanaTransactionCompiledResponse} obj Optional instance to populate.
         * @return {module:model/SolanaTransactionCompiledResponse} The populated <code>SolanaTransactionCompiledResponse</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new SolanaTransactionCompiledResponse2();
            if (data.hasOwnProperty("b58_compiled_transaction")) {
              obj["b58_compiled_transaction"] = _ApiClient["default"].convertToType(data["b58_compiled_transaction"], "String");
            }
            if (data.hasOwnProperty("compiled_transaction")) {
              obj["compiled_transaction"] = _ApiClient["default"].convertToType(data["compiled_transaction"], Object);
            }
          }
          return obj;
        }
      }]);
      return SolanaTransactionCompiledResponse2;
    }();
    SolanaTransactionCompiledResponse.prototype["b58_compiled_transaction"] = void 0;
    SolanaTransactionCompiledResponse.prototype["compiled_transaction"] = void 0;
    var _default = SolanaTransactionCompiledResponse;
    exports["default"] = _default;
  }
});

// node_modules/theblockchainapi/dist/model/GeneralTransactionResponse.js
var require_GeneralTransactionResponse = __commonJS({
  "node_modules/theblockchainapi/dist/model/GeneralTransactionResponse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    var _EthereumTransactionCompiledResponse = _interopRequireDefault(require_EthereumTransactionCompiledResponse());
    var _EthereumTransactionMadeResponse = _interopRequireDefault(require_EthereumTransactionMadeResponse());
    var _SolanaTransactionCompiledResponse = _interopRequireDefault(require_SolanaTransactionCompiledResponse());
    var _SolanaTransactionMadeResponse = _interopRequireDefault(require_SolanaTransactionMadeResponse());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var GeneralTransactionResponse = function() {
      function GeneralTransactionResponse2() {
        _classCallCheck(this, GeneralTransactionResponse2);
        _SolanaTransactionMadeResponse["default"].initialize(this);
        _SolanaTransactionCompiledResponse["default"].initialize(this);
        _EthereumTransactionMadeResponse["default"].initialize(this);
        _EthereumTransactionCompiledResponse["default"].initialize(this);
        GeneralTransactionResponse2.initialize(this);
      }
      _createClass(GeneralTransactionResponse2, null, [{
        key: "initialize",
        value: function initialize(obj) {
        }
        /**
         * Constructs a <code>GeneralTransactionResponse</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/GeneralTransactionResponse} obj Optional instance to populate.
         * @return {module:model/GeneralTransactionResponse} The populated <code>GeneralTransactionResponse</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new GeneralTransactionResponse2();
            _SolanaTransactionMadeResponse["default"].constructFromObject(data, obj);
            _SolanaTransactionCompiledResponse["default"].constructFromObject(data, obj);
            _EthereumTransactionMadeResponse["default"].constructFromObject(data, obj);
            _EthereumTransactionCompiledResponse["default"].constructFromObject(data, obj);
            if (data.hasOwnProperty("transaction_blockchain_identifier")) {
              obj["transaction_blockchain_identifier"] = _ApiClient["default"].convertToType(data["transaction_blockchain_identifier"], "String");
            }
            if (data.hasOwnProperty("transaction_confirmed")) {
              obj["transaction_confirmed"] = _ApiClient["default"].convertToType(data["transaction_confirmed"], "Boolean");
            }
            if (data.hasOwnProperty("b58_compiled_transaction")) {
              obj["b58_compiled_transaction"] = _ApiClient["default"].convertToType(data["b58_compiled_transaction"], "String");
            }
            if (data.hasOwnProperty("compiled_transaction")) {
              obj["compiled_transaction"] = _ApiClient["default"].convertToType(data["compiled_transaction"], Object);
            }
            if (data.hasOwnProperty("chain_id")) {
              obj["chain_id"] = _ApiClient["default"].convertToType(data["chain_id"], "String");
            }
            if (data.hasOwnProperty("data")) {
              obj["data"] = _ApiClient["default"].convertToType(data["data"], "String");
            }
            if (data.hasOwnProperty("from")) {
              obj["from"] = _ApiClient["default"].convertToType(data["from"], "String");
            }
            if (data.hasOwnProperty("to")) {
              obj["to"] = _ApiClient["default"].convertToType(data["to"], "String");
            }
            if (data.hasOwnProperty("gas")) {
              obj["gas"] = _ApiClient["default"].convertToType(data["gas"], "Number");
            }
            if (data.hasOwnProperty("max_fee_per_gas")) {
              obj["max_fee_per_gas"] = _ApiClient["default"].convertToType(data["max_fee_per_gas"], "Number");
            }
            if (data.hasOwnProperty("max_priority_fee_per_gas")) {
              obj["max_priority_fee_per_gas"] = _ApiClient["default"].convertToType(data["max_priority_fee_per_gas"], "Number");
            }
            if (data.hasOwnProperty("nonce")) {
              obj["nonce"] = _ApiClient["default"].convertToType(data["nonce"], "Number");
            }
            if (data.hasOwnProperty("value")) {
              obj["value"] = _ApiClient["default"].convertToType(data["value"], "Number");
            }
          }
          return obj;
        }
      }]);
      return GeneralTransactionResponse2;
    }();
    GeneralTransactionResponse.prototype["transaction_blockchain_identifier"] = void 0;
    GeneralTransactionResponse.prototype["transaction_confirmed"] = void 0;
    GeneralTransactionResponse.prototype["b58_compiled_transaction"] = void 0;
    GeneralTransactionResponse.prototype["compiled_transaction"] = void 0;
    GeneralTransactionResponse.prototype["chain_id"] = void 0;
    GeneralTransactionResponse.prototype["data"] = void 0;
    GeneralTransactionResponse.prototype["from"] = void 0;
    GeneralTransactionResponse.prototype["to"] = void 0;
    GeneralTransactionResponse.prototype["gas"] = void 0;
    GeneralTransactionResponse.prototype["max_fee_per_gas"] = void 0;
    GeneralTransactionResponse.prototype["max_priority_fee_per_gas"] = void 0;
    GeneralTransactionResponse.prototype["nonce"] = void 0;
    GeneralTransactionResponse.prototype["value"] = void 0;
    _SolanaTransactionMadeResponse["default"].prototype["transaction_blockchain_identifier"] = void 0;
    _SolanaTransactionMadeResponse["default"].prototype["transaction_confirmed"] = void 0;
    _SolanaTransactionCompiledResponse["default"].prototype["b58_compiled_transaction"] = void 0;
    _SolanaTransactionCompiledResponse["default"].prototype["compiled_transaction"] = void 0;
    _EthereumTransactionMadeResponse["default"].prototype["transaction_blockchain_identifier"] = void 0;
    _EthereumTransactionMadeResponse["default"].prototype["transaction_confirmed"] = void 0;
    _EthereumTransactionCompiledResponse["default"].prototype["chain_id"] = void 0;
    _EthereumTransactionCompiledResponse["default"].prototype["data"] = void 0;
    _EthereumTransactionCompiledResponse["default"].prototype["from"] = void 0;
    _EthereumTransactionCompiledResponse["default"].prototype["to"] = void 0;
    _EthereumTransactionCompiledResponse["default"].prototype["gas"] = void 0;
    _EthereumTransactionCompiledResponse["default"].prototype["max_fee_per_gas"] = void 0;
    _EthereumTransactionCompiledResponse["default"].prototype["max_priority_fee_per_gas"] = void 0;
    _EthereumTransactionCompiledResponse["default"].prototype["nonce"] = void 0;
    _EthereumTransactionCompiledResponse["default"].prototype["value"] = void 0;
    var _default = GeneralTransactionResponse;
    exports["default"] = _default;
  }
});

// node_modules/theblockchainapi/dist/model/GeneralWallet.js
var require_GeneralWallet = __commonJS({
  "node_modules/theblockchainapi/dist/model/GeneralWallet.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    var _GeneralB58PrivateKey = _interopRequireDefault(require_GeneralB58PrivateKey());
    var _GeneralPrivateKey = _interopRequireDefault(require_GeneralPrivateKey());
    var _GeneralSecretRecoveryPhrase = _interopRequireDefault(require_GeneralSecretRecoveryPhrase());
    var _HexPrivateKey = _interopRequireDefault(require_HexPrivateKey());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var GeneralWallet = function() {
      function GeneralWallet2(secretRecoveryPhrase, hexPrivateKey, privateKey, b58PrivateKey) {
        _classCallCheck(this, GeneralWallet2);
        _GeneralSecretRecoveryPhrase["default"].initialize(this, secretRecoveryPhrase);
        _HexPrivateKey["default"].initialize(this, hexPrivateKey);
        _GeneralPrivateKey["default"].initialize(this, privateKey);
        _GeneralB58PrivateKey["default"].initialize(this, b58PrivateKey);
        GeneralWallet2.initialize(this, secretRecoveryPhrase, hexPrivateKey, privateKey, b58PrivateKey);
      }
      _createClass(GeneralWallet2, null, [{
        key: "initialize",
        value: function initialize(obj, secretRecoveryPhrase, hexPrivateKey, privateKey, b58PrivateKey) {
          obj["secret_recovery_phrase"] = secretRecoveryPhrase;
          obj["hex_private_key"] = hexPrivateKey;
          obj["private_key"] = privateKey;
          obj["b58_private_key"] = b58PrivateKey;
        }
        /**
         * Constructs a <code>GeneralWallet</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/GeneralWallet} obj Optional instance to populate.
         * @return {module:model/GeneralWallet} The populated <code>GeneralWallet</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new GeneralWallet2();
            _GeneralSecretRecoveryPhrase["default"].constructFromObject(data, obj);
            _HexPrivateKey["default"].constructFromObject(data, obj);
            _GeneralPrivateKey["default"].constructFromObject(data, obj);
            _GeneralB58PrivateKey["default"].constructFromObject(data, obj);
            if (data.hasOwnProperty("secret_recovery_phrase")) {
              obj["secret_recovery_phrase"] = _ApiClient["default"].convertToType(data["secret_recovery_phrase"], "String");
            }
            if (data.hasOwnProperty("derivation_path")) {
              obj["derivation_path"] = _ApiClient["default"].convertToType(data["derivation_path"], "String");
            }
            if (data.hasOwnProperty("passphrase")) {
              obj["passphrase"] = _ApiClient["default"].convertToType(data["passphrase"], "String");
            }
            if (data.hasOwnProperty("hex_private_key")) {
              obj["hex_private_key"] = _ApiClient["default"].convertToType(data["hex_private_key"], "String");
            }
            if (data.hasOwnProperty("private_key")) {
              obj["private_key"] = _ApiClient["default"].convertToType(data["private_key"], Object);
            }
            if (data.hasOwnProperty("b58_private_key")) {
              obj["b58_private_key"] = _ApiClient["default"].convertToType(data["b58_private_key"], "String");
            }
          }
          return obj;
        }
      }]);
      return GeneralWallet2;
    }();
    GeneralWallet.prototype["secret_recovery_phrase"] = void 0;
    GeneralWallet.prototype["derivation_path"] = void 0;
    GeneralWallet.prototype["passphrase"] = "";
    GeneralWallet.prototype["hex_private_key"] = void 0;
    GeneralWallet.prototype["private_key"] = void 0;
    GeneralWallet.prototype["b58_private_key"] = void 0;
    _GeneralSecretRecoveryPhrase["default"].prototype["secret_recovery_phrase"] = void 0;
    _GeneralSecretRecoveryPhrase["default"].prototype["derivation_path"] = void 0;
    _GeneralSecretRecoveryPhrase["default"].prototype["passphrase"] = "";
    _HexPrivateKey["default"].prototype["hex_private_key"] = void 0;
    _GeneralPrivateKey["default"].prototype["private_key"] = void 0;
    _GeneralB58PrivateKey["default"].prototype["b58_private_key"] = void 0;
    var _default = GeneralWallet;
    exports["default"] = _default;
  }
});

// node_modules/theblockchainapi/dist/model/GeneralTransferRequest.js
var require_GeneralTransferRequest = __commonJS({
  "node_modules/theblockchainapi/dist/model/GeneralTransferRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    var _GeneralFeePayerWallet = _interopRequireDefault(require_GeneralFeePayerWallet());
    var _GeneralWallet = _interopRequireDefault(require_GeneralWallet());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var GeneralTransferRequest = function() {
      function GeneralTransferRequest2(recipientBlockchainIdentifier) {
        _classCallCheck(this, GeneralTransferRequest2);
        GeneralTransferRequest2.initialize(this, recipientBlockchainIdentifier);
      }
      _createClass(GeneralTransferRequest2, null, [{
        key: "initialize",
        value: function initialize(obj, recipientBlockchainIdentifier) {
          obj["recipient_blockchain_identifier"] = recipientBlockchainIdentifier;
        }
        /**
         * Constructs a <code>GeneralTransferRequest</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/GeneralTransferRequest} obj Optional instance to populate.
         * @return {module:model/GeneralTransferRequest} The populated <code>GeneralTransferRequest</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new GeneralTransferRequest2();
            if (data.hasOwnProperty("recipient_blockchain_identifier")) {
              obj["recipient_blockchain_identifier"] = _ApiClient["default"].convertToType(data["recipient_blockchain_identifier"], "String");
            }
            if (data.hasOwnProperty("wallet")) {
              obj["wallet"] = _GeneralWallet["default"].constructFromObject(data["wallet"]);
            }
            if (data.hasOwnProperty("token_blockchain_identifier")) {
              obj["token_blockchain_identifier"] = _ApiClient["default"].convertToType(data["token_blockchain_identifier"], "String");
            }
            if (data.hasOwnProperty("network")) {
              obj["network"] = _ApiClient["default"].convertToType(data["network"], "String");
            }
            if (data.hasOwnProperty("amount")) {
              obj["amount"] = _ApiClient["default"].convertToType(data["amount"], "String");
            }
            if (data.hasOwnProperty("return_compiled_transaction")) {
              obj["return_compiled_transaction"] = _ApiClient["default"].convertToType(data["return_compiled_transaction"], "Boolean");
            }
            if (data.hasOwnProperty("sender_blockchain_identifier")) {
              obj["sender_blockchain_identifier"] = _ApiClient["default"].convertToType(data["sender_blockchain_identifier"], "String");
            }
            if (data.hasOwnProperty("fee_payer_wallet")) {
              obj["fee_payer_wallet"] = _GeneralFeePayerWallet["default"].constructFromObject(data["fee_payer_wallet"]);
            }
          }
          return obj;
        }
      }]);
      return GeneralTransferRequest2;
    }();
    GeneralTransferRequest.prototype["recipient_blockchain_identifier"] = void 0;
    GeneralTransferRequest.prototype["wallet"] = void 0;
    GeneralTransferRequest.prototype["token_blockchain_identifier"] = void 0;
    GeneralTransferRequest.prototype["network"] = void 0;
    GeneralTransferRequest.prototype["amount"] = "1";
    GeneralTransferRequest.prototype["return_compiled_transaction"] = false;
    GeneralTransferRequest.prototype["sender_blockchain_identifier"] = "null";
    GeneralTransferRequest.prototype["fee_payer_wallet"] = void 0;
    var _default = GeneralTransferRequest;
    exports["default"] = _default;
  }
});

// node_modules/theblockchainapi/dist/model/GeneratePrivateKey.js
var require_GeneratePrivateKey = __commonJS({
  "node_modules/theblockchainapi/dist/model/GeneratePrivateKey.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var GeneratePrivateKey = function() {
      function GeneratePrivateKey2() {
        _classCallCheck(this, GeneratePrivateKey2);
        GeneratePrivateKey2.initialize(this);
      }
      _createClass(GeneratePrivateKey2, null, [{
        key: "initialize",
        value: function initialize(obj) {
        }
        /**
         * Constructs a <code>GeneratePrivateKey</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/GeneratePrivateKey} obj Optional instance to populate.
         * @return {module:model/GeneratePrivateKey} The populated <code>GeneratePrivateKey</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new GeneratePrivateKey2();
            if (data.hasOwnProperty("private_key")) {
              obj["private_key"] = _ApiClient["default"].convertToType(data["private_key"], Object);
            }
            if (data.hasOwnProperty("b58_private_key")) {
              obj["b58_private_key"] = _ApiClient["default"].convertToType(data["b58_private_key"], "String");
            }
          }
          return obj;
        }
      }]);
      return GeneratePrivateKey2;
    }();
    GeneratePrivateKey.prototype["private_key"] = void 0;
    GeneratePrivateKey.prototype["b58_private_key"] = void 0;
    var _default = GeneratePrivateKey;
    exports["default"] = _default;
  }
});

// node_modules/theblockchainapi/dist/model/GenerateSeedPhraseRequest.js
var require_GenerateSeedPhraseRequest = __commonJS({
  "node_modules/theblockchainapi/dist/model/GenerateSeedPhraseRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var GenerateSeedPhraseRequest = function() {
      function GenerateSeedPhraseRequest2() {
        _classCallCheck(this, GenerateSeedPhraseRequest2);
        GenerateSeedPhraseRequest2.initialize(this);
      }
      _createClass(GenerateSeedPhraseRequest2, null, [{
        key: "initialize",
        value: function initialize(obj) {
        }
        /**
         * Constructs a <code>GenerateSeedPhraseRequest</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/GenerateSeedPhraseRequest} obj Optional instance to populate.
         * @return {module:model/GenerateSeedPhraseRequest} The populated <code>GenerateSeedPhraseRequest</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new GenerateSeedPhraseRequest2();
            if (data.hasOwnProperty("n_words")) {
              obj["n_words"] = _ApiClient["default"].convertToType(data["n_words"], "Number");
            }
          }
          return obj;
        }
      }]);
      return GenerateSeedPhraseRequest2;
    }();
    GenerateSeedPhraseRequest.prototype["n_words"] = void 0;
    var _default = GenerateSeedPhraseRequest;
    exports["default"] = _default;
  }
});

// node_modules/theblockchainapi/dist/model/NFTCollection.js
var require_NFTCollection = __commonJS({
  "node_modules/theblockchainapi/dist/model/NFTCollection.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var NFTCollection = function() {
      function NFTCollection2() {
        _classCallCheck(this, NFTCollection2);
        NFTCollection2.initialize(this);
      }
      _createClass(NFTCollection2, null, [{
        key: "initialize",
        value: function initialize(obj) {
        }
        /**
         * Constructs a <code>NFTCollection</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/NFTCollection} obj Optional instance to populate.
         * @return {module:model/NFTCollection} The populated <code>NFTCollection</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new NFTCollection2();
            if (data.hasOwnProperty("verified")) {
              obj["verified"] = _ApiClient["default"].convertToType(data["verified"], "Number");
            }
            if (data.hasOwnProperty("key")) {
              obj["key"] = _ApiClient["default"].convertToType(data["key"], "String");
            }
          }
          return obj;
        }
      }]);
      return NFTCollection2;
    }();
    NFTCollection.prototype["verified"] = void 0;
    NFTCollection.prototype["key"] = void 0;
    var _default = NFTCollection;
    exports["default"] = _default;
  }
});

// node_modules/theblockchainapi/dist/model/NFTData.js
var require_NFTData = __commonJS({
  "node_modules/theblockchainapi/dist/model/NFTData.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var NFTData = function() {
      function NFTData2() {
        _classCallCheck(this, NFTData2);
        NFTData2.initialize(this);
      }
      _createClass(NFTData2, null, [{
        key: "initialize",
        value: function initialize(obj) {
        }
        /**
         * Constructs a <code>NFTData</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/NFTData} obj Optional instance to populate.
         * @return {module:model/NFTData} The populated <code>NFTData</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          try {
            data = JSON.parse(data);
          } catch (_unused) {
          }
          if (data) {
            obj = obj || new NFTData2();
            if (data.hasOwnProperty("creators")) {
              obj["creators"] = _ApiClient["default"].convertToType(data["creators"], ["String"]);
            }
            if (data.hasOwnProperty("name")) {
              obj["name"] = _ApiClient["default"].convertToType(data["name"], "String");
            }
            if (data.hasOwnProperty("share")) {
              obj["share"] = _ApiClient["default"].convertToType(data["share"], ["Number"]);
            }
            if (data.hasOwnProperty("symbol")) {
              obj["symbol"] = _ApiClient["default"].convertToType(data["symbol"], "String");
            }
            if (data.hasOwnProperty("uri")) {
              obj["uri"] = _ApiClient["default"].convertToType(data["uri"], "String");
            }
            if (data.hasOwnProperty("verified")) {
              obj["verified"] = _ApiClient["default"].convertToType(data["verified"], ["Number"]);
            }
          }
          return obj;
        }
      }]);
      return NFTData2;
    }();
    NFTData.prototype["creators"] = void 0;
    NFTData.prototype["name"] = void 0;
    NFTData.prototype["share"] = void 0;
    NFTData.prototype["symbol"] = void 0;
    NFTData.prototype["uri"] = void 0;
    NFTData.prototype["verified"] = void 0;
    var _default = NFTData;
    exports["default"] = _default;
  }
});

// node_modules/theblockchainapi/dist/model/NFT.js
var require_NFT = __commonJS({
  "node_modules/theblockchainapi/dist/model/NFT.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    var _NFTCollection = _interopRequireDefault(require_NFTCollection());
    var _NFTData = _interopRequireDefault(require_NFTData());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var NFT = function() {
      function NFT2() {
        _classCallCheck(this, NFT2);
        NFT2.initialize(this);
      }
      _createClass(NFT2, null, [{
        key: "initialize",
        value: function initialize(obj) {
        }
        /**
         * Constructs a <code>NFT</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/NFT} obj Optional instance to populate.
         * @return {module:model/NFT} The populated <code>NFT</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          try {
            data = JSON.parse(data);
          } catch (_unused) {
          }
          if (data) {
            obj = obj || new NFT2();
            if (data.hasOwnProperty("confirmed")) {
              obj["confirmed"] = _ApiClient["default"].convertToType(data["confirmed"], "Boolean");
            }
            if (data.hasOwnProperty("data")) {
              obj["data"] = _NFTData["default"].constructFromObject(data["data"]);
            }
            if (data.hasOwnProperty("is_mutable")) {
              obj["is_mutable"] = _ApiClient["default"].convertToType(data["is_mutable"], "Boolean");
            }
            if (data.hasOwnProperty("mint")) {
              obj["mint"] = _ApiClient["default"].convertToType(data["mint"], "String");
            }
            if (data.hasOwnProperty("primary_sale_happened")) {
              obj["primary_sale_happened"] = _ApiClient["default"].convertToType(data["primary_sale_happened"], "Boolean");
            }
            if (data.hasOwnProperty("update_authority")) {
              obj["update_authority"] = _ApiClient["default"].convertToType(data["update_authority"], "String");
            }
            if (data.hasOwnProperty("seller_fee_basis_points")) {
              obj["seller_fee_basis_points"] = _ApiClient["default"].convertToType(data["seller_fee_basis_points"], "Number");
            }
            if (data.hasOwnProperty("mint_secret_recovery_phrase")) {
              obj["mint_secret_recovery_phrase"] = _ApiClient["default"].convertToType(data["mint_secret_recovery_phrase"], "String");
            }
            if (data.hasOwnProperty("explorer_url")) {
              obj["explorer_url"] = _ApiClient["default"].convertToType(data["explorer_url"], "String");
            }
            if (data.hasOwnProperty("metadata_account")) {
              obj["metadata_account"] = _ApiClient["default"].convertToType(data["metadata_account"], "String");
            }
            if (data.hasOwnProperty("edition_nonce")) {
              obj["edition_nonce"] = _ApiClient["default"].convertToType(data["edition_nonce"], "Number");
            }
            if (data.hasOwnProperty("token_standard")) {
              obj["token_standard"] = _ApiClient["default"].convertToType(data["token_standard"], "Number");
            }
            if (data.hasOwnProperty("collection")) {
              obj["collection"] = _NFTCollection["default"].constructFromObject(data["collection"]);
            }
            if (data.hasOwnProperty("uses")) {
              obj["uses"] = _ApiClient["default"].convertToType(data["uses"], "Number");
            }
          }
          return obj;
        }
      }]);
      return NFT2;
    }();
    NFT.prototype["confirmed"] = void 0;
    NFT.prototype["data"] = void 0;
    NFT.prototype["is_mutable"] = void 0;
    NFT.prototype["mint"] = void 0;
    NFT.prototype["primary_sale_happened"] = void 0;
    NFT.prototype["update_authority"] = void 0;
    NFT.prototype["seller_fee_basis_points"] = void 0;
    NFT.prototype["mint_secret_recovery_phrase"] = void 0;
    NFT.prototype["explorer_url"] = void 0;
    NFT.prototype["metadata_account"] = void 0;
    NFT.prototype["edition_nonce"] = void 0;
    NFT.prototype["token_standard"] = void 0;
    NFT.prototype["collection"] = void 0;
    NFT.prototype["uses"] = void 0;
    var _default = NFT;
    exports["default"] = _default;
  }
});

// node_modules/theblockchainapi/dist/model/GetAllNFTsResponseMintedNfts.js
var require_GetAllNFTsResponseMintedNfts = __commonJS({
  "node_modules/theblockchainapi/dist/model/GetAllNFTsResponseMintedNfts.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    var _NFT = _interopRequireDefault(require_NFT());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var GetAllNFTsResponseMintedNfts = function() {
      function GetAllNFTsResponseMintedNfts2() {
        _classCallCheck(this, GetAllNFTsResponseMintedNfts2);
        GetAllNFTsResponseMintedNfts2.initialize(this);
      }
      _createClass(GetAllNFTsResponseMintedNfts2, null, [{
        key: "initialize",
        value: function initialize(obj) {
        }
        /**
         * Constructs a <code>GetAllNFTsResponseMintedNfts</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/GetAllNFTsResponseMintedNfts} obj Optional instance to populate.
         * @return {module:model/GetAllNFTsResponseMintedNfts} The populated <code>GetAllNFTsResponseMintedNfts</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new GetAllNFTsResponseMintedNfts2();
            if (data.hasOwnProperty("nft_metadata")) {
              obj["nft_metadata"] = _NFT["default"].constructFromObject(data["nft_metadata"]);
            }
            if (data.hasOwnProperty("pub_key_hash")) {
              obj["pub_key_hash"] = _ApiClient["default"].convertToType(data["pub_key_hash"], "String");
            }
          }
          return obj;
        }
      }]);
      return GetAllNFTsResponseMintedNfts2;
    }();
    GetAllNFTsResponseMintedNfts.prototype["nft_metadata"] = void 0;
    GetAllNFTsResponseMintedNfts.prototype["pub_key_hash"] = void 0;
    var _default = GetAllNFTsResponseMintedNfts;
    exports["default"] = _default;
  }
});

// node_modules/theblockchainapi/dist/model/GetAllNFTsResponseUnmintedNfts.js
var require_GetAllNFTsResponseUnmintedNfts = __commonJS({
  "node_modules/theblockchainapi/dist/model/GetAllNFTsResponseUnmintedNfts.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var GetAllNFTsResponseUnmintedNfts = function() {
      function GetAllNFTsResponseUnmintedNfts2() {
        _classCallCheck(this, GetAllNFTsResponseUnmintedNfts2);
        GetAllNFTsResponseUnmintedNfts2.initialize(this);
      }
      _createClass(GetAllNFTsResponseUnmintedNfts2, null, [{
        key: "initialize",
        value: function initialize(obj) {
        }
        /**
         * Constructs a <code>GetAllNFTsResponseUnmintedNfts</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/GetAllNFTsResponseUnmintedNfts} obj Optional instance to populate.
         * @return {module:model/GetAllNFTsResponseUnmintedNfts} The populated <code>GetAllNFTsResponseUnmintedNfts</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new GetAllNFTsResponseUnmintedNfts2();
            if (data.hasOwnProperty("name")) {
              obj["name"] = _ApiClient["default"].convertToType(data["name"], "String");
            }
            if (data.hasOwnProperty("uri")) {
              obj["uri"] = _ApiClient["default"].convertToType(data["uri"], "String");
            }
          }
          return obj;
        }
      }]);
      return GetAllNFTsResponseUnmintedNfts2;
    }();
    GetAllNFTsResponseUnmintedNfts.prototype["name"] = void 0;
    GetAllNFTsResponseUnmintedNfts.prototype["uri"] = void 0;
    var _default = GetAllNFTsResponseUnmintedNfts;
    exports["default"] = _default;
  }
});

// node_modules/theblockchainapi/dist/model/GetAllNFTsResponse.js
var require_GetAllNFTsResponse = __commonJS({
  "node_modules/theblockchainapi/dist/model/GetAllNFTsResponse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    var _GetAllNFTsResponseMintedNfts = _interopRequireDefault(require_GetAllNFTsResponseMintedNfts());
    var _GetAllNFTsResponseUnmintedNfts = _interopRequireDefault(require_GetAllNFTsResponseUnmintedNfts());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var GetAllNFTsResponse = function() {
      function GetAllNFTsResponse2() {
        _classCallCheck(this, GetAllNFTsResponse2);
        GetAllNFTsResponse2.initialize(this);
      }
      _createClass(GetAllNFTsResponse2, null, [{
        key: "initialize",
        value: function initialize(obj) {
        }
        /**
         * Constructs a <code>GetAllNFTsResponse</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/GetAllNFTsResponse} obj Optional instance to populate.
         * @return {module:model/GetAllNFTsResponse} The populated <code>GetAllNFTsResponse</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new GetAllNFTsResponse2();
            if (data.hasOwnProperty("minted_nfts")) {
              obj["minted_nfts"] = _ApiClient["default"].convertToType(data["minted_nfts"], [_GetAllNFTsResponseMintedNfts["default"]]);
            }
            if (data.hasOwnProperty("unminted_nfts")) {
              obj["unminted_nfts"] = _ApiClient["default"].convertToType(data["unminted_nfts"], [_GetAllNFTsResponseUnmintedNfts["default"]]);
            }
            if (data.hasOwnProperty("all_nfts")) {
              obj["all_nfts"] = _ApiClient["default"].convertToType(data["all_nfts"], [_GetAllNFTsResponseUnmintedNfts["default"]]);
            }
            if (data.hasOwnProperty("accurate")) {
              obj["accurate"] = _ApiClient["default"].convertToType(data["accurate"], "Boolean");
            }
          }
          return obj;
        }
      }]);
      return GetAllNFTsResponse2;
    }();
    GetAllNFTsResponse.prototype["minted_nfts"] = void 0;
    GetAllNFTsResponse.prototype["unminted_nfts"] = void 0;
    GetAllNFTsResponse.prototype["all_nfts"] = void 0;
    GetAllNFTsResponse.prototype["accurate"] = void 0;
    var _default = GetAllNFTsResponse;
    exports["default"] = _default;
  }
});

// node_modules/theblockchainapi/dist/model/GetCandyMachineIDRequest.js
var require_GetCandyMachineIDRequest = __commonJS({
  "node_modules/theblockchainapi/dist/model/GetCandyMachineIDRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var GetCandyMachineIDRequest = function() {
      function GetCandyMachineIDRequest2(mintAddress) {
        _classCallCheck(this, GetCandyMachineIDRequest2);
        GetCandyMachineIDRequest2.initialize(this, mintAddress);
      }
      _createClass(GetCandyMachineIDRequest2, null, [{
        key: "initialize",
        value: function initialize(obj, mintAddress) {
          obj["mint_address"] = mintAddress;
        }
        /**
         * Constructs a <code>GetCandyMachineIDRequest</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/GetCandyMachineIDRequest} obj Optional instance to populate.
         * @return {module:model/GetCandyMachineIDRequest} The populated <code>GetCandyMachineIDRequest</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new GetCandyMachineIDRequest2();
            if (data.hasOwnProperty("mint_address")) {
              obj["mint_address"] = _ApiClient["default"].convertToType(data["mint_address"], "String");
            }
            if (data.hasOwnProperty("network")) {
              obj["network"] = _ApiClient["default"].convertToType(data["network"], "String");
            }
          }
          return obj;
        }
      }]);
      return GetCandyMachineIDRequest2;
    }();
    GetCandyMachineIDRequest.prototype["mint_address"] = void 0;
    GetCandyMachineIDRequest.prototype["network"] = "devnet";
    GetCandyMachineIDRequest["NetworkEnum"] = {
      /**
       * value: "devnet"
       * @const
       */
      "devnet": "devnet",
      /**
       * value: "mainnet-beta"
       * @const
       */
      "mainnet-beta": "mainnet-beta"
    };
    var _default = GetCandyMachineIDRequest;
    exports["default"] = _default;
  }
});

// node_modules/theblockchainapi/dist/model/GetCandyMachineIDResponse.js
var require_GetCandyMachineIDResponse = __commonJS({
  "node_modules/theblockchainapi/dist/model/GetCandyMachineIDResponse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var GetCandyMachineIDResponse = function() {
      function GetCandyMachineIDResponse2() {
        _classCallCheck(this, GetCandyMachineIDResponse2);
        GetCandyMachineIDResponse2.initialize(this);
      }
      _createClass(GetCandyMachineIDResponse2, null, [{
        key: "initialize",
        value: function initialize(obj) {
        }
        /**
         * Constructs a <code>GetCandyMachineIDResponse</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/GetCandyMachineIDResponse} obj Optional instance to populate.
         * @return {module:model/GetCandyMachineIDResponse} The populated <code>GetCandyMachineIDResponse</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new GetCandyMachineIDResponse2();
            if (data.hasOwnProperty("candy_machine_id")) {
              obj["candy_machine_id"] = _ApiClient["default"].convertToType(data["candy_machine_id"], "String");
            }
            if (data.hasOwnProperty("candy_machine_contract_version")) {
              obj["candy_machine_contract_version"] = _ApiClient["default"].convertToType(data["candy_machine_contract_version"], "String");
            }
          }
          return obj;
        }
      }]);
      return GetCandyMachineIDResponse2;
    }();
    GetCandyMachineIDResponse.prototype["candy_machine_id"] = void 0;
    GetCandyMachineIDResponse.prototype["candy_machine_contract_version"] = void 0;
    GetCandyMachineIDResponse["CandyMachineContractVersionEnum"] = {
      /**
       * value: "v1"
       * @const
       */
      "v1": "v1",
      /**
       * value: "v2"
       * @const
       */
      "v2": "v2",
      /**
       * value: "magic-eden-v1"
       * @const
       */
      "magic-eden-v1": "magic-eden-v1"
    };
    var _default = GetCandyMachineIDResponse;
    exports["default"] = _default;
  }
});

// node_modules/theblockchainapi/dist/model/GetCandyMetadataErrorResponse.js
var require_GetCandyMetadataErrorResponse = __commonJS({
  "node_modules/theblockchainapi/dist/model/GetCandyMetadataErrorResponse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var GetCandyMetadataErrorResponse = function() {
      function GetCandyMetadataErrorResponse2() {
        _classCallCheck(this, GetCandyMetadataErrorResponse2);
        GetCandyMetadataErrorResponse2.initialize(this);
      }
      _createClass(GetCandyMetadataErrorResponse2, null, [{
        key: "initialize",
        value: function initialize(obj) {
        }
        /**
         * Constructs a <code>GetCandyMetadataErrorResponse</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/GetCandyMetadataErrorResponse} obj Optional instance to populate.
         * @return {module:model/GetCandyMetadataErrorResponse} The populated <code>GetCandyMetadataErrorResponse</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new GetCandyMetadataErrorResponse2();
            if (data.hasOwnProperty("error")) {
              obj["error"] = _ApiClient["default"].convertToType(data["error"], "String");
            }
          }
          return obj;
        }
      }]);
      return GetCandyMetadataErrorResponse2;
    }();
    GetCandyMetadataErrorResponse.prototype["error"] = void 0;
    var _default = GetCandyMetadataErrorResponse;
    exports["default"] = _default;
  }
});

// node_modules/theblockchainapi/dist/model/GetCandyMetadataRequest.js
var require_GetCandyMetadataRequest = __commonJS({
  "node_modules/theblockchainapi/dist/model/GetCandyMetadataRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var GetCandyMetadataRequest = function() {
      function GetCandyMetadataRequest2() {
        _classCallCheck(this, GetCandyMetadataRequest2);
        GetCandyMetadataRequest2.initialize(this);
      }
      _createClass(GetCandyMetadataRequest2, null, [{
        key: "initialize",
        value: function initialize(obj) {
        }
        /**
         * Constructs a <code>GetCandyMetadataRequest</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/GetCandyMetadataRequest} obj Optional instance to populate.
         * @return {module:model/GetCandyMetadataRequest} The populated <code>GetCandyMetadataRequest</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new GetCandyMetadataRequest2();
            if (data.hasOwnProperty("candy_machine_id")) {
              obj["candy_machine_id"] = _ApiClient["default"].convertToType(data["candy_machine_id"], "String");
            }
            if (data.hasOwnProperty("config_address")) {
              obj["config_address"] = _ApiClient["default"].convertToType(data["config_address"], "String");
            }
            if (data.hasOwnProperty("uuid")) {
              obj["uuid"] = _ApiClient["default"].convertToType(data["uuid"], "String");
            }
            if (data.hasOwnProperty("network")) {
              obj["network"] = _ApiClient["default"].convertToType(data["network"], "String");
            }
            if (data.hasOwnProperty("candy_machine_contract_version")) {
              obj["candy_machine_contract_version"] = _ApiClient["default"].convertToType(data["candy_machine_contract_version"], "String");
            }
          }
          return obj;
        }
      }]);
      return GetCandyMetadataRequest2;
    }();
    GetCandyMetadataRequest.prototype["candy_machine_id"] = void 0;
    GetCandyMetadataRequest.prototype["config_address"] = void 0;
    GetCandyMetadataRequest.prototype["uuid"] = void 0;
    GetCandyMetadataRequest.prototype["network"] = "devnet";
    GetCandyMetadataRequest.prototype["candy_machine_contract_version"] = "v1";
    GetCandyMetadataRequest["NetworkEnum"] = {
      /**
       * value: "devnet"
       * @const
       */
      "devnet": "devnet",
      /**
       * value: "mainnet-beta"
       * @const
       */
      "mainnet-beta": "mainnet-beta"
    };
    GetCandyMetadataRequest["CandyMachineContractVersionEnum"] = {
      /**
       * value: "v1"
       * @const
       */
      "v1": "v1",
      /**
       * value: "v2"
       * @const
       */
      "v2": "v2"
    };
    var _default = GetCandyMetadataRequest;
    exports["default"] = _default;
  }
});

// node_modules/theblockchainapi/dist/model/GetCandyMetadataResponseCreators.js
var require_GetCandyMetadataResponseCreators = __commonJS({
  "node_modules/theblockchainapi/dist/model/GetCandyMetadataResponseCreators.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var GetCandyMetadataResponseCreators = function() {
      function GetCandyMetadataResponseCreators2() {
        _classCallCheck(this, GetCandyMetadataResponseCreators2);
        GetCandyMetadataResponseCreators2.initialize(this);
      }
      _createClass(GetCandyMetadataResponseCreators2, null, [{
        key: "initialize",
        value: function initialize(obj) {
        }
        /**
         * Constructs a <code>GetCandyMetadataResponseCreators</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/GetCandyMetadataResponseCreators} obj Optional instance to populate.
         * @return {module:model/GetCandyMetadataResponseCreators} The populated <code>GetCandyMetadataResponseCreators</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new GetCandyMetadataResponseCreators2();
            if (data.hasOwnProperty("address")) {
              obj["address"] = _ApiClient["default"].convertToType(data["address"], "String");
            }
            if (data.hasOwnProperty("share")) {
              obj["share"] = _ApiClient["default"].convertToType(data["share"], "Number");
            }
          }
          return obj;
        }
      }]);
      return GetCandyMetadataResponseCreators2;
    }();
    GetCandyMetadataResponseCreators.prototype["address"] = void 0;
    GetCandyMetadataResponseCreators.prototype["share"] = void 0;
    var _default = GetCandyMetadataResponseCreators;
    exports["default"] = _default;
  }
});

// node_modules/theblockchainapi/dist/model/GetCandyMetadataResponse.js
var require_GetCandyMetadataResponse = __commonJS({
  "node_modules/theblockchainapi/dist/model/GetCandyMetadataResponse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    var _GetCandyMetadataResponseCreators = _interopRequireDefault(require_GetCandyMetadataResponseCreators());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var GetCandyMetadataResponse = function() {
      function GetCandyMetadataResponse2() {
        _classCallCheck(this, GetCandyMetadataResponse2);
        GetCandyMetadataResponse2.initialize(this);
      }
      _createClass(GetCandyMetadataResponse2, null, [{
        key: "initialize",
        value: function initialize(obj) {
        }
        /**
         * Constructs a <code>GetCandyMetadataResponse</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/GetCandyMetadataResponse} obj Optional instance to populate.
         * @return {module:model/GetCandyMetadataResponse} The populated <code>GetCandyMetadataResponse</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new GetCandyMetadataResponse2();
            if (data.hasOwnProperty("authority")) {
              obj["authority"] = _ApiClient["default"].convertToType(data["authority"], "String");
            }
            if (data.hasOwnProperty("bump")) {
              obj["bump"] = _ApiClient["default"].convertToType(data["bump"], "Number");
            }
            if (data.hasOwnProperty("candy_machine_id")) {
              obj["candy_machine_id"] = _ApiClient["default"].convertToType(data["candy_machine_id"], "String");
            }
            if (data.hasOwnProperty("config_address")) {
              obj["config_address"] = _ApiClient["default"].convertToType(data["config_address"], "String");
            }
            if (data.hasOwnProperty("creators")) {
              obj["creators"] = _ApiClient["default"].convertToType(data["creators"], [_GetCandyMetadataResponseCreators["default"]]);
            }
            if (data.hasOwnProperty("go_live_date")) {
              obj["go_live_date"] = _ApiClient["default"].convertToType(data["go_live_date"], "Number");
            }
            if (data.hasOwnProperty("is_mutable")) {
              obj["is_mutable"] = _ApiClient["default"].convertToType(data["is_mutable"], "Boolean");
            }
            if (data.hasOwnProperty("items_available")) {
              obj["items_available"] = _ApiClient["default"].convertToType(data["items_available"], "Number");
            }
            if (data.hasOwnProperty("items_redeemed")) {
              obj["items_redeemed"] = _ApiClient["default"].convertToType(data["items_redeemed"], "Number");
            }
            if (data.hasOwnProperty("max_number_of_lines")) {
              obj["max_number_of_lines"] = _ApiClient["default"].convertToType(data["max_number_of_lines"], "Number");
            }
            if (data.hasOwnProperty("max_supply")) {
              obj["max_supply"] = _ApiClient["default"].convertToType(data["max_supply"], "Number");
            }
            if (data.hasOwnProperty("price")) {
              obj["price"] = _ApiClient["default"].convertToType(data["price"], "Number");
            }
            if (data.hasOwnProperty("retain_authority")) {
              obj["retain_authority"] = _ApiClient["default"].convertToType(data["retain_authority"], "Boolean");
            }
            if (data.hasOwnProperty("seller_fee_basis_points")) {
              obj["seller_fee_basis_points"] = _ApiClient["default"].convertToType(data["seller_fee_basis_points"], "Number");
            }
            if (data.hasOwnProperty("symbol")) {
              obj["symbol"] = _ApiClient["default"].convertToType(data["symbol"], "String");
            }
            if (data.hasOwnProperty("token_mint")) {
              obj["token_mint"] = _ApiClient["default"].convertToType(data["token_mint"], "String");
            }
            if (data.hasOwnProperty("uuid")) {
              obj["uuid"] = _ApiClient["default"].convertToType(data["uuid"], "String");
            }
            if (data.hasOwnProperty("wallet")) {
              obj["wallet"] = _ApiClient["default"].convertToType(data["wallet"], "String");
            }
          }
          return obj;
        }
      }]);
      return GetCandyMetadataResponse2;
    }();
    GetCandyMetadataResponse.prototype["authority"] = void 0;
    GetCandyMetadataResponse.prototype["bump"] = void 0;
    GetCandyMetadataResponse.prototype["candy_machine_id"] = void 0;
    GetCandyMetadataResponse.prototype["config_address"] = void 0;
    GetCandyMetadataResponse.prototype["creators"] = void 0;
    GetCandyMetadataResponse.prototype["go_live_date"] = void 0;
    GetCandyMetadataResponse.prototype["is_mutable"] = void 0;
    GetCandyMetadataResponse.prototype["items_available"] = void 0;
    GetCandyMetadataResponse.prototype["items_redeemed"] = void 0;
    GetCandyMetadataResponse.prototype["max_number_of_lines"] = void 0;
    GetCandyMetadataResponse.prototype["max_supply"] = void 0;
    GetCandyMetadataResponse.prototype["price"] = void 0;
    GetCandyMetadataResponse.prototype["retain_authority"] = void 0;
    GetCandyMetadataResponse.prototype["seller_fee_basis_points"] = void 0;
    GetCandyMetadataResponse.prototype["symbol"] = void 0;
    GetCandyMetadataResponse.prototype["token_mint"] = void 0;
    GetCandyMetadataResponse.prototype["uuid"] = void 0;
    GetCandyMetadataResponse.prototype["wallet"] = void 0;
    var _default = GetCandyMetadataResponse;
    exports["default"] = _default;
  }
});

// node_modules/theblockchainapi/dist/model/Wallet.js
var require_Wallet = __commonJS({
  "node_modules/theblockchainapi/dist/model/Wallet.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    var _B58PrivateKey = _interopRequireDefault(require_B58PrivateKey());
    var _PrivateKey = _interopRequireDefault(require_PrivateKey());
    var _SecretRecoveryPhrase = _interopRequireDefault(require_SecretRecoveryPhrase());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var Wallet = function() {
      function Wallet2(secretRecoveryPhrase, privateKey, b58PrivateKey) {
        _classCallCheck(this, Wallet2);
        _SecretRecoveryPhrase["default"].initialize(this, secretRecoveryPhrase);
        _PrivateKey["default"].initialize(this, privateKey);
        _B58PrivateKey["default"].initialize(this, b58PrivateKey);
        Wallet2.initialize(this, secretRecoveryPhrase, privateKey, b58PrivateKey);
      }
      _createClass(Wallet2, null, [{
        key: "initialize",
        value: function initialize(obj, secretRecoveryPhrase, privateKey, b58PrivateKey) {
          obj["secret_recovery_phrase"] = secretRecoveryPhrase;
          obj["private_key"] = privateKey;
          obj["b58_private_key"] = b58PrivateKey;
        }
        /**
         * Constructs a <code>Wallet</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/Wallet} obj Optional instance to populate.
         * @return {module:model/Wallet} The populated <code>Wallet</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new Wallet2();
            _SecretRecoveryPhrase["default"].constructFromObject(data, obj);
            _PrivateKey["default"].constructFromObject(data, obj);
            _B58PrivateKey["default"].constructFromObject(data, obj);
            if (data.hasOwnProperty("secret_recovery_phrase")) {
              obj["secret_recovery_phrase"] = _ApiClient["default"].convertToType(data["secret_recovery_phrase"], "String");
            }
            if (data.hasOwnProperty("derivation_path")) {
              obj["derivation_path"] = _ApiClient["default"].convertToType(data["derivation_path"], "String");
            }
            if (data.hasOwnProperty("passphrase")) {
              obj["passphrase"] = _ApiClient["default"].convertToType(data["passphrase"], "String");
            }
            if (data.hasOwnProperty("private_key")) {
              obj["private_key"] = _ApiClient["default"].convertToType(data["private_key"], Object);
            }
            if (data.hasOwnProperty("b58_private_key")) {
              obj["b58_private_key"] = _ApiClient["default"].convertToType(data["b58_private_key"], "String");
            }
          }
          return obj;
        }
      }]);
      return Wallet2;
    }();
    Wallet.prototype["secret_recovery_phrase"] = void 0;
    Wallet.prototype["derivation_path"] = "m/44/501/0/0";
    Wallet.prototype["passphrase"] = "";
    Wallet.prototype["private_key"] = void 0;
    Wallet.prototype["b58_private_key"] = void 0;
    _SecretRecoveryPhrase["default"].prototype["secret_recovery_phrase"] = void 0;
    _SecretRecoveryPhrase["default"].prototype["derivation_path"] = "m/44/501/0/0";
    _SecretRecoveryPhrase["default"].prototype["passphrase"] = "";
    _PrivateKey["default"].prototype["private_key"] = void 0;
    _B58PrivateKey["default"].prototype["b58_private_key"] = void 0;
    var _default = Wallet;
    exports["default"] = _default;
  }
});

// node_modules/theblockchainapi/dist/model/GetPublicKeyRequest.js
var require_GetPublicKeyRequest = __commonJS({
  "node_modules/theblockchainapi/dist/model/GetPublicKeyRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    var _Wallet = _interopRequireDefault(require_Wallet());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var GetPublicKeyRequest = function() {
      function GetPublicKeyRequest2(wallet) {
        _classCallCheck(this, GetPublicKeyRequest2);
        GetPublicKeyRequest2.initialize(this, wallet);
      }
      _createClass(GetPublicKeyRequest2, null, [{
        key: "initialize",
        value: function initialize(obj, wallet) {
          obj["wallet"] = wallet;
        }
        /**
         * Constructs a <code>GetPublicKeyRequest</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/GetPublicKeyRequest} obj Optional instance to populate.
         * @return {module:model/GetPublicKeyRequest} The populated <code>GetPublicKeyRequest</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new GetPublicKeyRequest2();
            if (data.hasOwnProperty("wallet")) {
              obj["wallet"] = _Wallet["default"].constructFromObject(data["wallet"]);
            }
          }
          return obj;
        }
      }]);
      return GetPublicKeyRequest2;
    }();
    GetPublicKeyRequest.prototype["wallet"] = void 0;
    var _default = GetPublicKeyRequest;
    exports["default"] = _default;
  }
});

// node_modules/theblockchainapi/dist/model/GetSPLTokenResponse.js
var require_GetSPLTokenResponse = __commonJS({
  "node_modules/theblockchainapi/dist/model/GetSPLTokenResponse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var GetSPLTokenResponse = function() {
      function GetSPLTokenResponse2() {
        _classCallCheck(this, GetSPLTokenResponse2);
        GetSPLTokenResponse2.initialize(this);
      }
      _createClass(GetSPLTokenResponse2, null, [{
        key: "initialize",
        value: function initialize(obj) {
        }
        /**
         * Constructs a <code>GetSPLTokenResponse</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/GetSPLTokenResponse} obj Optional instance to populate.
         * @return {module:model/GetSPLTokenResponse} The populated <code>GetSPLTokenResponse</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new GetSPLTokenResponse2();
            if (data.hasOwnProperty("decimals")) {
              obj["decimals"] = _ApiClient["default"].convertToType(data["decimals"], "Number");
            }
            if (data.hasOwnProperty("freeze_authority")) {
              obj["freeze_authority"] = _ApiClient["default"].convertToType(data["freeze_authority"], "String");
            }
            if (data.hasOwnProperty("mint_authority")) {
              obj["mint_authority"] = _ApiClient["default"].convertToType(data["mint_authority"], "String");
            }
            if (data.hasOwnProperty("is_initialized")) {
              obj["is_initialized"] = _ApiClient["default"].convertToType(data["is_initialized"], "Boolean");
            }
            if (data.hasOwnProperty("supply")) {
              obj["supply"] = _ApiClient["default"].convertToType(data["supply"], "String");
            }
          }
          return obj;
        }
      }]);
      return GetSPLTokenResponse2;
    }();
    GetSPLTokenResponse.prototype["decimals"] = void 0;
    GetSPLTokenResponse.prototype["freeze_authority"] = void 0;
    GetSPLTokenResponse.prototype["mint_authority"] = void 0;
    GetSPLTokenResponse.prototype["is_initialized"] = void 0;
    GetSPLTokenResponse.prototype["supply"] = void 0;
    var _default = GetSPLTokenResponse;
    exports["default"] = _default;
  }
});

// node_modules/theblockchainapi/dist/model/InputBlockchainIdentifier.js
var require_InputBlockchainIdentifier = __commonJS({
  "node_modules/theblockchainapi/dist/model/InputBlockchainIdentifier.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var InputBlockchainIdentifier = function() {
      function InputBlockchainIdentifier2() {
        _classCallCheck(this, InputBlockchainIdentifier2);
        InputBlockchainIdentifier2.initialize(this);
      }
      _createClass(InputBlockchainIdentifier2, null, [{
        key: "initialize",
        value: function initialize(obj) {
        }
        /**
         * Constructs a <code>InputBlockchainIdentifier</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/InputBlockchainIdentifier} obj Optional instance to populate.
         * @return {module:model/InputBlockchainIdentifier} The populated <code>InputBlockchainIdentifier</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new InputBlockchainIdentifier2();
            if (data.hasOwnProperty("blockchain_identifier")) {
              obj["blockchain_identifier"] = _ApiClient["default"].convertToType(data["blockchain_identifier"], "String");
            }
          }
          return obj;
        }
      }]);
      return InputBlockchainIdentifier2;
    }();
    InputBlockchainIdentifier.prototype["blockchain_identifier"] = void 0;
    var _default = InputBlockchainIdentifier;
    exports["default"] = _default;
  }
});

// node_modules/theblockchainapi/dist/model/InputName.js
var require_InputName = __commonJS({
  "node_modules/theblockchainapi/dist/model/InputName.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var InputName = function() {
      function InputName2() {
        _classCallCheck(this, InputName2);
        InputName2.initialize(this);
      }
      _createClass(InputName2, null, [{
        key: "initialize",
        value: function initialize(obj) {
        }
        /**
         * Constructs a <code>InputName</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/InputName} obj Optional instance to populate.
         * @return {module:model/InputName} The populated <code>InputName</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new InputName2();
            if (data.hasOwnProperty("name")) {
              obj["name"] = _ApiClient["default"].convertToType(data["name"], "String");
            }
          }
          return obj;
        }
      }]);
      return InputName2;
    }();
    InputName.prototype["name"] = void 0;
    var _default = InputName;
    exports["default"] = _default;
  }
});

// node_modules/theblockchainapi/dist/model/ListNFTsResponse.js
var require_ListNFTsResponse = __commonJS({
  "node_modules/theblockchainapi/dist/model/ListNFTsResponse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    var _NFT = _interopRequireDefault(require_NFT());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var ListNFTsResponse = function() {
      function ListNFTsResponse2() {
        _classCallCheck(this, ListNFTsResponse2);
        ListNFTsResponse2.initialize(this);
      }
      _createClass(ListNFTsResponse2, null, [{
        key: "initialize",
        value: function initialize(obj) {
        }
        /**
         * Constructs a <code>ListNFTsResponse</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/ListNFTsResponse} obj Optional instance to populate.
         * @return {module:model/ListNFTsResponse} The populated <code>ListNFTsResponse</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new ListNFTsResponse2();
            if (data.hasOwnProperty("nfts_owned")) {
              obj["nfts_owned"] = _ApiClient["default"].convertToType(data["nfts_owned"], ["String"]);
            }
            if (data.hasOwnProperty("nfts_metadata")) {
              obj["nfts_metadata"] = _ApiClient["default"].convertToType(data["nfts_metadata"], [_NFT["default"]]);
            }
          }
          return obj;
        }
      }]);
      return ListNFTsResponse2;
    }();
    ListNFTsResponse.prototype["nfts_owned"] = void 0;
    ListNFTsResponse.prototype["nfts_metadata"] = void 0;
    var _default = ListNFTsResponse;
    exports["default"] = _default;
  }
});

// node_modules/theblockchainapi/dist/model/NFTMintErrorResponse.js
var require_NFTMintErrorResponse = __commonJS({
  "node_modules/theblockchainapi/dist/model/NFTMintErrorResponse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var NFTMintErrorResponse = function() {
      function NFTMintErrorResponse2() {
        _classCallCheck(this, NFTMintErrorResponse2);
        NFTMintErrorResponse2.initialize(this);
      }
      _createClass(NFTMintErrorResponse2, null, [{
        key: "initialize",
        value: function initialize(obj) {
        }
        /**
         * Constructs a <code>NFTMintErrorResponse</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/NFTMintErrorResponse} obj Optional instance to populate.
         * @return {module:model/NFTMintErrorResponse} The populated <code>NFTMintErrorResponse</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new NFTMintErrorResponse2();
            if (data.hasOwnProperty("error")) {
              obj["error"] = _ApiClient["default"].convertToType(data["error"], "String");
            }
          }
          return obj;
        }
      }]);
      return NFTMintErrorResponse2;
    }();
    NFTMintErrorResponse.prototype["error"] = void 0;
    var _default = NFTMintErrorResponse;
    exports["default"] = _default;
  }
});

// node_modules/theblockchainapi/dist/model/NFTMintFee.js
var require_NFTMintFee = __commonJS({
  "node_modules/theblockchainapi/dist/model/NFTMintFee.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var NFTMintFee = function() {
      function NFTMintFee2() {
        _classCallCheck(this, NFTMintFee2);
        NFTMintFee2.initialize(this);
      }
      _createClass(NFTMintFee2, null, [{
        key: "initialize",
        value: function initialize(obj) {
        }
        /**
         * Constructs a <code>NFTMintFee</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/NFTMintFee} obj Optional instance to populate.
         * @return {module:model/NFTMintFee} The populated <code>NFTMintFee</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new NFTMintFee2();
            if (data.hasOwnProperty("nft_mint_fee_estimate_lamports")) {
              obj["nft_mint_fee_estimate_lamports"] = _ApiClient["default"].convertToType(data["nft_mint_fee_estimate_lamports"], "Number");
            }
            if (data.hasOwnProperty("description")) {
              obj["description"] = _ApiClient["default"].convertToType(data["description"], "String");
            }
          }
          return obj;
        }
      }]);
      return NFTMintFee2;
    }();
    NFTMintFee.prototype["nft_mint_fee_estimate_lamports"] = void 0;
    NFTMintFee.prototype["description"] = void 0;
    var _default = NFTMintFee;
    exports["default"] = _default;
  }
});

// node_modules/theblockchainapi/dist/model/NFTMintRequest.js
var require_NFTMintRequest = __commonJS({
  "node_modules/theblockchainapi/dist/model/NFTMintRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    var _Wallet = _interopRequireDefault(require_Wallet());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var NFTMintRequest = function() {
      function NFTMintRequest2() {
        _classCallCheck(this, NFTMintRequest2);
        NFTMintRequest2.initialize(this);
      }
      _createClass(NFTMintRequest2, null, [{
        key: "initialize",
        value: function initialize(obj) {
        }
        /**
         * Constructs a <code>NFTMintRequest</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/NFTMintRequest} obj Optional instance to populate.
         * @return {module:model/NFTMintRequest} The populated <code>NFTMintRequest</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new NFTMintRequest2();
            if (data.hasOwnProperty("wait_for_confirmation")) {
              obj["wait_for_confirmation"] = _ApiClient["default"].convertToType(data["wait_for_confirmation"], "Boolean");
            }
            if (data.hasOwnProperty("wallet")) {
              obj["wallet"] = _Wallet["default"].constructFromObject(data["wallet"]);
            }
            if (data.hasOwnProperty("name")) {
              obj["name"] = _ApiClient["default"].convertToType(data["name"], "String");
            }
            if (data.hasOwnProperty("symbol")) {
              obj["symbol"] = _ApiClient["default"].convertToType(data["symbol"], "String");
            }
            if (data.hasOwnProperty("description")) {
              obj["description"] = _ApiClient["default"].convertToType(data["description"], "String");
            }
            if (data.hasOwnProperty("upload_method")) {
              obj["upload_method"] = _ApiClient["default"].convertToType(data["upload_method"], "String");
            }
            if (data.hasOwnProperty("uri")) {
              obj["uri"] = _ApiClient["default"].convertToType(data["uri"], "String");
            }
            if (data.hasOwnProperty("image_url")) {
              obj["image_url"] = _ApiClient["default"].convertToType(data["image_url"], "String");
            }
            if (data.hasOwnProperty("uri_metadata")) {
              obj["uri_metadata"] = _ApiClient["default"].convertToType(data["uri_metadata"], Object);
            }
            if (data.hasOwnProperty("is_mutable")) {
              obj["is_mutable"] = _ApiClient["default"].convertToType(data["is_mutable"], "Boolean");
            }
            if (data.hasOwnProperty("is_master_edition")) {
              obj["is_master_edition"] = _ApiClient["default"].convertToType(data["is_master_edition"], "Boolean");
            }
            if (data.hasOwnProperty("seller_fee_basis_points")) {
              obj["seller_fee_basis_points"] = _ApiClient["default"].convertToType(data["seller_fee_basis_points"], "Number");
            }
            if (data.hasOwnProperty("creators")) {
              obj["creators"] = _ApiClient["default"].convertToType(data["creators"], ["String"]);
            }
            if (data.hasOwnProperty("share")) {
              obj["share"] = _ApiClient["default"].convertToType(data["share"], ["Number"]);
            }
            if (data.hasOwnProperty("mint_to_public_key")) {
              obj["mint_to_public_key"] = _ApiClient["default"].convertToType(data["mint_to_public_key"], "String");
            }
            if (data.hasOwnProperty("network")) {
              obj["network"] = _ApiClient["default"].convertToType(data["network"], "String");
            }
          }
          return obj;
        }
      }]);
      return NFTMintRequest2;
    }();
    NFTMintRequest.prototype["wait_for_confirmation"] = true;
    NFTMintRequest.prototype["wallet"] = void 0;
    NFTMintRequest.prototype["name"] = "";
    NFTMintRequest.prototype["symbol"] = "";
    NFTMintRequest.prototype["description"] = "";
    NFTMintRequest.prototype["upload_method"] = "S3";
    NFTMintRequest.prototype["uri"] = "";
    NFTMintRequest.prototype["image_url"] = "";
    NFTMintRequest.prototype["uri_metadata"] = void 0;
    NFTMintRequest.prototype["is_mutable"] = true;
    NFTMintRequest.prototype["is_master_edition"] = true;
    NFTMintRequest.prototype["seller_fee_basis_points"] = 0;
    NFTMintRequest.prototype["creators"] = void 0;
    NFTMintRequest.prototype["share"] = void 0;
    NFTMintRequest.prototype["mint_to_public_key"] = "The public key of the wallet provided";
    NFTMintRequest.prototype["network"] = "devnet";
    NFTMintRequest["UploadMethodEnum"] = {
      /**
       * value: "S3"
       * @const
       */
      "S3": "S3",
      /**
       * value: "URI"
       * @const
       */
      "URI": "URI"
    };
    NFTMintRequest["NetworkEnum"] = {
      /**
       * value: "devnet"
       * @const
       */
      "devnet": "devnet",
      /**
       * value: "mainnet-beta"
       * @const
       */
      "mainnet-beta": "mainnet-beta"
    };
    var _default = NFTMintRequest;
    exports["default"] = _default;
  }
});

// node_modules/theblockchainapi/dist/model/NFTOwnerAdvancedResponseContract.js
var require_NFTOwnerAdvancedResponseContract = __commonJS({
  "node_modules/theblockchainapi/dist/model/NFTOwnerAdvancedResponseContract.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var NFTOwnerAdvancedResponseContract = function() {
      function NFTOwnerAdvancedResponseContract2() {
        _classCallCheck(this, NFTOwnerAdvancedResponseContract2);
        NFTOwnerAdvancedResponseContract2.initialize(this);
      }
      _createClass(NFTOwnerAdvancedResponseContract2, null, [{
        key: "initialize",
        value: function initialize(obj) {
        }
        /**
         * Constructs a <code>NFTOwnerAdvancedResponseContract</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/NFTOwnerAdvancedResponseContract} obj Optional instance to populate.
         * @return {module:model/NFTOwnerAdvancedResponseContract} The populated <code>NFTOwnerAdvancedResponseContract</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new NFTOwnerAdvancedResponseContract2();
            if (data.hasOwnProperty("contract_type")) {
              obj["contract_type"] = _ApiClient["default"].convertToType(data["contract_type"], "String");
            }
            if (data.hasOwnProperty("contract_id")) {
              obj["contract_id"] = _ApiClient["default"].convertToType(data["contract_id"], "String");
            }
            if (data.hasOwnProperty("contract_blockchain_identifier")) {
              obj["contract_blockchain_identifier"] = _ApiClient["default"].convertToType(data["contract_blockchain_identifier"], "String");
            }
            if (data.hasOwnProperty("contract_name")) {
              obj["contract_name"] = _ApiClient["default"].convertToType(data["contract_name"], "String");
            }
          }
          return obj;
        }
      }]);
      return NFTOwnerAdvancedResponseContract2;
    }();
    NFTOwnerAdvancedResponseContract.prototype["contract_type"] = void 0;
    NFTOwnerAdvancedResponseContract.prototype["contract_id"] = void 0;
    NFTOwnerAdvancedResponseContract.prototype["contract_blockchain_identifier"] = void 0;
    NFTOwnerAdvancedResponseContract.prototype["contract_name"] = void 0;
    NFTOwnerAdvancedResponseContract["ContractTypeEnum"] = {
      /**
       * value: "marketplace"
       * @const
       */
      "marketplace": "marketplace",
      /**
       * value: "otc"
       * @const
       */
      "otc": "otc",
      /**
       * value: "loan"
       * @const
       */
      "loan": "loan",
      /**
       * value: "staking"
       * @const
       */
      "staking": "staking",
      /**
       * value: "burned"
       * @const
       */
      "burned": "burned"
    };
    var _default = NFTOwnerAdvancedResponseContract;
    exports["default"] = _default;
  }
});

// node_modules/theblockchainapi/dist/model/NFTOwnerAdvancedResponse.js
var require_NFTOwnerAdvancedResponse = __commonJS({
  "node_modules/theblockchainapi/dist/model/NFTOwnerAdvancedResponse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    var _NFTOwnerAdvancedResponseContract = _interopRequireDefault(require_NFTOwnerAdvancedResponseContract());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var NFTOwnerAdvancedResponse = function() {
      function NFTOwnerAdvancedResponse2() {
        _classCallCheck(this, NFTOwnerAdvancedResponse2);
        NFTOwnerAdvancedResponse2.initialize(this);
      }
      _createClass(NFTOwnerAdvancedResponse2, null, [{
        key: "initialize",
        value: function initialize(obj) {
        }
        /**
         * Constructs a <code>NFTOwnerAdvancedResponse</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/NFTOwnerAdvancedResponse} obj Optional instance to populate.
         * @return {module:model/NFTOwnerAdvancedResponse} The populated <code>NFTOwnerAdvancedResponse</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new NFTOwnerAdvancedResponse2();
            if (data.hasOwnProperty("contract")) {
              obj["contract"] = _NFTOwnerAdvancedResponseContract["default"].constructFromObject(data["contract"]);
            }
            if (data.hasOwnProperty("owner")) {
              obj["owner"] = _ApiClient["default"].convertToType(data["owner"], "String");
            }
            if (data.hasOwnProperty("price")) {
              obj["price"] = _ApiClient["default"].convertToType(data["price"], "Number");
            }
            if (data.hasOwnProperty("state")) {
              obj["state"] = _ApiClient["default"].convertToType(data["state"], "String");
            }
          }
          return obj;
        }
      }]);
      return NFTOwnerAdvancedResponse2;
    }();
    NFTOwnerAdvancedResponse.prototype["contract"] = void 0;
    NFTOwnerAdvancedResponse.prototype["owner"] = void 0;
    NFTOwnerAdvancedResponse.prototype["price"] = void 0;
    NFTOwnerAdvancedResponse.prototype["state"] = void 0;
    NFTOwnerAdvancedResponse["StateEnum"] = {
      /**
       * value: "loaning"
       * @const
       */
      "loaning": "loaning",
      /**
       * value: "listing"
       * @const
       */
      "listing": "listing",
      /**
       * value: "staking"
       * @const
       */
      "staking": "staking",
      /**
       * value: "holding"
       * @const
       */
      "holding": "holding",
      /**
       * value: "burned"
       * @const
       */
      "burned": "burned"
    };
    var _default = NFTOwnerAdvancedResponse;
    exports["default"] = _default;
  }
});

// node_modules/theblockchainapi/dist/model/NFTOwnerResponse.js
var require_NFTOwnerResponse = __commonJS({
  "node_modules/theblockchainapi/dist/model/NFTOwnerResponse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var NFTOwnerResponse = function() {
      function NFTOwnerResponse2(nftOwner) {
        _classCallCheck(this, NFTOwnerResponse2);
        NFTOwnerResponse2.initialize(this, nftOwner);
      }
      _createClass(NFTOwnerResponse2, null, [{
        key: "initialize",
        value: function initialize(obj, nftOwner) {
          obj["nft_owner"] = nftOwner;
        }
        /**
         * Constructs a <code>NFTOwnerResponse</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/NFTOwnerResponse} obj Optional instance to populate.
         * @return {module:model/NFTOwnerResponse} The populated <code>NFTOwnerResponse</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new NFTOwnerResponse2();
            if (data.hasOwnProperty("nft_owner")) {
              obj["nft_owner"] = _ApiClient["default"].convertToType(data["nft_owner"], "String");
            }
          }
          return obj;
        }
      }]);
      return NFTOwnerResponse2;
    }();
    NFTOwnerResponse.prototype["nft_owner"] = void 0;
    var _default = NFTOwnerResponse;
    exports["default"] = _default;
  }
});

// node_modules/theblockchainapi/dist/model/NFTSearchRequest.js
var require_NFTSearchRequest = __commonJS({
  "node_modules/theblockchainapi/dist/model/NFTSearchRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var NFTSearchRequest = function() {
      function NFTSearchRequest2() {
        _classCallCheck(this, NFTSearchRequest2);
        NFTSearchRequest2.initialize(this);
      }
      _createClass(NFTSearchRequest2, null, [{
        key: "initialize",
        value: function initialize(obj) {
        }
        /**
         * Constructs a <code>NFTSearchRequest</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/NFTSearchRequest} obj Optional instance to populate.
         * @return {module:model/NFTSearchRequest} The populated <code>NFTSearchRequest</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new NFTSearchRequest2();
            if (data.hasOwnProperty("update_authority")) {
              obj["update_authority"] = _ApiClient["default"].convertToType(data["update_authority"], "String");
            }
            if (data.hasOwnProperty("update_authority_search_method")) {
              obj["update_authority_search_method"] = _ApiClient["default"].convertToType(data["update_authority_search_method"], "String");
            }
            if (data.hasOwnProperty("mint_address")) {
              obj["mint_address"] = _ApiClient["default"].convertToType(data["mint_address"], "String");
            }
            if (data.hasOwnProperty("mint_address_search_method")) {
              obj["mint_address_search_method"] = _ApiClient["default"].convertToType(data["mint_address_search_method"], "String");
            }
            if (data.hasOwnProperty("name")) {
              obj["name"] = _ApiClient["default"].convertToType(data["name"], "String");
            }
            if (data.hasOwnProperty("name_search_method")) {
              obj["name_search_method"] = _ApiClient["default"].convertToType(data["name_search_method"], "String");
            }
            if (data.hasOwnProperty("uri")) {
              obj["uri"] = _ApiClient["default"].convertToType(data["uri"], "String");
            }
            if (data.hasOwnProperty("uri_search_method")) {
              obj["uri_search_method"] = _ApiClient["default"].convertToType(data["uri_search_method"], "String");
            }
            if (data.hasOwnProperty("symbol")) {
              obj["symbol"] = _ApiClient["default"].convertToType(data["symbol"], "String");
            }
            if (data.hasOwnProperty("symbol_search_method")) {
              obj["symbol_search_method"] = _ApiClient["default"].convertToType(data["symbol_search_method"], "String");
            }
            if (data.hasOwnProperty("network")) {
              obj["network"] = _ApiClient["default"].convertToType(data["network"], "String");
            }
          }
          return obj;
        }
      }]);
      return NFTSearchRequest2;
    }();
    NFTSearchRequest.prototype["update_authority"] = void 0;
    NFTSearchRequest.prototype["update_authority_search_method"] = "exact_match";
    NFTSearchRequest.prototype["mint_address"] = void 0;
    NFTSearchRequest.prototype["mint_address_search_method"] = "exact_match";
    NFTSearchRequest.prototype["name"] = void 0;
    NFTSearchRequest.prototype["name_search_method"] = "exact_match";
    NFTSearchRequest.prototype["uri"] = void 0;
    NFTSearchRequest.prototype["uri_search_method"] = "exact_match";
    NFTSearchRequest.prototype["symbol"] = void 0;
    NFTSearchRequest.prototype["symbol_search_method"] = "exact_match";
    NFTSearchRequest.prototype["network"] = "devnet";
    NFTSearchRequest["UpdateAuthoritySearchMethodEnum"] = {
      /**
       * value: "exact_match"
       * @const
       */
      "exact_match": "exact_match"
    };
    NFTSearchRequest["MintAddressSearchMethodEnum"] = {
      /**
       * value: "exact_match"
       * @const
       */
      "exact_match": "exact_match"
    };
    NFTSearchRequest["NameSearchMethodEnum"] = {
      /**
       * value: "begins_with"
       * @const
       */
      "begins_with": "begins_with",
      /**
       * value: "exact_match"
       * @const
       */
      "exact_match": "exact_match"
    };
    NFTSearchRequest["UriSearchMethodEnum"] = {
      /**
       * value: "begins_with"
       * @const
       */
      "begins_with": "begins_with",
      /**
       * value: "exact_match"
       * @const
       */
      "exact_match": "exact_match"
    };
    NFTSearchRequest["SymbolSearchMethodEnum"] = {
      /**
       * value: "begins_with"
       * @const
       */
      "begins_with": "begins_with",
      /**
       * value: "exact_match"
       * @const
       */
      "exact_match": "exact_match"
    };
    NFTSearchRequest["NetworkEnum"] = {
      /**
       * value: "devnet"
       * @const
       */
      "devnet": "devnet",
      /**
       * value: "mainnet-beta"
       * @const
       */
      "mainnet-beta": "mainnet-beta"
    };
    var _default = NFTSearchRequest;
    exports["default"] = _default;
  }
});

// node_modules/theblockchainapi/dist/model/NFTSearchResponse.js
var require_NFTSearchResponse = __commonJS({
  "node_modules/theblockchainapi/dist/model/NFTSearchResponse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    var _NFT = _interopRequireDefault(require_NFT());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var NFTSearchResponse = function() {
      function NFTSearchResponse2() {
        _classCallCheck(this, NFTSearchResponse2);
        NFTSearchResponse2.initialize(this);
      }
      _createClass(NFTSearchResponse2, null, [{
        key: "initialize",
        value: function initialize(obj) {
        }
        /**
         * Constructs a <code>NFTSearchResponse</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/NFTSearchResponse} obj Optional instance to populate.
         * @return {module:model/NFTSearchResponse} The populated <code>NFTSearchResponse</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new NFTSearchResponse2();
            if (data.hasOwnProperty("nft_metadata")) {
              obj["nft_metadata"] = _NFT["default"].constructFromObject(data["nft_metadata"]);
            }
            if (data.hasOwnProperty("pub_key_hash")) {
              obj["pub_key_hash"] = _ApiClient["default"].convertToType(data["pub_key_hash"], "String");
            }
          }
          return obj;
        }
      }]);
      return NFTSearchResponse2;
    }();
    NFTSearchResponse.prototype["nft_metadata"] = void 0;
    NFTSearchResponse.prototype["pub_key_hash"] = void 0;
    var _default = NFTSearchResponse;
    exports["default"] = _default;
  }
});

// node_modules/theblockchainapi/dist/model/NearPublicKey.js
var require_NearPublicKey = __commonJS({
  "node_modules/theblockchainapi/dist/model/NearPublicKey.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var NearPublicKey = function() {
      function NearPublicKey2() {
        _classCallCheck(this, NearPublicKey2);
        NearPublicKey2.initialize(this);
      }
      _createClass(NearPublicKey2, null, [{
        key: "initialize",
        value: function initialize(obj) {
        }
        /**
         * Constructs a <code>NearPublicKey</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/NearPublicKey} obj Optional instance to populate.
         * @return {module:model/NearPublicKey} The populated <code>NearPublicKey</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new NearPublicKey2();
            if (data.hasOwnProperty("hex_public_key")) {
              obj["hex_public_key"] = _ApiClient["default"].convertToType(data["hex_public_key"], "String");
            }
            if (data.hasOwnProperty("hex_public_address")) {
              obj["hex_public_address"] = _ApiClient["default"].convertToType(data["hex_public_address"], "String");
            }
            if (data.hasOwnProperty("public_key")) {
              obj["public_key"] = _ApiClient["default"].convertToType(data["public_key"], "String");
            }
          }
          return obj;
        }
      }]);
      return NearPublicKey2;
    }();
    NearPublicKey.prototype["hex_public_key"] = void 0;
    NearPublicKey.prototype["hex_public_address"] = void 0;
    NearPublicKey.prototype["public_key"] = void 0;
    var _default = NearPublicKey;
    exports["default"] = _default;
  }
});

// node_modules/theblockchainapi/dist/model/PublicKey.js
var require_PublicKey = __commonJS({
  "node_modules/theblockchainapi/dist/model/PublicKey.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var PublicKey = function() {
      function PublicKey2(publicKey) {
        _classCallCheck(this, PublicKey2);
        PublicKey2.initialize(this, publicKey);
      }
      _createClass(PublicKey2, null, [{
        key: "initialize",
        value: function initialize(obj, publicKey) {
          obj["public_key"] = publicKey;
        }
        /**
         * Constructs a <code>PublicKey</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/PublicKey} obj Optional instance to populate.
         * @return {module:model/PublicKey} The populated <code>PublicKey</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new PublicKey2();
            if (data.hasOwnProperty("public_key")) {
              obj["public_key"] = _ApiClient["default"].convertToType(data["public_key"], "String");
            }
          }
          return obj;
        }
      }]);
      return PublicKey2;
    }();
    PublicKey.prototype["public_key"] = void 0;
    var _default = PublicKey;
    exports["default"] = _default;
  }
});

// node_modules/theblockchainapi/dist/model/SecretPhrase.js
var require_SecretPhrase = __commonJS({
  "node_modules/theblockchainapi/dist/model/SecretPhrase.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var SecretPhrase = function() {
      function SecretPhrase2() {
        _classCallCheck(this, SecretPhrase2);
        SecretPhrase2.initialize(this);
      }
      _createClass(SecretPhrase2, null, [{
        key: "initialize",
        value: function initialize(obj) {
        }
        /**
         * Constructs a <code>SecretPhrase</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/SecretPhrase} obj Optional instance to populate.
         * @return {module:model/SecretPhrase} The populated <code>SecretPhrase</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new SecretPhrase2();
            if (data.hasOwnProperty("secret_recovery_phrase")) {
              obj["secret_recovery_phrase"] = _ApiClient["default"].convertToType(data["secret_recovery_phrase"], "String");
            }
          }
          return obj;
        }
      }]);
      return SecretPhrase2;
    }();
    SecretPhrase.prototype["secret_recovery_phrase"] = void 0;
    var _default = SecretPhrase;
    exports["default"] = _default;
  }
});

// node_modules/theblockchainapi/dist/model/SolanaPublicKey.js
var require_SolanaPublicKey = __commonJS({
  "node_modules/theblockchainapi/dist/model/SolanaPublicKey.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var SolanaPublicKey = function() {
      function SolanaPublicKey2() {
        _classCallCheck(this, SolanaPublicKey2);
        SolanaPublicKey2.initialize(this);
      }
      _createClass(SolanaPublicKey2, null, [{
        key: "initialize",
        value: function initialize(obj) {
        }
        /**
         * Constructs a <code>SolanaPublicKey</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/SolanaPublicKey} obj Optional instance to populate.
         * @return {module:model/SolanaPublicKey} The populated <code>SolanaPublicKey</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new SolanaPublicKey2();
            if (data.hasOwnProperty("public_key")) {
              obj["public_key"] = _ApiClient["default"].convertToType(data["public_key"], "String");
            }
            if (data.hasOwnProperty("hex_public_key")) {
              obj["hex_public_key"] = _ApiClient["default"].convertToType(data["hex_public_key"], "String");
            }
            if (data.hasOwnProperty("hex_public_address")) {
              obj["hex_public_address"] = _ApiClient["default"].convertToType(data["hex_public_address"], "String");
            }
          }
          return obj;
        }
      }]);
      return SolanaPublicKey2;
    }();
    SolanaPublicKey.prototype["public_key"] = void 0;
    SolanaPublicKey.prototype["hex_public_key"] = void 0;
    SolanaPublicKey.prototype["hex_public_address"] = void 0;
    var _default = SolanaPublicKey;
    exports["default"] = _default;
  }
});

// node_modules/theblockchainapi/dist/model/SupplyWalletRequest.js
var require_SupplyWalletRequest = __commonJS({
  "node_modules/theblockchainapi/dist/model/SupplyWalletRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    var _GeneralWallet = _interopRequireDefault(require_GeneralWallet());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var SupplyWalletRequest = function() {
      function SupplyWalletRequest2(wallet) {
        _classCallCheck(this, SupplyWalletRequest2);
        SupplyWalletRequest2.initialize(this, wallet);
      }
      _createClass(SupplyWalletRequest2, null, [{
        key: "initialize",
        value: function initialize(obj, wallet) {
          obj["wallet"] = wallet;
        }
        /**
         * Constructs a <code>SupplyWalletRequest</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/SupplyWalletRequest} obj Optional instance to populate.
         * @return {module:model/SupplyWalletRequest} The populated <code>SupplyWalletRequest</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new SupplyWalletRequest2();
            if (data.hasOwnProperty("wallet")) {
              obj["wallet"] = _GeneralWallet["default"].constructFromObject(data["wallet"]);
            }
          }
          return obj;
        }
      }]);
      return SupplyWalletRequest2;
    }();
    SupplyWalletRequest.prototype["wallet"] = void 0;
    var _default = SupplyWalletRequest;
    exports["default"] = _default;
  }
});

// node_modules/theblockchainapi/dist/model/TokenMetadataResponse.js
var require_TokenMetadataResponse = __commonJS({
  "node_modules/theblockchainapi/dist/model/TokenMetadataResponse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var TokenMetadataResponse = function() {
      function TokenMetadataResponse2() {
        _classCallCheck(this, TokenMetadataResponse2);
        TokenMetadataResponse2.initialize(this);
      }
      _createClass(TokenMetadataResponse2, null, [{
        key: "initialize",
        value: function initialize(obj) {
        }
        /**
         * Constructs a <code>TokenMetadataResponse</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/TokenMetadataResponse} obj Optional instance to populate.
         * @return {module:model/TokenMetadataResponse} The populated <code>TokenMetadataResponse</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new TokenMetadataResponse2();
            if (data.hasOwnProperty("symbol")) {
              obj["symbol"] = _ApiClient["default"].convertToType(data["symbol"], "String");
            }
            if (data.hasOwnProperty("name")) {
              obj["name"] = _ApiClient["default"].convertToType(data["name"], "String");
            }
            if (data.hasOwnProperty("decimals")) {
              obj["decimals"] = _ApiClient["default"].convertToType(data["decimals"], "Number");
            }
            if (data.hasOwnProperty("minter_blockchain_identifier")) {
              obj["minter_blockchain_identifier"] = _ApiClient["default"].convertToType(data["minter_blockchain_identifier"], "String");
            }
            if (data.hasOwnProperty("total_supply")) {
              obj["total_supply"] = _ApiClient["default"].convertToType(data["total_supply"], "String");
            }
          }
          return obj;
        }
      }]);
      return TokenMetadataResponse2;
    }();
    TokenMetadataResponse.prototype["symbol"] = void 0;
    TokenMetadataResponse.prototype["name"] = void 0;
    TokenMetadataResponse.prototype["decimals"] = void 0;
    TokenMetadataResponse.prototype["minter_blockchain_identifier"] = void 0;
    TokenMetadataResponse.prototype["total_supply"] = void 0;
    var _default = TokenMetadataResponse;
    exports["default"] = _default;
  }
});

// node_modules/theblockchainapi/dist/model/TransactionResult.js
var require_TransactionResult = __commonJS({
  "node_modules/theblockchainapi/dist/model/TransactionResult.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var TransactionResult = function() {
      function TransactionResult2() {
        _classCallCheck(this, TransactionResult2);
        TransactionResult2.initialize(this);
      }
      _createClass(TransactionResult2, null, [{
        key: "initialize",
        value: function initialize(obj) {
        }
        /**
         * Constructs a <code>TransactionResult</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/TransactionResult} obj Optional instance to populate.
         * @return {module:model/TransactionResult} The populated <code>TransactionResult</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new TransactionResult2();
            if (data.hasOwnProperty("block_time")) {
              obj["block_time"] = _ApiClient["default"].convertToType(data["block_time"], "Number");
            }
            if (data.hasOwnProperty("meta")) {
              obj["meta"] = _ApiClient["default"].convertToType(data["meta"], Object);
            }
            if (data.hasOwnProperty("slot")) {
              obj["slot"] = _ApiClient["default"].convertToType(data["slot"], "Number");
            }
            if (data.hasOwnProperty("transaction")) {
              obj["transaction"] = _ApiClient["default"].convertToType(data["transaction"], Object);
            }
          }
          return obj;
        }
      }]);
      return TransactionResult2;
    }();
    TransactionResult.prototype["block_time"] = void 0;
    TransactionResult.prototype["meta"] = void 0;
    TransactionResult.prototype["slot"] = void 0;
    TransactionResult.prototype["transaction"] = void 0;
    var _default = TransactionResult;
    exports["default"] = _default;
  }
});

// node_modules/theblockchainapi/dist/model/Transaction.js
var require_Transaction = __commonJS({
  "node_modules/theblockchainapi/dist/model/Transaction.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    var _TransactionResult = _interopRequireDefault(require_TransactionResult());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var Transaction = function() {
      function Transaction2() {
        _classCallCheck(this, Transaction2);
        Transaction2.initialize(this);
      }
      _createClass(Transaction2, null, [{
        key: "initialize",
        value: function initialize(obj) {
        }
        /**
         * Constructs a <code>Transaction</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/Transaction} obj Optional instance to populate.
         * @return {module:model/Transaction} The populated <code>Transaction</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new Transaction2();
            if (data.hasOwnProperty("id")) {
              obj["id"] = _ApiClient["default"].convertToType(data["id"], "Number");
            }
            if (data.hasOwnProperty("jsonrpc")) {
              obj["jsonrpc"] = _ApiClient["default"].convertToType(data["jsonrpc"], "String");
            }
            if (data.hasOwnProperty("result")) {
              obj["result"] = _TransactionResult["default"].constructFromObject(data["result"]);
            }
          }
          return obj;
        }
      }]);
      return Transaction2;
    }();
    Transaction.prototype["id"] = void 0;
    Transaction.prototype["jsonrpc"] = void 0;
    Transaction.prototype["result"] = void 0;
    var _default = Transaction;
    exports["default"] = _default;
  }
});

// node_modules/theblockchainapi/dist/model/TransferRequest.js
var require_TransferRequest = __commonJS({
  "node_modules/theblockchainapi/dist/model/TransferRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    var _FeePayerWallet = _interopRequireDefault(require_FeePayerWallet());
    var _Wallet = _interopRequireDefault(require_Wallet());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var TransferRequest = function() {
      function TransferRequest2(recipientAddress) {
        _classCallCheck(this, TransferRequest2);
        TransferRequest2.initialize(this, recipientAddress);
      }
      _createClass(TransferRequest2, null, [{
        key: "initialize",
        value: function initialize(obj, recipientAddress) {
          obj["recipient_address"] = recipientAddress;
        }
        /**
         * Constructs a <code>TransferRequest</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/TransferRequest} obj Optional instance to populate.
         * @return {module:model/TransferRequest} The populated <code>TransferRequest</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new TransferRequest2();
            if (data.hasOwnProperty("wait_for_confirmation")) {
              obj["wait_for_confirmation"] = _ApiClient["default"].convertToType(data["wait_for_confirmation"], "Boolean");
            }
            if (data.hasOwnProperty("recipient_address")) {
              obj["recipient_address"] = _ApiClient["default"].convertToType(data["recipient_address"], "String");
            }
            if (data.hasOwnProperty("wallet")) {
              obj["wallet"] = _Wallet["default"].constructFromObject(data["wallet"]);
            }
            if (data.hasOwnProperty("token_address")) {
              obj["token_address"] = _ApiClient["default"].convertToType(data["token_address"], "String");
            }
            if (data.hasOwnProperty("network")) {
              obj["network"] = _ApiClient["default"].convertToType(data["network"], "String");
            }
            if (data.hasOwnProperty("amount")) {
              obj["amount"] = _ApiClient["default"].convertToType(data["amount"], "String");
            }
            if (data.hasOwnProperty("return_compiled_transaction")) {
              obj["return_compiled_transaction"] = _ApiClient["default"].convertToType(data["return_compiled_transaction"], "Boolean");
            }
            if (data.hasOwnProperty("sender_public_key")) {
              obj["sender_public_key"] = _ApiClient["default"].convertToType(data["sender_public_key"], "String");
            }
            if (data.hasOwnProperty("fee_payer_wallet")) {
              obj["fee_payer_wallet"] = _FeePayerWallet["default"].constructFromObject(data["fee_payer_wallet"]);
            }
          }
          return obj;
        }
      }]);
      return TransferRequest2;
    }();
    TransferRequest.prototype["wait_for_confirmation"] = true;
    TransferRequest.prototype["recipient_address"] = void 0;
    TransferRequest.prototype["wallet"] = void 0;
    TransferRequest.prototype["token_address"] = void 0;
    TransferRequest.prototype["network"] = "devnet";
    TransferRequest.prototype["amount"] = "1";
    TransferRequest.prototype["return_compiled_transaction"] = false;
    TransferRequest.prototype["sender_public_key"] = "null";
    TransferRequest.prototype["fee_payer_wallet"] = void 0;
    TransferRequest["NetworkEnum"] = {
      /**
       * value: "devnet"
       * @const
       */
      "devnet": "devnet",
      /**
       * value: "mainnet-beta"
       * @const
       */
      "mainnet-beta": "mainnet-beta"
    };
    var _default = TransferRequest;
    exports["default"] = _default;
  }
});

// node_modules/theblockchainapi/dist/model/WalletIdentifiers.js
var require_WalletIdentifiers = __commonJS({
  "node_modules/theblockchainapi/dist/model/WalletIdentifiers.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    var _AvalancheCChainPublicAddress = _interopRequireDefault(require_AvalancheCChainPublicAddress());
    var _AvalancheXPChainPublicAddress = _interopRequireDefault(require_AvalancheXPChainPublicAddress());
    var _BSCPublicAddress = _interopRequireDefault(require_BSCPublicAddress());
    var _EthereumPublicAddress = _interopRequireDefault(require_EthereumPublicAddress());
    var _NearPublicKey = _interopRequireDefault(require_NearPublicKey());
    var _SolanaPublicKey = _interopRequireDefault(require_SolanaPublicKey());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var WalletIdentifiers = function() {
      function WalletIdentifiers2() {
        _classCallCheck(this, WalletIdentifiers2);
        _AvalancheCChainPublicAddress["default"].initialize(this);
        _AvalancheXPChainPublicAddress["default"].initialize(this);
        _BSCPublicAddress["default"].initialize(this);
        _EthereumPublicAddress["default"].initialize(this);
        _NearPublicKey["default"].initialize(this);
        _SolanaPublicKey["default"].initialize(this);
        WalletIdentifiers2.initialize(this);
      }
      _createClass(WalletIdentifiers2, null, [{
        key: "initialize",
        value: function initialize(obj) {
        }
        /**
         * Constructs a <code>WalletIdentifiers</code> from a plain JavaScript object, optionally creating a new instance.
         * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
         * @param {Object} data The plain JavaScript object bearing properties of interest.
         * @param {module:model/WalletIdentifiers} obj Optional instance to populate.
         * @return {module:model/WalletIdentifiers} The populated <code>WalletIdentifiers</code> instance.
         */
      }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj) {
          if (data) {
            obj = obj || new WalletIdentifiers2();
            _AvalancheCChainPublicAddress["default"].constructFromObject(data, obj);
            _AvalancheXPChainPublicAddress["default"].constructFromObject(data, obj);
            _BSCPublicAddress["default"].constructFromObject(data, obj);
            _EthereumPublicAddress["default"].constructFromObject(data, obj);
            _NearPublicKey["default"].constructFromObject(data, obj);
            _SolanaPublicKey["default"].constructFromObject(data, obj);
            if (data.hasOwnProperty("hex_public_address")) {
              obj["hex_public_address"] = _ApiClient["default"].convertToType(data["hex_public_address"], "String");
            }
            if (data.hasOwnProperty("hex_public_key")) {
              obj["hex_public_key"] = _ApiClient["default"].convertToType(data["hex_public_key"], "String");
            }
            if (data.hasOwnProperty("bech_public_address")) {
              obj["bech_public_address"] = _ApiClient["default"].convertToType(data["bech_public_address"], "String");
            }
            if (data.hasOwnProperty("public_key")) {
              obj["public_key"] = _ApiClient["default"].convertToType(data["public_key"], "String");
            }
          }
          return obj;
        }
      }]);
      return WalletIdentifiers2;
    }();
    WalletIdentifiers.prototype["hex_public_address"] = void 0;
    WalletIdentifiers.prototype["hex_public_key"] = void 0;
    WalletIdentifiers.prototype["bech_public_address"] = void 0;
    WalletIdentifiers.prototype["public_key"] = void 0;
    _AvalancheCChainPublicAddress["default"].prototype["hex_public_address"] = void 0;
    _AvalancheCChainPublicAddress["default"].prototype["hex_public_key"] = void 0;
    _AvalancheXPChainPublicAddress["default"].prototype["bech_public_address"] = void 0;
    _AvalancheXPChainPublicAddress["default"].prototype["hex_public_address"] = void 0;
    _BSCPublicAddress["default"].prototype["hex_public_address"] = void 0;
    _BSCPublicAddress["default"].prototype["hex_public_key"] = void 0;
    _EthereumPublicAddress["default"].prototype["hex_public_address"] = void 0;
    _EthereumPublicAddress["default"].prototype["hex_public_key"] = void 0;
    _NearPublicKey["default"].prototype["hex_public_key"] = void 0;
    _NearPublicKey["default"].prototype["hex_public_address"] = void 0;
    _NearPublicKey["default"].prototype["public_key"] = void 0;
    _SolanaPublicKey["default"].prototype["public_key"] = void 0;
    _SolanaPublicKey["default"].prototype["hex_public_key"] = void 0;
    _SolanaPublicKey["default"].prototype["hex_public_address"] = void 0;
    var _default = WalletIdentifiers;
    exports["default"] = _default;
  }
});

// node_modules/theblockchainapi/dist/api/CCPaymentApi.js
var require_CCPaymentApi = __commonJS({
  "node_modules/theblockchainapi/dist/api/CCPaymentApi.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    var _CCPayment = _interopRequireDefault(require_CCPayment());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var CCPaymentApi = function() {
      function CCPaymentApi2(apiClient) {
        _classCallCheck(this, CCPaymentApi2);
        this.apiClient = apiClient || _ApiClient["default"].instance;
      }
      _createClass(CCPaymentApi2, [{
        key: "getCCPaymentWithHttpInfo",
        value: function getCCPaymentWithHttpInfo(projectId, paymentIdentifier) {
          var postBody = null;
          if (projectId === void 0 || projectId === null) {
            throw new Error("Missing the required parameter 'projectId' when calling getCCPayment");
          }
          if (paymentIdentifier === void 0 || paymentIdentifier === null) {
            throw new Error("Missing the required parameter 'paymentIdentifier' when calling getCCPayment");
          }
          var pathParams = {
            "project_id": projectId,
            "payment_identifier": paymentIdentifier
          };
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["APIKeyID", "APISecretKey"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = _CCPayment["default"];
          return this.apiClient.callApi("/checkout/v1/project/{project_id}/payment/{payment_identifier}", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * Get a payment 
         * Retrieve a specific payment, either by its `payment_id` or `payment_validation_code`.  `Cost: 0 Credit` (Free) (<a href=\"#section/Pricing\">See Pricing</a>)
         * @param {String} projectId The ID of the project. Created and returned when a project is created.
         * @param {String} paymentIdentifier You can supply either `payment_id` or `payment_validation_code`.  The `payment_id` is only visible by you and uniquely identifies a payment.  The `payment_validation_code` is shown exclusively to the customer and the owner of the project. It can be used to redeem a payment. You can verify a payment by pulling the payment with the `payment_validation_code`.
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CCPayment}
         */
      }, {
        key: "getCCPayment",
        value: function getCCPayment(projectId, paymentIdentifier) {
          return this.getCCPaymentWithHttpInfo(projectId, paymentIdentifier).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
        /**
         * List all payments  
         * List all payments associated with your account (across all projects).  `Cost: 0 Credit` (Free) (<a href=\"#section/Pricing\">See Pricing</a>)
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/CCPayment>} and HTTP response
         */
      }, {
        key: "listAllCCPaymentsWithHttpInfo",
        value: function listAllCCPaymentsWithHttpInfo() {
          var postBody = null;
          var pathParams = {};
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["APIKeyID", "APISecretKey"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = [_CCPayment["default"]];
          return this.apiClient.callApi("/checkout/v1/payments", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * List all payments  
         * List all payments associated with your account (across all projects).  `Cost: 0 Credit` (Free) (<a href=\"#section/Pricing\">See Pricing</a>)
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/CCPayment>}
         */
      }, {
        key: "listAllCCPayments",
        value: function listAllCCPayments() {
          return this.listAllCCPaymentsWithHttpInfo().then(function(response_and_data) {
            return response_and_data.data;
          });
        }
        /**
         * List a project's payments 
         * List all payments associated with a project.  `Cost: 0 Credit` (Free) (<a href=\"#section/Pricing\">See Pricing</a>)
         * @param {String} projectId The ID of the project. Created and returned when a project is created.
         * @param {Object} opts Optional parameters
         * @param {module:model/null} opts.UNKNOWN_PARAMETER_NAME Filter payments by a user's wallet identifier (i.e., Solana public key) 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/CCPayment>} and HTTP response
         */
      }, {
        key: "listCCProjectPaymentsWithHttpInfo",
        value: function listCCProjectPaymentsWithHttpInfo(projectId, opts) {
          opts = opts || {};
          var postBody = null;
          if (projectId === void 0 || projectId === null) {
            throw new Error("Missing the required parameter 'projectId' when calling listCCProjectPayments");
          }
          var pathParams = {
            "project_id": projectId
          };
          var queryParams = {
            "blockchain_identifier": opts["UNKNOWN_PARAMETER_NAME"]
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["APIKeyID", "APISecretKey"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = [_CCPayment["default"]];
          return this.apiClient.callApi("/checkout/v1/project/{project_id}/payments", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * List a project's payments 
         * List all payments associated with a project.  `Cost: 0 Credit` (Free) (<a href=\"#section/Pricing\">See Pricing</a>)
         * @param {String} projectId The ID of the project. Created and returned when a project is created.
         * @param {Object} opts Optional parameters
         * @param {module:model/null} opts.UNKNOWN_PARAMETER_NAME Filter payments by a user's wallet identifier (i.e., Solana public key) 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/CCPayment>}
         */
      }, {
        key: "listCCProjectPayments",
        value: function listCCProjectPayments(projectId, opts) {
          return this.listCCProjectPaymentsWithHttpInfo(projectId, opts).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
      }]);
      return CCPaymentApi2;
    }();
    exports["default"] = CCPaymentApi;
  }
});

// node_modules/theblockchainapi/dist/api/CCProjectApi.js
var require_CCProjectApi = __commonJS({
  "node_modules/theblockchainapi/dist/api/CCProjectApi.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    var _CCProject = _interopRequireDefault(require_CCProject());
    var _CCProjectCreateRequest = _interopRequireDefault(require_CCProjectCreateRequest());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var CCProjectApi = function() {
      function CCProjectApi2(apiClient) {
        _classCallCheck(this, CCProjectApi2);
        this.apiClient = apiClient || _ApiClient["default"].instance;
      }
      _createClass(CCProjectApi2, [{
        key: "createCCProjectWithHttpInfo",
        value: function createCCProjectWithHttpInfo(opts) {
          opts = opts || {};
          var postBody = opts["cCProjectCreateRequest"];
          var pathParams = {};
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["APIKeyID", "APISecretKey"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = _CCProject["default"];
          return this.apiClient.callApi("/checkout/v1/project", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * Create a project 
         * A project represents that project or company that is accepting payments.  A project can have products, which can have multiple plans (prices) each.  To create a project, you just need to supply a name and a Solana public key to receive payments.  `Cost: 0 Credit` (Free) (<a href=\"#section/Pricing\">See Pricing</a>)
         * @param {Object} opts Optional parameters
         * @param {module:model/CCProjectCreateRequest} opts.cCProjectCreateRequest 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CCProject}
         */
      }, {
        key: "createCCProject",
        value: function createCCProject(opts) {
          return this.createCCProjectWithHttpInfo(opts).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
        /**
         * Delete a project 
         * Delete a project.  `Cost: 0 Credit` (Free) (<a href=\"#section/Pricing\">See Pricing</a>)
         * @param {String} projectId The ID of the project. Created and returned when a project is created.
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
         */
      }, {
        key: "deleteCCProjectWithHttpInfo",
        value: function deleteCCProjectWithHttpInfo(projectId) {
          var postBody = null;
          if (projectId === void 0 || projectId === null) {
            throw new Error("Missing the required parameter 'projectId' when calling deleteCCProject");
          }
          var pathParams = {
            "project_id": projectId
          };
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["APIKeyID", "APISecretKey"];
          var contentTypes = [];
          var accepts = [];
          var returnType = null;
          return this.apiClient.callApi("/checkout/v1/project/{project_id}", "DELETE", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * Delete a project 
         * Delete a project.  `Cost: 0 Credit` (Free) (<a href=\"#section/Pricing\">See Pricing</a>)
         * @param {String} projectId The ID of the project. Created and returned when a project is created.
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}
         */
      }, {
        key: "deleteCCProject",
        value: function deleteCCProject(projectId) {
          return this.deleteCCProjectWithHttpInfo(projectId).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
        /**
         * Get a project 
         * Retrieve a project.  `Cost: 0 Credit` (Free) (<a href=\"#section/Pricing\">See Pricing</a>)
         * @param {String} projectId The ID of the project. Created and returned when a project is created.
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CCProject} and HTTP response
         */
      }, {
        key: "getCCProjectWithHttpInfo",
        value: function getCCProjectWithHttpInfo(projectId) {
          var postBody = null;
          if (projectId === void 0 || projectId === null) {
            throw new Error("Missing the required parameter 'projectId' when calling getCCProject");
          }
          var pathParams = {
            "project_id": projectId
          };
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["APIKeyID", "APISecretKey"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = _CCProject["default"];
          return this.apiClient.callApi("/checkout/v1/project/{project_id}", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * Get a project 
         * Retrieve a project.  `Cost: 0 Credit` (Free) (<a href=\"#section/Pricing\">See Pricing</a>)
         * @param {String} projectId The ID of the project. Created and returned when a project is created.
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CCProject}
         */
      }, {
        key: "getCCProject",
        value: function getCCProject(projectId) {
          return this.getCCProjectWithHttpInfo(projectId).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
        /**
         * List projects 
         * List all projects associated with an account.  `Cost: 0 Credit` (Free) (<a href=\"#section/Pricing\">See Pricing</a>)
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/CCProject>} and HTTP response
         */
      }, {
        key: "listCCProjectsWithHttpInfo",
        value: function listCCProjectsWithHttpInfo() {
          var postBody = null;
          var pathParams = {};
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["APIKeyID", "APISecretKey"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = [_CCProject["default"]];
          return this.apiClient.callApi("/checkout/v1/projects", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * List projects 
         * List all projects associated with an account.  `Cost: 0 Credit` (Free) (<a href=\"#section/Pricing\">See Pricing</a>)
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/CCProject>}
         */
      }, {
        key: "listCCProjects",
        value: function listCCProjects() {
          return this.listCCProjectsWithHttpInfo().then(function(response_and_data) {
            return response_and_data.data;
          });
        }
        /**
         * Update a project 
         * Retrieve a project.  `Cost: 0 Credit` (Free) (<a href=\"#section/Pricing\">See Pricing</a>)
         * @param {String} projectId The ID of the project. Created and returned when a project is created.
         * @param {Object} opts Optional parameters
         * @param {module:model/CCProject} opts.cCProject 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CCProject} and HTTP response
         */
      }, {
        key: "updateCCProjectWithHttpInfo",
        value: function updateCCProjectWithHttpInfo(projectId, opts) {
          opts = opts || {};
          var postBody = opts["cCProject"];
          if (projectId === void 0 || projectId === null) {
            throw new Error("Missing the required parameter 'projectId' when calling updateCCProject");
          }
          var pathParams = {
            "project_id": projectId
          };
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["APIKeyID", "APISecretKey"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = _CCProject["default"];
          return this.apiClient.callApi("/checkout/v1/project/{project_id}", "PUT", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * Update a project 
         * Retrieve a project.  `Cost: 0 Credit` (Free) (<a href=\"#section/Pricing\">See Pricing</a>)
         * @param {String} projectId The ID of the project. Created and returned when a project is created.
         * @param {Object} opts Optional parameters
         * @param {module:model/CCProject} opts.cCProject 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CCProject}
         */
      }, {
        key: "updateCCProject",
        value: function updateCCProject(projectId, opts) {
          return this.updateCCProjectWithHttpInfo(projectId, opts).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
      }]);
      return CCProjectApi2;
    }();
    exports["default"] = CCProjectApi;
  }
});

// node_modules/theblockchainapi/dist/api/CCWebhookApi.js
var require_CCWebhookApi = __commonJS({
  "node_modules/theblockchainapi/dist/api/CCWebhookApi.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    var _CCWebhook = _interopRequireDefault(require_CCWebhook());
    var _CCWebhookValidateRequest = _interopRequireDefault(require_CCWebhookValidateRequest());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var CCWebhookApi = function() {
      function CCWebhookApi2(apiClient) {
        _classCallCheck(this, CCWebhookApi2);
        this.apiClient = apiClient || _ApiClient["default"].instance;
      }
      _createClass(CCWebhookApi2, [{
        key: "getCCWebhookWithHttpInfo",
        value: function getCCWebhookWithHttpInfo(projectId, webhookIdentifier) {
          var postBody = null;
          if (projectId === void 0 || projectId === null) {
            throw new Error("Missing the required parameter 'projectId' when calling getCCWebhook");
          }
          if (webhookIdentifier === void 0 || webhookIdentifier === null) {
            throw new Error("Missing the required parameter 'webhookIdentifier' when calling getCCWebhook");
          }
          var pathParams = {
            "project_id": projectId,
            "webhook_identifier": webhookIdentifier
          };
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["APIKeyID", "APISecretKey"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = _CCWebhook["default"];
          return this.apiClient.callApi("/webhook/v1/project/{project_id}/webhook/{webhook_identifier}", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * Get a webhook 
         * Retrieve the details of a webhook sent to you.  `Cost: 0 Credit` (Free) (<a href=\"#section/Pricing\">See Pricing</a>)
         * @param {String} projectId The ID of the project. Created and returned when a project is created.
         * @param {String} webhookIdentifier The ID of the webhook. Created and returned when a webhook is sent.
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CCWebhook}
         */
      }, {
        key: "getCCWebhook",
        value: function getCCWebhook(projectId, webhookIdentifier) {
          return this.getCCWebhookWithHttpInfo(projectId, webhookIdentifier).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
        /**
         * List project's webhooks 
         * List all webhooks sent to you and their respective responses from your server.  `Cost: 0 Credit` (Free) (<a href=\"#section/Pricing\">See Pricing</a>)
         * @param {String} projectId The ID of the project. Created and returned when a project is created.
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/CCWebhook>} and HTTP response
         */
      }, {
        key: "listCCProjectWebhooksWithHttpInfo",
        value: function listCCProjectWebhooksWithHttpInfo(projectId) {
          var postBody = null;
          if (projectId === void 0 || projectId === null) {
            throw new Error("Missing the required parameter 'projectId' when calling listCCProjectWebhooks");
          }
          var pathParams = {
            "project_id": projectId
          };
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["APIKeyID", "APISecretKey"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = [_CCWebhook["default"]];
          return this.apiClient.callApi("/webhook/v1/project/{project_id}/webhooks", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * List project's webhooks 
         * List all webhooks sent to you and their respective responses from your server.  `Cost: 0 Credit` (Free) (<a href=\"#section/Pricing\">See Pricing</a>)
         * @param {String} projectId The ID of the project. Created and returned when a project is created.
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/CCWebhook>}
         */
      }, {
        key: "listCCProjectWebhooks",
        value: function listCCProjectWebhooks(projectId) {
          return this.listCCProjectWebhooksWithHttpInfo(projectId).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
        /**
         * Validate a webhook 
         * Validate whether a webhook you received was actually sent from us.  `Cost: 0 Credit` (Free) (<a href=\"#section/Pricing\">See Pricing</a>)
         * @param {String} projectId The ID of the project. Created and returned when a project is created.
         * @param {String} webhookIdentifier The ID of the webhook. Created and returned when a webhook is sent.
         * @param {Object} opts Optional parameters
         * @param {module:model/CCWebhookValidateRequest} opts.cCWebhookValidateRequest 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
         */
      }, {
        key: "validateCCWebhookWithHttpInfo",
        value: function validateCCWebhookWithHttpInfo(projectId, webhookIdentifier, opts) {
          opts = opts || {};
          var postBody = opts["cCWebhookValidateRequest"];
          if (projectId === void 0 || projectId === null) {
            throw new Error("Missing the required parameter 'projectId' when calling validateCCWebhook");
          }
          if (webhookIdentifier === void 0 || webhookIdentifier === null) {
            throw new Error("Missing the required parameter 'webhookIdentifier' when calling validateCCWebhook");
          }
          var pathParams = {
            "project_id": projectId,
            "webhook_identifier": webhookIdentifier
          };
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["APIKeyID", "APISecretKey"];
          var contentTypes = ["application/json"];
          var accepts = [];
          var returnType = null;
          return this.apiClient.callApi("/webhook/v1/project/{project_id}/webhook/{webhook_identifier}/validate", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * Validate a webhook 
         * Validate whether a webhook you received was actually sent from us.  `Cost: 0 Credit` (Free) (<a href=\"#section/Pricing\">See Pricing</a>)
         * @param {String} projectId The ID of the project. Created and returned when a project is created.
         * @param {String} webhookIdentifier The ID of the webhook. Created and returned when a webhook is sent.
         * @param {Object} opts Optional parameters
         * @param {module:model/CCWebhookValidateRequest} opts.cCWebhookValidateRequest 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}
         */
      }, {
        key: "validateCCWebhook",
        value: function validateCCWebhook(projectId, webhookIdentifier, opts) {
          return this.validateCCWebhookWithHttpInfo(projectId, webhookIdentifier, opts).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
      }]);
      return CCWebhookApi2;
    }();
    exports["default"] = CCWebhookApi;
  }
});

// node_modules/theblockchainapi/dist/api/NameServiceApi.js
var require_NameServiceApi = __commonJS({
  "node_modules/theblockchainapi/dist/api/NameServiceApi.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    var _InputBlockchainIdentifier = _interopRequireDefault(require_InputBlockchainIdentifier());
    var _InputName = _interopRequireDefault(require_InputName());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var NameServiceApi = function() {
      function NameServiceApi2(apiClient) {
        _classCallCheck(this, NameServiceApi2);
        this.apiClient = apiClient || _ApiClient["default"].instance;
      }
      _createClass(NameServiceApi2, [{
        key: "getBlockchainIdentifierFromNameWithHttpInfo",
        value: function getBlockchainIdentifierFromNameWithHttpInfo(blockchain, network, opts) {
          opts = opts || {};
          var postBody = opts["inputName"];
          if (blockchain === void 0 || blockchain === null) {
            throw new Error("Missing the required parameter 'blockchain' when calling getBlockchainIdentifierFromName");
          }
          if (network === void 0 || network === null) {
            throw new Error("Missing the required parameter 'network' when calling getBlockchainIdentifierFromName");
          }
          var pathParams = {
            "blockchain": blockchain,
            "network": network
          };
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["APIKeyID", "APISecretKey"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = _InputBlockchainIdentifier["default"];
          return this.apiClient.callApi("/{blockchain}/{network}/name_service/name_to_blockchain_identifier", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * Get the identifier
         * <a href=\"https://github.com/BL0CK-X/blockchain-api/tree/main/examples/name-service/name-to-blockchain-identifier\" target=\"_blank\">See examples (Python, JavaScript) [Coming Soon]</a>.      Get the blockchain identifier from a name.  e.g., Input `vitalik.eth` and output `0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045`  `Cost: 0.25 Credit` (<a href=\"#section/Pricing\">See Pricing</a>)
         * @param {module:model/String} blockchain The blockchain you want to use 
         * @param {String} network The network of the blockchain you selected  - Solana: `devnet`, `mainnet-beta` - Ethereum: `ropsten`, `mainnet`  Defaults when not provided (not applicable to path parameters): - Solana: `devnet` - Ethereum: `ropsten`
         * @param {Object} opts Optional parameters
         * @param {module:model/InputName} opts.inputName 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InputBlockchainIdentifier}
         */
      }, {
        key: "getBlockchainIdentifierFromName",
        value: function getBlockchainIdentifierFromName(blockchain, network, opts) {
          return this.getBlockchainIdentifierFromNameWithHttpInfo(blockchain, network, opts).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
        /**
         * Get the name
         * <a href=\"https://github.com/BL0CK-X/blockchain-api/tree/main/examples/name-service/blockchain-identifier-to-name\" target=\"_blank\">See examples (Python, JavaScript) [Coming Soon]</a>.      Get the name from a blockchain identifier.  e.g., Input `0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045` and output `vitalik.eth`  `Cost: 0.25 Credit` (<a href=\"#section/Pricing\">See Pricing</a>)
         * @param {module:model/String} blockchain The blockchain you want to use 
         * @param {String} network The network of the blockchain you selected  - Solana: `devnet`, `mainnet-beta` - Ethereum: `ropsten`, `mainnet`  Defaults when not provided (not applicable to path parameters): - Solana: `devnet` - Ethereum: `ropsten`
         * @param {Object} opts Optional parameters
         * @param {module:model/InputBlockchainIdentifier} opts.inputBlockchainIdentifier 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InputName} and HTTP response
         */
      }, {
        key: "getNameForBlockchainIdentifierWithHttpInfo",
        value: function getNameForBlockchainIdentifierWithHttpInfo(blockchain, network, opts) {
          opts = opts || {};
          var postBody = opts["inputBlockchainIdentifier"];
          if (blockchain === void 0 || blockchain === null) {
            throw new Error("Missing the required parameter 'blockchain' when calling getNameForBlockchainIdentifier");
          }
          if (network === void 0 || network === null) {
            throw new Error("Missing the required parameter 'network' when calling getNameForBlockchainIdentifier");
          }
          var pathParams = {
            "blockchain": blockchain,
            "network": network
          };
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["APIKeyID", "APISecretKey"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = _InputName["default"];
          return this.apiClient.callApi("/{blockchain}/{network}/name_service/blockchain_identifier_to_name", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * Get the name
         * <a href=\"https://github.com/BL0CK-X/blockchain-api/tree/main/examples/name-service/blockchain-identifier-to-name\" target=\"_blank\">See examples (Python, JavaScript) [Coming Soon]</a>.      Get the name from a blockchain identifier.  e.g., Input `0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045` and output `vitalik.eth`  `Cost: 0.25 Credit` (<a href=\"#section/Pricing\">See Pricing</a>)
         * @param {module:model/String} blockchain The blockchain you want to use 
         * @param {String} network The network of the blockchain you selected  - Solana: `devnet`, `mainnet-beta` - Ethereum: `ropsten`, `mainnet`  Defaults when not provided (not applicable to path parameters): - Solana: `devnet` - Ethereum: `ropsten`
         * @param {Object} opts Optional parameters
         * @param {module:model/InputBlockchainIdentifier} opts.inputBlockchainIdentifier 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InputName}
         */
      }, {
        key: "getNameForBlockchainIdentifier",
        value: function getNameForBlockchainIdentifier(blockchain, network, opts) {
          return this.getNameForBlockchainIdentifierWithHttpInfo(blockchain, network, opts).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
      }]);
      return NameServiceApi2;
    }();
    exports["default"] = NameServiceApi;
  }
});

// node_modules/theblockchainapi/dist/api/SolanaAccountApi.js
var require_SolanaAccountApi = __commonJS({
  "node_modules/theblockchainapi/dist/api/SolanaAccountApi.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    var _Account = _interopRequireDefault(require_Account());
    var _AccountIsCandyMachine = _interopRequireDefault(require_AccountIsCandyMachine());
    var _AccountIsNFT = _interopRequireDefault(require_AccountIsNFT());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var SolanaAccountApi = function() {
      function SolanaAccountApi2(apiClient) {
        _classCallCheck(this, SolanaAccountApi2);
        this.apiClient = apiClient || _ApiClient["default"].instance;
      }
      _createClass(SolanaAccountApi2, [{
        key: "solanaGetAccountWithHttpInfo",
        value: function solanaGetAccountWithHttpInfo(network, publicKey) {
          var postBody = null;
          if (network === void 0 || network === null) {
            throw new Error("Missing the required parameter 'network' when calling solanaGetAccount");
          }
          if (publicKey === void 0 || publicKey === null) {
            throw new Error("Missing the required parameter 'publicKey' when calling solanaGetAccount");
          }
          var pathParams = {
            "network": network,
            "public_key": publicKey
          };
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["APIKeyID", "APISecretKey"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = _Account["default"];
          return this.apiClient.callApi("/solana/account/{network}/{public_key}", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * Get the details of an account on Solana
         * <a href=\"https://github.com/BL0CK-X/the-blockchain-api/tree/main/examples/solana-account/get-account\" target=\"_blank\">See examples (Python, JavaScript)</a>.      Get the details of an account on Solana. Learn more about accounts <a href=\"https://docs.solana.com/developing/programming-model/accounts\" target=\"_blank\">here</a>.  `Cost: 0.25 Credit` (<a href=\"#section/Pricing\">See Pricing</a>)
         * @param {String} network The network ID (devnet, mainnet-beta)
         * @param {String} publicKey The public key of the account
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Account}
         */
      }, {
        key: "solanaGetAccount",
        value: function solanaGetAccount(network, publicKey) {
          return this.solanaGetAccountWithHttpInfo(network, publicKey).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
        /**
         * Get if account is candy machine
         * <a href=\"https://github.com/BL0CK-X/the-blockchain-api/tree/main/examples/solana-account/get-is-candy-machine\" target=\"_blank\">See examples (Python, JavaScript)</a>.      Determine whether or not a public key address corresponds to a candy machine ID or candy machine configuration.  `Cost: 1 Credit` (<a href=\"#section/Pricing\">See Pricing</a>)
         * @param {String} network The network ID (devnet, mainnet-beta)
         * @param {String} publicKey The public key of the account
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AccountIsCandyMachine} and HTTP response
         */
      }, {
        key: "solanaGetAccountIsCandyMachineWithHttpInfo",
        value: function solanaGetAccountIsCandyMachineWithHttpInfo(network, publicKey) {
          var postBody = null;
          if (network === void 0 || network === null) {
            throw new Error("Missing the required parameter 'network' when calling solanaGetAccountIsCandyMachine");
          }
          if (publicKey === void 0 || publicKey === null) {
            throw new Error("Missing the required parameter 'publicKey' when calling solanaGetAccountIsCandyMachine");
          }
          var pathParams = {
            "network": network,
            "public_key": publicKey
          };
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["APIKeyID", "APISecretKey"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = _AccountIsCandyMachine["default"];
          return this.apiClient.callApi("/solana/account/{network}/{public_key}/is_candy_machine", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * Get if account is candy machine
         * <a href=\"https://github.com/BL0CK-X/the-blockchain-api/tree/main/examples/solana-account/get-is-candy-machine\" target=\"_blank\">See examples (Python, JavaScript)</a>.      Determine whether or not a public key address corresponds to a candy machine ID or candy machine configuration.  `Cost: 1 Credit` (<a href=\"#section/Pricing\">See Pricing</a>)
         * @param {String} network The network ID (devnet, mainnet-beta)
         * @param {String} publicKey The public key of the account
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AccountIsCandyMachine}
         */
      }, {
        key: "solanaGetAccountIsCandyMachine",
        value: function solanaGetAccountIsCandyMachine(network, publicKey) {
          return this.solanaGetAccountIsCandyMachineWithHttpInfo(network, publicKey).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
        /**
         * Get if account is NFT
         * <a href=\"https://github.com/BL0CK-X/the-blockchain-api/tree/main/examples/solana-account/get-is-nft\" target=\"_blank\">See examples (Python, JavaScript)</a>.      Determine whether or not a public key is an NFT `mint address`  `Cost: 0.5 Credit` (<a href=\"#section/Pricing\">See Pricing</a>)
         * @param {String} network The network ID (devnet, mainnet-beta)
         * @param {String} publicKey The public key of the account
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AccountIsNFT} and HTTP response
         */
      }, {
        key: "solanaGetAccountIsNFTWithHttpInfo",
        value: function solanaGetAccountIsNFTWithHttpInfo(network, publicKey) {
          var postBody = null;
          if (network === void 0 || network === null) {
            throw new Error("Missing the required parameter 'network' when calling solanaGetAccountIsNFT");
          }
          if (publicKey === void 0 || publicKey === null) {
            throw new Error("Missing the required parameter 'publicKey' when calling solanaGetAccountIsNFT");
          }
          var pathParams = {
            "network": network,
            "public_key": publicKey
          };
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["APIKeyID", "APISecretKey"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = _AccountIsNFT["default"];
          return this.apiClient.callApi("/solana/account/{network}/{public_key}/is_nft", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * Get if account is NFT
         * <a href=\"https://github.com/BL0CK-X/the-blockchain-api/tree/main/examples/solana-account/get-is-nft\" target=\"_blank\">See examples (Python, JavaScript)</a>.      Determine whether or not a public key is an NFT `mint address`  `Cost: 0.5 Credit` (<a href=\"#section/Pricing\">See Pricing</a>)
         * @param {String} network The network ID (devnet, mainnet-beta)
         * @param {String} publicKey The public key of the account
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AccountIsNFT}
         */
      }, {
        key: "solanaGetAccountIsNFT",
        value: function solanaGetAccountIsNFT(network, publicKey) {
          return this.solanaGetAccountIsNFTWithHttpInfo(network, publicKey).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
      }]);
      return SolanaAccountApi2;
    }();
    exports["default"] = SolanaAccountApi;
  }
});

// node_modules/theblockchainapi/dist/api/SolanaCandyMachineApi.js
var require_SolanaCandyMachineApi = __commonJS({
  "node_modules/theblockchainapi/dist/api/SolanaCandyMachineApi.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    var _CandyMachineSearchRequest = _interopRequireDefault(require_CandyMachineSearchRequest());
    var _GetAllNFTsResponse = _interopRequireDefault(require_GetAllNFTsResponse());
    var _GetCandyMetadataErrorResponse = _interopRequireDefault(require_GetCandyMetadataErrorResponse());
    var _GetCandyMetadataRequest = _interopRequireDefault(require_GetCandyMetadataRequest());
    var _GetCandyMetadataResponse = _interopRequireDefault(require_GetCandyMetadataResponse());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var SolanaCandyMachineApi = function() {
      function SolanaCandyMachineApi2(apiClient) {
        _classCallCheck(this, SolanaCandyMachineApi2);
        this.apiClient = apiClient || _ApiClient["default"].instance;
      }
      _createClass(SolanaCandyMachineApi2, [{
        key: "solanaGetAllNFTsFromCandyMachineWithHttpInfo",
        value: function solanaGetAllNFTsFromCandyMachineWithHttpInfo(network, candyMachineId) {
          var postBody = null;
          if (network === void 0 || network === null) {
            throw new Error("Missing the required parameter 'network' when calling solanaGetAllNFTsFromCandyMachine");
          }
          if (candyMachineId === void 0 || candyMachineId === null) {
            throw new Error("Missing the required parameter 'candyMachineId' when calling solanaGetAllNFTsFromCandyMachine");
          }
          var pathParams = {
            "network": network,
            "candy_machine_id": candyMachineId
          };
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["APIKeyID", "APISecretKey"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = _GetAllNFTsResponse["default"];
          return this.apiClient.callApi("/solana/nft/candy_machine/{network}/{candy_machine_id}/nfts", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * Get CM's NFTs  
         * <a href=\"https://github.com/BL0CK-X/the-blockchain-api/tree/main/examples/solana-candy-machine/get-candy-machine-all-nfts\" target=\"_blank\"> See examples (Python, JavaScript)</a>.  Use this endpoint to get the list of all NFTs (minted and unminted) from a Solana Candy Machine.  This works for `v1` and `v2` candy machines.   *However*, for `v2` only the value for `all_nfts` is provided. To determine which are minted and unminted follow this example.  You do not need to specify `v1` or `v2` for this endpoint as it will automatically determine it from the candy machine ID.  See example for how to get the list of NFT hashes <a href=\"https://github.com/BL0CK-X/the-blockchain-api/tree/main/examples/solana-candy-machine/get-candy-machine-hash-table\" target=\"_blank\">here</a>.    `Cost: 2 Credits` (<a href=\"#section/Pricing\">See Pricing</a>)
         * @param {module:model/String} network The network ID
         * @param {String} candyMachineId The ID of the candy machine
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetAllNFTsResponse}
         */
      }, {
        key: "solanaGetAllNFTsFromCandyMachine",
        value: function solanaGetAllNFTsFromCandyMachine(network, candyMachineId) {
          return this.solanaGetAllNFTsFromCandyMachineWithHttpInfo(network, candyMachineId).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
        /**
         * Get a CM's metadata 
         * <a href=\"https://github.com/BL0CK-X/the-blockchain-api/tree/main/examples/solana-candy-machine/get-candy-machine-metadata\" target=\"_blank\">See examples (Python, JavaScript)</a>.  Use this endpoint to get metadata about a Metaplex candy machine. This includes the goLiveDate, itemsAvailable, and itemsRedeemed. To see what is included, expand the green successful response below.  NOTE: Supply exactly one of `candy_machine_id`, `config_address`, or `uuid`. If you provide more than one, you will receive a `400` error.   `Cost: 2 Credits` (<a href=\"#section/Pricing\">See Pricing</a>)
         * @param {Object} opts Optional parameters
         * @param {module:model/GetCandyMetadataRequest} opts.getCandyMetadataRequest 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetCandyMetadataResponse} and HTTP response
         */
      }, {
        key: "solanaGetCandyMachineMetadataWithHttpInfo",
        value: function solanaGetCandyMachineMetadataWithHttpInfo(opts) {
          opts = opts || {};
          var postBody = opts["getCandyMetadataRequest"];
          var pathParams = {};
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["APIKeyID", "APISecretKey"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = _GetCandyMetadataResponse["default"];
          return this.apiClient.callApi("/solana/nft/candy_machine/metadata", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * Get a CM's metadata 
         * <a href=\"https://github.com/BL0CK-X/the-blockchain-api/tree/main/examples/solana-candy-machine/get-candy-machine-metadata\" target=\"_blank\">See examples (Python, JavaScript)</a>.  Use this endpoint to get metadata about a Metaplex candy machine. This includes the goLiveDate, itemsAvailable, and itemsRedeemed. To see what is included, expand the green successful response below.  NOTE: Supply exactly one of `candy_machine_id`, `config_address`, or `uuid`. If you provide more than one, you will receive a `400` error.   `Cost: 2 Credits` (<a href=\"#section/Pricing\">See Pricing</a>)
         * @param {Object} opts Optional parameters
         * @param {module:model/GetCandyMetadataRequest} opts.getCandyMetadataRequest 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetCandyMetadataResponse}
         */
      }, {
        key: "solanaGetCandyMachineMetadata",
        value: function solanaGetCandyMachineMetadata(opts) {
          return this.solanaGetCandyMachineMetadataWithHttpInfo(opts).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
        /**
         * List all CMs
         * <a href=\"https://github.com/BL0CK-X/the-blockchain-api/tree/main/examples/solana-candy-machine/list-all-candy-machines\" target=\"_blank\">See examples (Python, JavaScript)</a>.  With this endpoint, you can list all candy machines published to Solana mainnet.  We update this data every 15 minutes.  The output is a list of config addresses, currently about 17000 in length.  `Cost: 2 Credits` (<a href=\"#section/Pricing\">See Pricing</a>)
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
         */
      }, {
        key: "solanaListAllCandyMachinesWithHttpInfo",
        value: function solanaListAllCandyMachinesWithHttpInfo() {
          var postBody = null;
          var pathParams = {};
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["APIKeyID", "APISecretKey"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = Object;
          return this.apiClient.callApi("/solana/nft/candy_machine/list", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * List all CMs
         * <a href=\"https://github.com/BL0CK-X/the-blockchain-api/tree/main/examples/solana-candy-machine/list-all-candy-machines\" target=\"_blank\">See examples (Python, JavaScript)</a>.  With this endpoint, you can list all candy machines published to Solana mainnet.  We update this data every 15 minutes.  The output is a list of config addresses, currently about 17000 in length.  `Cost: 2 Credits` (<a href=\"#section/Pricing\">See Pricing</a>)
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
         */
      }, {
        key: "solanaListAllCandyMachines",
        value: function solanaListAllCandyMachines() {
          return this.solanaListAllCandyMachinesWithHttpInfo().then(function(response_and_data) {
            return response_and_data.data;
          });
        }
        /**
         * Search CMs
         * <a href=\"https://github.com/BL0CK-X/the-blockchain-api/tree/main/examples/solana-candy-machine/search-candy-machines\" target=\"_blank\">See examples (Python, JavaScript)</a>.  With this endpoint, you can search candy machines by their symbol, name of NFTs, uuid, configuration address, and update authority.  The output is a list of config addresses.  You can also provide multiple search clauses, such as the update authority (`update_authority=\"G17UmNGnMJ851x3M1JXocgpft1afcYedjPuFpo1ohhCk\"`) and symbol begins with \"Sol\" (`symbol=\"Sol\", symbol_search_method='begins_with'`).  `Cost: 2 Credits` (<a href=\"#section/Pricing\">See Pricing</a>)
         * @param {Object} opts Optional parameters
         * @param {module:model/CandyMachineSearchRequest} opts.candyMachineSearchRequest 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<String>} and HTTP response
         */
      }, {
        key: "solanaSearchCandyMachinesWithHttpInfo",
        value: function solanaSearchCandyMachinesWithHttpInfo(opts) {
          opts = opts || {};
          var postBody = opts["candyMachineSearchRequest"];
          var pathParams = {};
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["APIKeyID", "APISecretKey"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = ["String"];
          return this.apiClient.callApi("/solana/nft/candy_machine/search", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * Search CMs
         * <a href=\"https://github.com/BL0CK-X/the-blockchain-api/tree/main/examples/solana-candy-machine/search-candy-machines\" target=\"_blank\">See examples (Python, JavaScript)</a>.  With this endpoint, you can search candy machines by their symbol, name of NFTs, uuid, configuration address, and update authority.  The output is a list of config addresses.  You can also provide multiple search clauses, such as the update authority (`update_authority=\"G17UmNGnMJ851x3M1JXocgpft1afcYedjPuFpo1ohhCk\"`) and symbol begins with \"Sol\" (`symbol=\"Sol\", symbol_search_method='begins_with'`).  `Cost: 2 Credits` (<a href=\"#section/Pricing\">See Pricing</a>)
         * @param {Object} opts Optional parameters
         * @param {module:model/CandyMachineSearchRequest} opts.candyMachineSearchRequest 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<String>}
         */
      }, {
        key: "solanaSearchCandyMachines",
        value: function solanaSearchCandyMachines(opts) {
          return this.solanaSearchCandyMachinesWithHttpInfo(opts).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
      }]);
      return SolanaCandyMachineApi2;
    }();
    exports["default"] = SolanaCandyMachineApi;
  }
});

// node_modules/theblockchainapi/dist/api/SolanaNFTApi.js
var require_SolanaNFTApi = __commonJS({
  "node_modules/theblockchainapi/dist/api/SolanaNFTApi.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    var _GetCandyMachineIDRequest = _interopRequireDefault(require_GetCandyMachineIDRequest());
    var _GetCandyMachineIDResponse = _interopRequireDefault(require_GetCandyMachineIDResponse());
    var _NFT = _interopRequireDefault(require_NFT());
    var _NFTMintErrorResponse = _interopRequireDefault(require_NFTMintErrorResponse());
    var _NFTMintFee = _interopRequireDefault(require_NFTMintFee());
    var _NFTMintRequest = _interopRequireDefault(require_NFTMintRequest());
    var _NFTOwnerAdvancedResponse = _interopRequireDefault(require_NFTOwnerAdvancedResponse());
    var _NFTOwnerResponse = _interopRequireDefault(require_NFTOwnerResponse());
    var _NFTSearchRequest = _interopRequireDefault(require_NFTSearchRequest());
    var _NFTSearchResponse = _interopRequireDefault(require_NFTSearchResponse());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var SolanaNFTApi = function() {
      function SolanaNFTApi2(apiClient) {
        _classCallCheck(this, SolanaNFTApi2);
        this.apiClient = apiClient || _ApiClient["default"].instance;
      }
      _createClass(SolanaNFTApi2, [{
        key: "solanaCreateNFTWithHttpInfo",
        value: function solanaCreateNFTWithHttpInfo(opts) {
          opts = opts || {};
          var postBody = opts["nFTMintRequest"];
          var pathParams = {};
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["APIKeyID", "APISecretKey"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = _NFT["default"];
          return this.apiClient.callApi("/solana/nft", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * Create an NFT on Solana
         * <a href=\"https://github.com/BL0CK-X/the-blockchain-api/tree/main/examples/solana-nft/create-an-nft\" target=\"_blank\">See examples (Python, JavaScript)</a>.  Create a Metaplex NFT on Solana.   Read more on this <a href=\"https://blog.blockchainapi.com/2021/11/16/a-note-on-nfts.html\" target=\"_blank\">here</a>.  Note: Please see <a href=\"https://blog.blockchainapi.com/2022/01/18/how-to-format-off-chain-nft-metadata.html\" target=\"_blank\">this article</a> to learn more about what `nft_upload_method` means and how storing the metadata of an NFT works.  If you're using `nft_upload_method = \"LINK\"`, then to add attributes to the NFT or an image, add them to a JSON file and upload that to Arweave/IPFS/Filecoin. See the JSON format <a href=\"https://blog.blockchainapi.com/2022/01/18/how-to-format-off-chain-nft-metadata.html\">here</a>.  Then supply the link to the JSON file in `nft_url`.   NOTE: Don't use `nft_metadata`. Values provided here do not do anything at the moment. We are fixing this soon.  `Cost: 5 Credits` (<a href=\"#section/Pricing\">See Pricing</a>)
         * @param {Object} opts Optional parameters
         * @param {module:model/NFTMintRequest} opts.nFTMintRequest 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/NFT}
         */
      }, {
        key: "solanaCreateNFT",
        value: function solanaCreateNFT(opts) {
          return this.solanaCreateNFTWithHttpInfo(opts).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
        /**
         * Get an NFT's metadata
         * <a href=\"https://github.com/BL0CK-X/the-blockchain-api/tree/main/examples/solana-nft/get-nft-metadata\" target=\"_blank\">See examples (Python, JavaScript)</a>.       Get the metadata of an NFT.  If you're looking for metadata such as attributes and others, you can retrieve them from the link in the URI field of the NFT metadata returned. See the example on the right. The URI is an Arweave URL. That contains the attributes and other information about the NFT. That URL is stored on the Solana blockchain.  `Cost: 0.25 Credit` (<a href=\"#section/Pricing\">See Pricing</a>)
         * @param {module:model/String} network The network ID
         * @param {String} mintAddress The mint address of the NFT
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/NFT} and HTTP response
         */
      }, {
        key: "solanaGetNFTWithHttpInfo",
        value: function solanaGetNFTWithHttpInfo(network, mintAddress) {
          var postBody = null;
          if (network === void 0 || network === null) {
            throw new Error("Missing the required parameter 'network' when calling solanaGetNFT");
          }
          if (mintAddress === void 0 || mintAddress === null) {
            throw new Error("Missing the required parameter 'mintAddress' when calling solanaGetNFT");
          }
          var pathParams = {
            "network": network,
            "mint_address": mintAddress
          };
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["APIKeyID", "APISecretKey"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = _NFT["default"];
          return this.apiClient.callApi("/solana/nft/{network}/{mint_address}", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * Get an NFT's metadata
         * <a href=\"https://github.com/BL0CK-X/the-blockchain-api/tree/main/examples/solana-nft/get-nft-metadata\" target=\"_blank\">See examples (Python, JavaScript)</a>.       Get the metadata of an NFT.  If you're looking for metadata such as attributes and others, you can retrieve them from the link in the URI field of the NFT metadata returned. See the example on the right. The URI is an Arweave URL. That contains the attributes and other information about the NFT. That URL is stored on the Solana blockchain.  `Cost: 0.25 Credit` (<a href=\"#section/Pricing\">See Pricing</a>)
         * @param {module:model/String} network The network ID
         * @param {String} mintAddress The mint address of the NFT
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/NFT}
         */
      }, {
        key: "solanaGetNFT",
        value: function solanaGetNFT(network, mintAddress) {
          return this.solanaGetNFTWithHttpInfo(network, mintAddress).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
        /**
         * Get the NFT mint fee
         * <a href=\"https://github.com/BL0CK-X/the-blockchain-api/tree/main/examples/solana-nft/get-nft-mint-fee\" target=\"_blank\">See examples (Python, JavaScript)</a>.      Get the estimated fee for minting an NFT on the Solana blockchain using the Metaplex protocol.  `Cost: 0 Credit` (Free) (<a href=\"#section/Pricing\">See Pricing</a>)
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/NFTMintFee} and HTTP response
         */
      }, {
        key: "solanaGetNFTMintFeeWithHttpInfo",
        value: function solanaGetNFTMintFeeWithHttpInfo() {
          var postBody = null;
          var pathParams = {};
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["APIKeyID", "APISecretKey"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = _NFTMintFee["default"];
          return this.apiClient.callApi("/solana/nft/mint/fee", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * Get the NFT mint fee
         * <a href=\"https://github.com/BL0CK-X/the-blockchain-api/tree/main/examples/solana-nft/get-nft-mint-fee\" target=\"_blank\">See examples (Python, JavaScript)</a>.      Get the estimated fee for minting an NFT on the Solana blockchain using the Metaplex protocol.  `Cost: 0 Credit` (Free) (<a href=\"#section/Pricing\">See Pricing</a>)
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/NFTMintFee}
         */
      }, {
        key: "solanaGetNFTMintFee",
        value: function solanaGetNFTMintFee() {
          return this.solanaGetNFTMintFeeWithHttpInfo().then(function(response_and_data) {
            return response_and_data.data;
          });
        }
        /**
         * Get owner of an NFT
         * <a href=\"https://github.com/BL0CK-X/the-blockchain-api/tree/main/examples/solana-nft/get-nft-owner\" target=\"_blank\">See examples (Python, JavaScript)</a>.       Get the owner of an NFT. This returns the public key of the wallet that owns the associated token account that owns the NFT.  If you want to get the associated token account that literally owns the NFT, derive the associated token account address from the public key returned and the NFT mint address using <a href=\"#operation/solanaDeriveAssociatedTokenAccountAddress\">this endpoint</a>.  `Cost: 0.25 Credit` (<a href=\"#section/Pricing\">See Pricing</a>)
         * @param {module:model/String} network The network ID
         * @param {String} mintAddress The mint address of the NFT
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/NFTOwnerResponse} and HTTP response
         */
      }, {
        key: "solanaGetNFTOwnerWithHttpInfo",
        value: function solanaGetNFTOwnerWithHttpInfo(network, mintAddress) {
          var postBody = null;
          if (network === void 0 || network === null) {
            throw new Error("Missing the required parameter 'network' when calling solanaGetNFTOwner");
          }
          if (mintAddress === void 0 || mintAddress === null) {
            throw new Error("Missing the required parameter 'mintAddress' when calling solanaGetNFTOwner");
          }
          var pathParams = {
            "network": network,
            "mint_address": mintAddress
          };
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["APIKeyID", "APISecretKey"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = _NFTOwnerResponse["default"];
          return this.apiClient.callApi("/solana/nft/{network}/{mint_address}/owner", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * Get owner of an NFT
         * <a href=\"https://github.com/BL0CK-X/the-blockchain-api/tree/main/examples/solana-nft/get-nft-owner\" target=\"_blank\">See examples (Python, JavaScript)</a>.       Get the owner of an NFT. This returns the public key of the wallet that owns the associated token account that owns the NFT.  If you want to get the associated token account that literally owns the NFT, derive the associated token account address from the public key returned and the NFT mint address using <a href=\"#operation/solanaDeriveAssociatedTokenAccountAddress\">this endpoint</a>.  `Cost: 0.25 Credit` (<a href=\"#section/Pricing\">See Pricing</a>)
         * @param {module:model/String} network The network ID
         * @param {String} mintAddress The mint address of the NFT
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/NFTOwnerResponse}
         */
      }, {
        key: "solanaGetNFTOwner",
        value: function solanaGetNFTOwner(network, mintAddress) {
          return this.solanaGetNFTOwnerWithHttpInfo(network, mintAddress).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
        /**
         * Get owner of an NFT (advanced)
         * <a href=\"https://github.com/BL0CK-X/the-blockchain-api/tree/main/examples/solana-nft/get-nft-owner\" target=\"_blank\">See examples (Python, JavaScript)</a>.       Get the owner, state, listed price, and listed marketplace (if any) of an NFT.   Here's are a couple of example responses: ``` {     'contract': {         'contract_blockchain_identifier': 'M2mx93ekt1fmXSVkTrUL9xVFHkmME8HTUi5Cyc5aF7K',          'contract_id': 'magic-eden-v2',          'contract_name': 'Magic Eden v2',          'contract_type': 'marketplace'     },      'owner': '25UJMR3FiMM6noQtPEaCJ6eDU2YQ7myDhikVQXmMuSRW',      'price': 50000000,      'state': 'listing' } ```  ``` {     'contract': null,      'owner': 'C37PJiJU8WTgoUoFqmB1Maw8hkuENDZoGDQA1pm54Fdd',      'price': null,      'state': 'holding' } ```  This function will return whether the NFT is `listed`, `loaned` (Yawww NFT loans), `otc`, `staked`, `burned`, or `held`.  If listed, it will return the contract, the readable name of the contract (e.g., Magic Eden, OpenSea), the contract ID (if any; e.g., open-sea), the owner, and the listed price. From this, you can get the floor of a collection. We currently support Magic Eden (v1, v2), Exchange.Art (auction, singles), CoralCube, Solanart (v1, v2), Yawww Loans, Yawww OTC, OpenSea, Fractal, SolSea, and AlphaArt.   If loaned, it will return the loan requester as the owner, the loan amount, and the loan contract. We only support the Yawww loaning contract.  If listed on an OTC marketplace, it will return the same information as `listed`. OTC is used to distinguish between marketplaces that respect royalties (OTC) and those that don't (normal ones). The only `OTC` contract we track is Yawwww, at the moment. We do not yet track Solanart v3.  If staked, it will return the owner and the staking contract public key.  If burned, it will return the `burner` as the `owner`.  If held, it will simply return the owner.  If you want to get the literal owner, which may or may not be the same as the owner returned here, call the simplified [get NFT owner function](/#tag/Solana-NFT/operation/solanaGetNFTOwner). For example, Bob might own the NFT, but if it is listed on Magic Eden, then the NFT is held in escrow and \"owned\" by Magic Eden. The simplified function will return Magic Eden as the owner (the literal owner). This advanced function will tell you the implied owner, which would be Bob.  `Cost: 1.0 Credit` (<a href=\"#section/Pricing\">See Pricing</a>)
         * @param {module:model/String} network The network ID
         * @param {String} mintAddress The mint address of the NFT
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/NFTOwnerAdvancedResponse} and HTTP response
         */
      }, {
        key: "solanaGetNFTOwnerAdvancedWithHttpInfo",
        value: function solanaGetNFTOwnerAdvancedWithHttpInfo(network, mintAddress) {
          var postBody = null;
          if (network === void 0 || network === null) {
            throw new Error("Missing the required parameter 'network' when calling solanaGetNFTOwnerAdvanced");
          }
          if (mintAddress === void 0 || mintAddress === null) {
            throw new Error("Missing the required parameter 'mintAddress' when calling solanaGetNFTOwnerAdvanced");
          }
          var pathParams = {
            "network": network,
            "mint_address": mintAddress
          };
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["APIKeyID", "APISecretKey"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = _NFTOwnerAdvancedResponse["default"];
          return this.apiClient.callApi("/solana/nft/{network}/{mint_address}/owner_advanced", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * Get owner of an NFT (advanced)
         * <a href=\"https://github.com/BL0CK-X/the-blockchain-api/tree/main/examples/solana-nft/get-nft-owner\" target=\"_blank\">See examples (Python, JavaScript)</a>.       Get the owner, state, listed price, and listed marketplace (if any) of an NFT.   Here's are a couple of example responses: ``` {     'contract': {         'contract_blockchain_identifier': 'M2mx93ekt1fmXSVkTrUL9xVFHkmME8HTUi5Cyc5aF7K',          'contract_id': 'magic-eden-v2',          'contract_name': 'Magic Eden v2',          'contract_type': 'marketplace'     },      'owner': '25UJMR3FiMM6noQtPEaCJ6eDU2YQ7myDhikVQXmMuSRW',      'price': 50000000,      'state': 'listing' } ```  ``` {     'contract': null,      'owner': 'C37PJiJU8WTgoUoFqmB1Maw8hkuENDZoGDQA1pm54Fdd',      'price': null,      'state': 'holding' } ```  This function will return whether the NFT is `listed`, `loaned` (Yawww NFT loans), `otc`, `staked`, `burned`, or `held`.  If listed, it will return the contract, the readable name of the contract (e.g., Magic Eden, OpenSea), the contract ID (if any; e.g., open-sea), the owner, and the listed price. From this, you can get the floor of a collection. We currently support Magic Eden (v1, v2), Exchange.Art (auction, singles), CoralCube, Solanart (v1, v2), Yawww Loans, Yawww OTC, OpenSea, Fractal, SolSea, and AlphaArt.   If loaned, it will return the loan requester as the owner, the loan amount, and the loan contract. We only support the Yawww loaning contract.  If listed on an OTC marketplace, it will return the same information as `listed`. OTC is used to distinguish between marketplaces that respect royalties (OTC) and those that don't (normal ones). The only `OTC` contract we track is Yawwww, at the moment. We do not yet track Solanart v3.  If staked, it will return the owner and the staking contract public key.  If burned, it will return the `burner` as the `owner`.  If held, it will simply return the owner.  If you want to get the literal owner, which may or may not be the same as the owner returned here, call the simplified [get NFT owner function](/#tag/Solana-NFT/operation/solanaGetNFTOwner). For example, Bob might own the NFT, but if it is listed on Magic Eden, then the NFT is held in escrow and \"owned\" by Magic Eden. The simplified function will return Magic Eden as the owner (the literal owner). This advanced function will tell you the implied owner, which would be Bob.  `Cost: 1.0 Credit` (<a href=\"#section/Pricing\">See Pricing</a>)
         * @param {module:model/String} network The network ID
         * @param {String} mintAddress The mint address of the NFT
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/NFTOwnerAdvancedResponse}
         */
      }, {
        key: "solanaGetNFTOwnerAdvanced",
        value: function solanaGetNFTOwnerAdvanced(network, mintAddress) {
          return this.solanaGetNFTOwnerAdvancedWithHttpInfo(network, mintAddress).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
        /**
         * Get the ID of the candy machine of an NFT 
         * <a href=\"https://github.com/BL0CK-X/the-blockchain-api/tree/main/examples/solana-nft/get-nft-candy-machine-id\" target=\"_blank\">See examples (Python, JavaScript)</a>.  Get the candy machine ID from where the NFT came, if any. NFTs can also be minted without a candy machine.  It's also possible that we return \"Not Found\" when the NFT actually did come from a version of a candy machine. We check for the most popular versions of candy machine, but it is possible that someone creates their own candy machine version and mints NFTs from it.  `Cost: 1 Credit` (<a href=\"#section/Pricing\">See Pricing</a>)
         * @param {Object} opts Optional parameters
         * @param {module:model/GetCandyMachineIDRequest} opts.getCandyMachineIDRequest 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetCandyMachineIDResponse} and HTTP response
         */
      }, {
        key: "solanaGetNFTsCandyMachineIdWithHttpInfo",
        value: function solanaGetNFTsCandyMachineIdWithHttpInfo(opts) {
          opts = opts || {};
          var postBody = opts["getCandyMachineIDRequest"];
          var pathParams = {};
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["APIKeyID", "APISecretKey"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = _GetCandyMachineIDResponse["default"];
          return this.apiClient.callApi("/solana/nft/candy_machine_id", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * Get the ID of the candy machine of an NFT 
         * <a href=\"https://github.com/BL0CK-X/the-blockchain-api/tree/main/examples/solana-nft/get-nft-candy-machine-id\" target=\"_blank\">See examples (Python, JavaScript)</a>.  Get the candy machine ID from where the NFT came, if any. NFTs can also be minted without a candy machine.  It's also possible that we return \"Not Found\" when the NFT actually did come from a version of a candy machine. We check for the most popular versions of candy machine, but it is possible that someone creates their own candy machine version and mints NFTs from it.  `Cost: 1 Credit` (<a href=\"#section/Pricing\">See Pricing</a>)
         * @param {Object} opts Optional parameters
         * @param {module:model/GetCandyMachineIDRequest} opts.getCandyMachineIDRequest 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetCandyMachineIDResponse}
         */
      }, {
        key: "solanaGetNFTsCandyMachineId",
        value: function solanaGetNFTsCandyMachineId(opts) {
          return this.solanaGetNFTsCandyMachineIdWithHttpInfo(opts).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
        /**
         * Search NFTs on Solana
         * <a href=\"https://github.com/BL0CK-X/the-blockchain-api/tree/main/examples/solana-nft/search-nfts\" target=\"_blank\">See examples (Python, JavaScript)</a>.  With this endpoint, you can search for NFTs by their symbol, name of NFTs, uuid, configuration address, and update authority.  The output is a list of NFTs that match your query.  You can also provide multiple search clauses, such as the update authority (`update_authority=\"G17UmNGnMJ851x3M1JXocgpft1afcYedjPuFpo1ohhCk\"`) and symbol begins with \"Sol\" (`symbol=\"Sol\", symbol_search_method='begins_with'`).  `Cost: 1 Credit` (<a href=\"#section/Pricing\">See Pricing</a>)
         * @param {Object} opts Optional parameters
         * @param {module:model/NFTSearchRequest} opts.nFTSearchRequest 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/NFTSearchResponse>} and HTTP response
         */
      }, {
        key: "solanaSearchNFTsWithHttpInfo",
        value: function solanaSearchNFTsWithHttpInfo(opts) {
          opts = opts || {};
          var postBody = opts["nFTSearchRequest"];
          var pathParams = {};
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["APIKeyID", "APISecretKey"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = [_NFTSearchResponse["default"]];
          return this.apiClient.callApi("/solana/nft/search", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * Search NFTs on Solana
         * <a href=\"https://github.com/BL0CK-X/the-blockchain-api/tree/main/examples/solana-nft/search-nfts\" target=\"_blank\">See examples (Python, JavaScript)</a>.  With this endpoint, you can search for NFTs by their symbol, name of NFTs, uuid, configuration address, and update authority.  The output is a list of NFTs that match your query.  You can also provide multiple search clauses, such as the update authority (`update_authority=\"G17UmNGnMJ851x3M1JXocgpft1afcYedjPuFpo1ohhCk\"`) and symbol begins with \"Sol\" (`symbol=\"Sol\", symbol_search_method='begins_with'`).  `Cost: 1 Credit` (<a href=\"#section/Pricing\">See Pricing</a>)
         * @param {Object} opts Optional parameters
         * @param {module:model/NFTSearchRequest} opts.nFTSearchRequest 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/NFTSearchResponse>}
         */
      }, {
        key: "solanaSearchNFTs",
        value: function solanaSearchNFTs(opts) {
          return this.solanaSearchNFTsWithHttpInfo(opts).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
      }]);
      return SolanaNFTApi2;
    }();
    exports["default"] = SolanaNFTApi;
  }
});

// node_modules/theblockchainapi/dist/api/SolanaSPLTokenApi.js
var require_SolanaSPLTokenApi = __commonJS({
  "node_modules/theblockchainapi/dist/api/SolanaSPLTokenApi.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    var _GetSPLTokenResponse = _interopRequireDefault(require_GetSPLTokenResponse());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var SolanaSPLTokenApi = function() {
      function SolanaSPLTokenApi2(apiClient) {
        _classCallCheck(this, SolanaSPLTokenApi2);
        this.apiClient = apiClient || _ApiClient["default"].instance;
      }
      _createClass(SolanaSPLTokenApi2, [{
        key: "solanaGetSPLTokenWithHttpInfo",
        value: function solanaGetSPLTokenWithHttpInfo(publicKey, network) {
          var postBody = null;
          if (publicKey === void 0 || publicKey === null) {
            throw new Error("Missing the required parameter 'publicKey' when calling solanaGetSPLToken");
          }
          if (network === void 0 || network === null) {
            throw new Error("Missing the required parameter 'network' when calling solanaGetSPLToken");
          }
          var pathParams = {
            "public_key": publicKey,
            "network": network
          };
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["APIKeyID", "APISecretKey"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = _GetSPLTokenResponse["default"];
          return this.apiClient.callApi("/solana/spl-token/{network}/{public_key}", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * Get SPL token metadata
         * <a href=\"https://github.com/BL0CK-X/the-blockchain-api/tree/main/examples/solana-spl-token/get-spl-token\" target=\"_blank\">See examples (Python, JavaScript)</a>.  Retrieves basic information about an SPL token given its `mint_address`.  You can see the mint addresses of popular SPL tokens <a href=\"https://raw.githubusercontent.com/solana-labs/token-list/main/src/tokens/solana.tokenlist.json\" target=\"_blank\">here</a>.  Some example mint addresses of SPL tokens: - USDC: EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v - Mango: MangoCzJ36AjZyKwVj3VnYU4GTonjfVEnJmvvWaxLac - Serum: SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt - Raydium: 4k3Dyjzvzp8eMZWUXbBCjEvwSkkk59S5iCNLY3QrkX6R - wSOL: So11111111111111111111111111111111111111112 - ATLAS: ATLASXmbPQxBUYbxPsV97usA3fPQYEqzQBUHgiFCUsXx  `Cost: 1 Credit` (<a href=\"#section/Pricing\">See Pricing</a>)
         * @param {String} publicKey The public key of the token
         * @param {String} network The network ID (devnet, mainnet-beta)
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetSPLTokenResponse}
         */
      }, {
        key: "solanaGetSPLToken",
        value: function solanaGetSPLToken(publicKey, network) {
          return this.solanaGetSPLTokenWithHttpInfo(publicKey, network).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
      }]);
      return SolanaSPLTokenApi2;
    }();
    exports["default"] = SolanaSPLTokenApi;
  }
});

// node_modules/theblockchainapi/dist/api/SolanaTransactionApi.js
var require_SolanaTransactionApi = __commonJS({
  "node_modules/theblockchainapi/dist/api/SolanaTransactionApi.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    var _Transaction = _interopRequireDefault(require_Transaction());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var SolanaTransactionApi = function() {
      function SolanaTransactionApi2(apiClient) {
        _classCallCheck(this, SolanaTransactionApi2);
        this.apiClient = apiClient || _ApiClient["default"].instance;
      }
      _createClass(SolanaTransactionApi2, [{
        key: "solanaGetTransactionWithHttpInfo",
        value: function solanaGetTransactionWithHttpInfo(network, txSignature) {
          var postBody = null;
          if (network === void 0 || network === null) {
            throw new Error("Missing the required parameter 'network' when calling solanaGetTransaction");
          }
          if (txSignature === void 0 || txSignature === null) {
            throw new Error("Missing the required parameter 'txSignature' when calling solanaGetTransaction");
          }
          var pathParams = {
            "network": network,
            "tx_signature": txSignature
          };
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["APIKeyID", "APISecretKey"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = _Transaction["default"];
          return this.apiClient.callApi("/solana/transaction/{network}/{tx_signature}", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * Get the details of a transaction made on Solana
         * <a href=\"https://github.com/BL0CK-X/the-blockchain-api/tree/main/examples/solana-transaction/get-transaction\" target=\"_blank\">See examples (Python, JavaScript)</a>.      Get the details of a transaction made on Solana.  `Cost: 0.25 Credit` (<a href=\"#section/Pricing\">See Pricing</a>)
         * @param {String} network The network ID (devnet, mainnet-beta)
         * @param {String} txSignature The transaction signature of the transaction
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Transaction}
         */
      }, {
        key: "solanaGetTransaction",
        value: function solanaGetTransaction(network, txSignature) {
          return this.solanaGetTransactionWithHttpInfo(network, txSignature).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
      }]);
      return SolanaTransactionApi2;
    }();
    exports["default"] = SolanaTransactionApi;
  }
});

// node_modules/theblockchainapi/dist/api/SolanaWalletApi.js
var require_SolanaWalletApi = __commonJS({
  "node_modules/theblockchainapi/dist/api/SolanaWalletApi.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    var _ATAResponse = _interopRequireDefault(require_ATAResponse());
    var _AirdropRequest = _interopRequireDefault(require_AirdropRequest());
    var _BalanceRequest = _interopRequireDefault(require_BalanceRequest());
    var _BalanceResponse = _interopRequireDefault(require_BalanceResponse());
    var _DoubleTransferResponse = _interopRequireDefault(require_DoubleTransferResponse());
    var _GeneratePrivateKey = _interopRequireDefault(require_GeneratePrivateKey());
    var _GetPublicKeyRequest = _interopRequireDefault(require_GetPublicKeyRequest());
    var _ListNFTsResponse = _interopRequireDefault(require_ListNFTsResponse());
    var _PublicKey = _interopRequireDefault(require_PublicKey());
    var _SecretPhrase = _interopRequireDefault(require_SecretPhrase());
    var _TransferRequest = _interopRequireDefault(require_TransferRequest());
    var _TransferResponse = _interopRequireDefault(require_TransferResponse());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var SolanaWalletApi = function() {
      function SolanaWalletApi2(apiClient) {
        _classCallCheck(this, SolanaWalletApi2);
        this.apiClient = apiClient || _ApiClient["default"].instance;
      }
      _createClass(SolanaWalletApi2, [{
        key: "solanaDeriveAssociatedTokenAccountAddressWithHttpInfo",
        value: function solanaDeriveAssociatedTokenAccountAddressWithHttpInfo(publicKey, mintAddress) {
          var postBody = null;
          if (publicKey === void 0 || publicKey === null) {
            throw new Error("Missing the required parameter 'publicKey' when calling solanaDeriveAssociatedTokenAccountAddress");
          }
          if (mintAddress === void 0 || mintAddress === null) {
            throw new Error("Missing the required parameter 'mintAddress' when calling solanaDeriveAssociatedTokenAccountAddress");
          }
          var pathParams = {
            "public_key": publicKey,
            "mint_address": mintAddress
          };
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["APIKeyID", "APISecretKey"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = _ATAResponse["default"];
          return this.apiClient.callApi("/solana/wallet/{public_key}/associated_token_account/{mint_address}", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * Derive an associated token account address
         * <a href=\"https://github.com/BL0CK-X/the-blockchain-api/tree/main/examples/solana-wallet/derive-associated-token-account-address\" target=\"_blank\">See example (Python, JavaScript)</a>.      *Each wallet can own tokens, but in Solana, each token is actually held by an <a href=\"https://spl.solana.com/associated-token-account\" target=\"_blank\">associated token account</a> (ATA), which is an account specific for a token owned by the wallet. When you transfer an SPL token, such as Serum, or transfer an NFT, you're transfering from an ATA you own to another person's ATA for that specific token. With this endpoint, you can derive an associated token address given a wallet and a token address.*  `Cost: 0 Credit` (Free) (<a href=\"#section/Pricing\">See Pricing</a>)
         * @param {String} publicKey The public key of the wallet
         * @param {String} mintAddress The mint address of the token (either SPL or NFT)
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ATAResponse}
         */
      }, {
        key: "solanaDeriveAssociatedTokenAccountAddress",
        value: function solanaDeriveAssociatedTokenAccountAddress(publicKey, mintAddress) {
          return this.solanaDeriveAssociatedTokenAccountAddressWithHttpInfo(publicKey, mintAddress).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
        /**
         * Derive private key
         * <a href=\"https://github.com/BL0CK-X/the-blockchain-api/tree/main/examples/solana-wallet/derive-private-key\" target=\"_blank\">See examples (Python, JavaScript)</a>.      Returns a private key array and a base58-encoded private key given wallet authentication.  A wallet is defined by a public key. A public key is derived from a combination of seed phrase, derivation path, and passphrase. Changing any *one* of these three will change the public key output.  *You can generate a unique public key with each combination of secret recovery phrase, passphrase, and derivation path. Thus, with a single secret recovery phrase, you can generate many public keys. If you are just starting, just supply the secret recovery phrase you generated with the Solana Wallet Secret Recovery Phrase endpoint.*  *If you are trying to get a public key that already exists (e.g., created in the Phantom wallet), make sure you use the correct derivation path and passphrase. To read more about that, see the descriptions of those parameters below.*  `Cost: 0 Credit` (Free) (<a href=\"#section/Pricing\">See Pricing</a>)
         * @param {module:model/GetPublicKeyRequest} getPublicKeyRequest 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GeneratePrivateKey} and HTTP response
         */
      }, {
        key: "solanaDerivePrivateKeyWithHttpInfo",
        value: function solanaDerivePrivateKeyWithHttpInfo(getPublicKeyRequest) {
          var postBody = getPublicKeyRequest;
          if (getPublicKeyRequest === void 0 || getPublicKeyRequest === null) {
            throw new Error("Missing the required parameter 'getPublicKeyRequest' when calling solanaDerivePrivateKey");
          }
          var pathParams = {};
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["APIKeyID", "APISecretKey"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = _GeneratePrivateKey["default"];
          return this.apiClient.callApi("/solana/wallet/private_key", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * Derive private key
         * <a href=\"https://github.com/BL0CK-X/the-blockchain-api/tree/main/examples/solana-wallet/derive-private-key\" target=\"_blank\">See examples (Python, JavaScript)</a>.      Returns a private key array and a base58-encoded private key given wallet authentication.  A wallet is defined by a public key. A public key is derived from a combination of seed phrase, derivation path, and passphrase. Changing any *one* of these three will change the public key output.  *You can generate a unique public key with each combination of secret recovery phrase, passphrase, and derivation path. Thus, with a single secret recovery phrase, you can generate many public keys. If you are just starting, just supply the secret recovery phrase you generated with the Solana Wallet Secret Recovery Phrase endpoint.*  *If you are trying to get a public key that already exists (e.g., created in the Phantom wallet), make sure you use the correct derivation path and passphrase. To read more about that, see the descriptions of those parameters below.*  `Cost: 0 Credit` (Free) (<a href=\"#section/Pricing\">See Pricing</a>)
         * @param {module:model/GetPublicKeyRequest} getPublicKeyRequest 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GeneratePrivateKey}
         */
      }, {
        key: "solanaDerivePrivateKey",
        value: function solanaDerivePrivateKey(getPublicKeyRequest) {
          return this.solanaDerivePrivateKeyWithHttpInfo(getPublicKeyRequest).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
        /**
         * Derive public key
         * <a href=\"https://github.com/BL0CK-X/the-blockchain-api/tree/main/examples/solana-wallet/derive-public-key\" target=\"_blank\">See examples (Python, JavaScript)</a>.      Returns a public key given wallet authentication.  A wallet is identified by a public key. A public key is derived from a combination of seed phrase, derivation path, and passphrase. Changing any *one* of these three will change the public key output.   It can also be derived from a private key.  *You can generate a unique public key with each combination of secret recovery phrase, passphrase, and derivation path; or from a private key. Thus, with a single secret recovery phrase, you can generate many public keys; however, with a private key, you can only generate one public key. If you are just starting, generate a <a href=\"#operation/solanaGenerateSecretRecoveryPhrase\">secret recovery phrase</a> or <a href=\"#operation/solanaGeneratePrivateKey\">private key</a>.  *If you are trying to get a public key that already exists (e.g., created in the Phantom wallet), make sure you use the correct derivation path and passphrase; or just use the private key. To read more about that, see the descriptions of those parameters below.*  `Cost: 0 Credit` (Free) (<a href=\"#section/Pricing\">See Pricing</a>)
         * @param {module:model/GetPublicKeyRequest} getPublicKeyRequest 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PublicKey} and HTTP response
         */
      }, {
        key: "solanaDerivePublicKeyWithHttpInfo",
        value: function solanaDerivePublicKeyWithHttpInfo(getPublicKeyRequest) {
          var postBody = getPublicKeyRequest;
          if (getPublicKeyRequest === void 0 || getPublicKeyRequest === null) {
            throw new Error("Missing the required parameter 'getPublicKeyRequest' when calling solanaDerivePublicKey");
          }
          var pathParams = {};
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["APIKeyID", "APISecretKey"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = _PublicKey["default"];
          return this.apiClient.callApi("/solana/wallet/public_key", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * Derive public key
         * <a href=\"https://github.com/BL0CK-X/the-blockchain-api/tree/main/examples/solana-wallet/derive-public-key\" target=\"_blank\">See examples (Python, JavaScript)</a>.      Returns a public key given wallet authentication.  A wallet is identified by a public key. A public key is derived from a combination of seed phrase, derivation path, and passphrase. Changing any *one* of these three will change the public key output.   It can also be derived from a private key.  *You can generate a unique public key with each combination of secret recovery phrase, passphrase, and derivation path; or from a private key. Thus, with a single secret recovery phrase, you can generate many public keys; however, with a private key, you can only generate one public key. If you are just starting, generate a <a href=\"#operation/solanaGenerateSecretRecoveryPhrase\">secret recovery phrase</a> or <a href=\"#operation/solanaGeneratePrivateKey\">private key</a>.  *If you are trying to get a public key that already exists (e.g., created in the Phantom wallet), make sure you use the correct derivation path and passphrase; or just use the private key. To read more about that, see the descriptions of those parameters below.*  `Cost: 0 Credit` (Free) (<a href=\"#section/Pricing\">See Pricing</a>)
         * @param {module:model/GetPublicKeyRequest} getPublicKeyRequest 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PublicKey}
         */
      }, {
        key: "solanaDerivePublicKey",
        value: function solanaDerivePublicKey(getPublicKeyRequest) {
          return this.solanaDerivePublicKeyWithHttpInfo(getPublicKeyRequest).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
        /**
         * Generate private key
         * <a href=\"https://github.com/BL0CK-X/the-blockchain-api/tree/main/examples/solana-wallet/generate-private-key\" target=\"_blank\">See examples (Python, JavaScript)</a>.  Use this endpoint to securely and randomly generate a private key for a Solana wallet.  `Cost: 0 Credit` (Free) (<a href=\"#section/Pricing\">See Pricing</a>)
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GeneratePrivateKey} and HTTP response
         */
      }, {
        key: "solanaGeneratePrivateKeyWithHttpInfo",
        value: function solanaGeneratePrivateKeyWithHttpInfo() {
          var postBody = null;
          var pathParams = {};
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["APIKeyID", "APISecretKey"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = _GeneratePrivateKey["default"];
          return this.apiClient.callApi("/solana/wallet/generate/private_key", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * Generate private key
         * <a href=\"https://github.com/BL0CK-X/the-blockchain-api/tree/main/examples/solana-wallet/generate-private-key\" target=\"_blank\">See examples (Python, JavaScript)</a>.  Use this endpoint to securely and randomly generate a private key for a Solana wallet.  `Cost: 0 Credit` (Free) (<a href=\"#section/Pricing\">See Pricing</a>)
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GeneratePrivateKey}
         */
      }, {
        key: "solanaGeneratePrivateKey",
        value: function solanaGeneratePrivateKey() {
          return this.solanaGeneratePrivateKeyWithHttpInfo().then(function(response_and_data) {
            return response_and_data.data;
          });
        }
        /**
         * Generate secret phrase
         * <a href=\"https://github.com/BL0CK-X/the-blockchain-api/tree/main/examples/solana-wallet/generate-secret-phrase\" target=\"_blank\">See examples (Python, JavaScript)</a>.  Use this endpoint to securely and randomly generate a secret recovery phrase for a Solana wallet.   `Cost: 0 Credit` (Free) (<a href=\"#section/Pricing\">See Pricing</a>)
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SecretPhrase} and HTTP response
         */
      }, {
        key: "solanaGenerateSecretRecoveryPhraseWithHttpInfo",
        value: function solanaGenerateSecretRecoveryPhraseWithHttpInfo() {
          var postBody = null;
          var pathParams = {};
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["APIKeyID", "APISecretKey"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = _SecretPhrase["default"];
          return this.apiClient.callApi("/solana/wallet/generate/secret_recovery_phrase", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * Generate secret phrase
         * <a href=\"https://github.com/BL0CK-X/the-blockchain-api/tree/main/examples/solana-wallet/generate-secret-phrase\" target=\"_blank\">See examples (Python, JavaScript)</a>.  Use this endpoint to securely and randomly generate a secret recovery phrase for a Solana wallet.   `Cost: 0 Credit` (Free) (<a href=\"#section/Pricing\">See Pricing</a>)
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SecretPhrase}
         */
      }, {
        key: "solanaGenerateSecretRecoveryPhrase",
        value: function solanaGenerateSecretRecoveryPhrase() {
          return this.solanaGenerateSecretRecoveryPhraseWithHttpInfo().then(function(response_and_data) {
            return response_and_data.data;
          });
        }
        /**
         * Get an airdrop on devnet
         * <a href=\"https://github.com/BL0CK-X/the-blockchain-api/tree/main/examples/solana-wallet/get-airdrop\" target=\"_blank\">See examples (Python, JavaScript)</a>.      Use this endpoint to get an airdrop of SOL on the devnet (not real SOL). Amount of 0.015,  which is the minimum amount of SOL you need to mint a Metaplex NFT and then transfer it to another wallet.  `Cost: 0 Credit` (Free) (<a href=\"#section/Pricing\">See Pricing</a>)
         * @param {Object} opts Optional parameters
         * @param {module:model/AirdropRequest} opts.airdropRequest 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TransferResponse} and HTTP response
         */
      }, {
        key: "solanaGetAirdropWithHttpInfo",
        value: function solanaGetAirdropWithHttpInfo(opts) {
          opts = opts || {};
          var postBody = opts["airdropRequest"];
          var pathParams = {};
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["APIKeyID", "APISecretKey"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = _TransferResponse["default"];
          return this.apiClient.callApi("/solana/wallet/airdrop", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * Get an airdrop on devnet
         * <a href=\"https://github.com/BL0CK-X/the-blockchain-api/tree/main/examples/solana-wallet/get-airdrop\" target=\"_blank\">See examples (Python, JavaScript)</a>.      Use this endpoint to get an airdrop of SOL on the devnet (not real SOL). Amount of 0.015,  which is the minimum amount of SOL you need to mint a Metaplex NFT and then transfer it to another wallet.  `Cost: 0 Credit` (Free) (<a href=\"#section/Pricing\">See Pricing</a>)
         * @param {Object} opts Optional parameters
         * @param {module:model/AirdropRequest} opts.airdropRequest 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TransferResponse}
         */
      }, {
        key: "solanaGetAirdrop",
        value: function solanaGetAirdrop(opts) {
          return this.solanaGetAirdropWithHttpInfo(opts).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
        /**
         * Get wallet's balance in SOL or any SPL
         * <a href=\"https://github.com/BL0CK-X/the-blockchain-api/tree/main/examples/solana-wallet/get-wallet-balance\" target=\"_blank\">See examples (Python, JavaScript)</a>.      See the balance of a wallet in SOL or any SPL token.  To get the balance of an SPL token, supply the `mint_address` of the SPL token. The list of SPL tokens can be viewed <a href=\"https://raw.githubusercontent.com/solana-labs/token-list/main/src/tokens/solana.tokenlist.json\" target=\"_blank\">here</a>.  You can also use this endpoint to see whether or not a person owns an NFT. Just supply the `mint_address` of the NFT. A balance of \"1\" means the person owns the NFT, and a balance of \"0\" means the person does not own the NFT. This works in most cases, but we are aware of one edge case where a balance of \"0\" will show up for a person who is actually the owner of the NFT. We just recommend using the <a href=\"#operation/solanaGetNFTOwner\">getNFTOwner</a> endpoint and comparing that output to the expected address.  `Cost: 0.25 Credit` (<a href=\"#section/Pricing\">See Pricing</a>)
         * @param {Object} opts Optional parameters
         * @param {module:model/BalanceRequest} opts.balanceRequest 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BalanceResponse} and HTTP response
         */
      }, {
        key: "solanaGetBalanceWithHttpInfo",
        value: function solanaGetBalanceWithHttpInfo(opts) {
          opts = opts || {};
          var postBody = opts["balanceRequest"];
          var pathParams = {};
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["APIKeyID", "APISecretKey"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = _BalanceResponse["default"];
          return this.apiClient.callApi("/solana/wallet/balance", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * Get wallet's balance in SOL or any SPL
         * <a href=\"https://github.com/BL0CK-X/the-blockchain-api/tree/main/examples/solana-wallet/get-wallet-balance\" target=\"_blank\">See examples (Python, JavaScript)</a>.      See the balance of a wallet in SOL or any SPL token.  To get the balance of an SPL token, supply the `mint_address` of the SPL token. The list of SPL tokens can be viewed <a href=\"https://raw.githubusercontent.com/solana-labs/token-list/main/src/tokens/solana.tokenlist.json\" target=\"_blank\">here</a>.  You can also use this endpoint to see whether or not a person owns an NFT. Just supply the `mint_address` of the NFT. A balance of \"1\" means the person owns the NFT, and a balance of \"0\" means the person does not own the NFT. This works in most cases, but we are aware of one edge case where a balance of \"0\" will show up for a person who is actually the owner of the NFT. We just recommend using the <a href=\"#operation/solanaGetNFTOwner\">getNFTOwner</a> endpoint and comparing that output to the expected address.  `Cost: 0.25 Credit` (<a href=\"#section/Pricing\">See Pricing</a>)
         * @param {Object} opts Optional parameters
         * @param {module:model/BalanceRequest} opts.balanceRequest 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BalanceResponse}
         */
      }, {
        key: "solanaGetBalance",
        value: function solanaGetBalance(opts) {
          return this.solanaGetBalanceWithHttpInfo(opts).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
        /**
         * Get address's NFTs
         * <a href=\"https://github.com/BL0CK-X/the-blockchain-api/tree/main/examples/solana-wallet/get-wallet-nfts\" target=\"_blank\">See examples (Python, JavaScript)</a>.      See the NFTs that belong to a given public key address  `Cost: 3 Credits` (<a href=\"#section/Pricing\">See Pricing</a>)
         * @param {String} network The network ID (devnet, mainnet-beta)
         * @param {String} publicKey The public key of the account whose list of owned NFTs you want to get
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListNFTsResponse} and HTTP response
         */
      }, {
        key: "solanaGetNFTsBelongingToWalletWithHttpInfo",
        value: function solanaGetNFTsBelongingToWalletWithHttpInfo(network, publicKey) {
          var postBody = null;
          if (network === void 0 || network === null) {
            throw new Error("Missing the required parameter 'network' when calling solanaGetNFTsBelongingToWallet");
          }
          if (publicKey === void 0 || publicKey === null) {
            throw new Error("Missing the required parameter 'publicKey' when calling solanaGetNFTsBelongingToWallet");
          }
          var pathParams = {
            "network": network,
            "public_key": publicKey
          };
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["APIKeyID", "APISecretKey"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = _ListNFTsResponse["default"];
          return this.apiClient.callApi("/solana/wallet/{network}/{public_key}/nfts", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * Get address's NFTs
         * <a href=\"https://github.com/BL0CK-X/the-blockchain-api/tree/main/examples/solana-wallet/get-wallet-nfts\" target=\"_blank\">See examples (Python, JavaScript)</a>.      See the NFTs that belong to a given public key address  `Cost: 3 Credits` (<a href=\"#section/Pricing\">See Pricing</a>)
         * @param {String} network The network ID (devnet, mainnet-beta)
         * @param {String} publicKey The public key of the account whose list of owned NFTs you want to get
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListNFTsResponse}
         */
      }, {
        key: "solanaGetNFTsBelongingToWallet",
        value: function solanaGetNFTsBelongingToWallet(network, publicKey) {
          return this.solanaGetNFTsBelongingToWalletWithHttpInfo(network, publicKey).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
        /**
         * Get address's tokens and respective balances
         * <a href=\"https://github.com/BL0CK-X/the-blockchain-api/tree/main/examples/solana-wallet/get-wallet-token-holdings\" target=\"_blank\">See examples (Python, JavaScript)</a>.      See the token holdings of a given public key address  `Cost: 2 Credits` (<a href=\"#section/Pricing\">See Pricing</a>)
         * @param {String} network The network ID (devnet, mainnet-beta)
         * @param {String} publicKey The public key of the account whose list of owned NFTs you want to get
         * @param {Object} opts Optional parameters
         * @param {Boolean} opts.includeNfts Whether or not to include NFTs in the response (default to false)
         * @param {Boolean} opts.includeZeroBalanceHoldings Whether or not to include holdings that have zero balance. This indicates that the wallet held this token or NFT in the past, but no longer holds it. (default to false)
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<Object>} and HTTP response
         */
      }, {
        key: "solanaGetTokensBelongingToWalletWithHttpInfo",
        value: function solanaGetTokensBelongingToWalletWithHttpInfo(network, publicKey, opts) {
          opts = opts || {};
          var postBody = null;
          if (network === void 0 || network === null) {
            throw new Error("Missing the required parameter 'network' when calling solanaGetTokensBelongingToWallet");
          }
          if (publicKey === void 0 || publicKey === null) {
            throw new Error("Missing the required parameter 'publicKey' when calling solanaGetTokensBelongingToWallet");
          }
          var pathParams = {
            "network": network,
            "public_key": publicKey
          };
          var queryParams = {
            "include_nfts": opts["includeNfts"],
            "include_zero_balance_holdings": opts["includeZeroBalanceHoldings"]
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["APIKeyID", "APISecretKey"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = [Object];
          return this.apiClient.callApi("/solana/wallet/{network}/{public_key}/tokens", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * Get address's tokens and respective balances
         * <a href=\"https://github.com/BL0CK-X/the-blockchain-api/tree/main/examples/solana-wallet/get-wallet-token-holdings\" target=\"_blank\">See examples (Python, JavaScript)</a>.      See the token holdings of a given public key address  `Cost: 2 Credits` (<a href=\"#section/Pricing\">See Pricing</a>)
         * @param {String} network The network ID (devnet, mainnet-beta)
         * @param {String} publicKey The public key of the account whose list of owned NFTs you want to get
         * @param {Object} opts Optional parameters
         * @param {Boolean} opts.includeNfts Whether or not to include NFTs in the response (default to false)
         * @param {Boolean} opts.includeZeroBalanceHoldings Whether or not to include holdings that have zero balance. This indicates that the wallet held this token or NFT in the past, but no longer holds it. (default to false)
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<Object>}
         */
      }, {
        key: "solanaGetTokensBelongingToWallet",
        value: function solanaGetTokensBelongingToWallet(network, publicKey, opts) {
          return this.solanaGetTokensBelongingToWalletWithHttpInfo(network, publicKey, opts).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
        /**
         * Get address's associated transaction signatures
         * <a href=\"https://github.com/BL0CK-X/blockchain-api/tree/main/examples/solana-wallet/get-wallet-transactions\" target=\"_blank\">See examples (Python, JavaScript)</a>.      See the transaction signatures of a given public key address  `Cost: 1 Credits` (<a href=\"#section/Pricing\">See Pricing</a>)
         * @param {String} network The network ID (devnet, mainnet-beta)
         * @param {String} publicKey The public key of the account whose list of signatures you want to get
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<String>} and HTTP response
         */
      }, {
        key: "solanaGetWalletTransactionsWithHttpInfo",
        value: function solanaGetWalletTransactionsWithHttpInfo(network, publicKey) {
          var postBody = null;
          if (network === void 0 || network === null) {
            throw new Error("Missing the required parameter 'network' when calling solanaGetWalletTransactions");
          }
          if (publicKey === void 0 || publicKey === null) {
            throw new Error("Missing the required parameter 'publicKey' when calling solanaGetWalletTransactions");
          }
          var pathParams = {
            "network": network,
            "public_key": publicKey
          };
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["APIKeyID", "APISecretKey"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = ["String"];
          return this.apiClient.callApi("/solana/wallet/{network}/{public_key}/transactions", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * Get address's associated transaction signatures
         * <a href=\"https://github.com/BL0CK-X/blockchain-api/tree/main/examples/solana-wallet/get-wallet-transactions\" target=\"_blank\">See examples (Python, JavaScript)</a>.      See the transaction signatures of a given public key address  `Cost: 1 Credits` (<a href=\"#section/Pricing\">See Pricing</a>)
         * @param {String} network The network ID (devnet, mainnet-beta)
         * @param {String} publicKey The public key of the account whose list of signatures you want to get
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<String>}
         */
      }, {
        key: "solanaGetWalletTransactions",
        value: function solanaGetWalletTransactions(network, publicKey) {
          return this.solanaGetWalletTransactionsWithHttpInfo(network, publicKey).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
        /**
         * Transfer SOL, a token, or an NFT to another address
         * <a href=\"https://github.com/BL0CK-X/the-blockchain-api/tree/main/examples/solana-wallet/transfer-sol\" target=\"_blank\">See transfer SOL example (Python, JavaScript)</a>.  <a href=\"https://github.com/BL0CK-X/the-blockchain-api/tree/main/examples/solana-wallet/transfer-nft\" target=\"_blank\">See transfer NFT example (can also be used for SPL token) (Python, JavaScript)</a>.  This is a powerful function. It might be slightly confusing because there are several optional parameters, so take some time to review it. This function can send SOL, send an SPL token, or send an NFT. You can set the fee payer of the transaction; you can sign and submit the transaction for confirmation; and you can select to simply return the compiled transaction so that you can submit it to the user for signing (e.g., via Phantom; no private keys required in this case).  Transfer SOL, a token or an NFT to another address. If you're transferring an NFT, supply the `mint` (the address of the mint) for the `token_address`.  SENDER: Note that the wallet information is used to authorize the sending of the tokens and identifies the source of the tokens. If `return_compiled_transaction = false`, we sign and submit the transaction (`wallet` is required in this case; do not provide a value for `sender_public_key`). If `return_compiled_transaction = true`, we compile the transaction (one of `wallet` or `sender_public_key` is required in this case; do not provide both).  RECIPIENT: `recipient_address` identifies the receiver. This is entirely separate from the information used for the SENDER above. So, in this API call, there are two wallets involved, but only one (namely, the SENDER) is needed to authorize the transaction.  FEE_PAYER: The fee payer of the transaction defaults to `wallet` (or `sender_public_key`). To set a different fee payer, provide a value for `fee_payer_wallet`.  If you're transfering a token, supply the token address found on the explorer (e.g., see `SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt` for <a href=\"https://explorer.solana.com/address/SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt\" target=\"_blank\">Serum Token</a>) for the `token_address`. If you're transferring SOL, do not supply a value for `token_address`.  `Cost: 2 Credit` (<a href=\"#section/Pricing\">See Pricing</a>)
         * @param {Object} opts Optional parameters
         * @param {module:model/TransferRequest} opts.transferRequest 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DoubleTransferResponse} and HTTP response
         */
      }, {
        key: "solanaTransferWithHttpInfo",
        value: function solanaTransferWithHttpInfo(opts) {
          opts = opts || {};
          var postBody = opts["transferRequest"];
          var pathParams = {};
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["APIKeyID", "APISecretKey"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = _DoubleTransferResponse["default"];
          return this.apiClient.callApi("/solana/wallet/transfer", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * Transfer SOL, a token, or an NFT to another address
         * <a href=\"https://github.com/BL0CK-X/the-blockchain-api/tree/main/examples/solana-wallet/transfer-sol\" target=\"_blank\">See transfer SOL example (Python, JavaScript)</a>.  <a href=\"https://github.com/BL0CK-X/the-blockchain-api/tree/main/examples/solana-wallet/transfer-nft\" target=\"_blank\">See transfer NFT example (can also be used for SPL token) (Python, JavaScript)</a>.  This is a powerful function. It might be slightly confusing because there are several optional parameters, so take some time to review it. This function can send SOL, send an SPL token, or send an NFT. You can set the fee payer of the transaction; you can sign and submit the transaction for confirmation; and you can select to simply return the compiled transaction so that you can submit it to the user for signing (e.g., via Phantom; no private keys required in this case).  Transfer SOL, a token or an NFT to another address. If you're transferring an NFT, supply the `mint` (the address of the mint) for the `token_address`.  SENDER: Note that the wallet information is used to authorize the sending of the tokens and identifies the source of the tokens. If `return_compiled_transaction = false`, we sign and submit the transaction (`wallet` is required in this case; do not provide a value for `sender_public_key`). If `return_compiled_transaction = true`, we compile the transaction (one of `wallet` or `sender_public_key` is required in this case; do not provide both).  RECIPIENT: `recipient_address` identifies the receiver. This is entirely separate from the information used for the SENDER above. So, in this API call, there are two wallets involved, but only one (namely, the SENDER) is needed to authorize the transaction.  FEE_PAYER: The fee payer of the transaction defaults to `wallet` (or `sender_public_key`). To set a different fee payer, provide a value for `fee_payer_wallet`.  If you're transfering a token, supply the token address found on the explorer (e.g., see `SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt` for <a href=\"https://explorer.solana.com/address/SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt\" target=\"_blank\">Serum Token</a>) for the `token_address`. If you're transferring SOL, do not supply a value for `token_address`.  `Cost: 2 Credit` (<a href=\"#section/Pricing\">See Pricing</a>)
         * @param {Object} opts Optional parameters
         * @param {module:model/TransferRequest} opts.transferRequest 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DoubleTransferResponse}
         */
      }, {
        key: "solanaTransfer",
        value: function solanaTransfer(opts) {
          return this.solanaTransferWithHttpInfo(opts).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
      }]);
      return SolanaWalletApi2;
    }();
    exports["default"] = SolanaWalletApi;
  }
});

// node_modules/theblockchainapi/dist/api/TokenApi.js
var require_TokenApi = __commonJS({
  "node_modules/theblockchainapi/dist/api/TokenApi.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    var _TokenMetadataResponse = _interopRequireDefault(require_TokenMetadataResponse());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var TokenApi = function() {
      function TokenApi2(apiClient) {
        _classCallCheck(this, TokenApi2);
        this.apiClient = apiClient || _ApiClient["default"].instance;
      }
      _createClass(TokenApi2, [{
        key: "getTokenMetadataWithHttpInfo",
        value: function getTokenMetadataWithHttpInfo(blockchain, network, tokenBlockchainIdentifier) {
          var postBody = null;
          if (blockchain === void 0 || blockchain === null) {
            throw new Error("Missing the required parameter 'blockchain' when calling getTokenMetadata");
          }
          if (network === void 0 || network === null) {
            throw new Error("Missing the required parameter 'network' when calling getTokenMetadata");
          }
          if (tokenBlockchainIdentifier === void 0 || tokenBlockchainIdentifier === null) {
            throw new Error("Missing the required parameter 'tokenBlockchainIdentifier' when calling getTokenMetadata");
          }
          var pathParams = {
            "blockchain": blockchain,
            "network": network,
            "token_blockchain_identifier": tokenBlockchainIdentifier
          };
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["APIKeyID", "APISecretKey"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = _TokenMetadataResponse["default"];
          return this.apiClient.callApi("/{blockchain}/{network}/token/{token_blockchain_identifier}", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * Get a token's metadata
         * <a href=\"https://github.com/BL0CK-X/blockchain-api/tree/main/examples/tokens/get-token-metadata\" target=\"_blank\">See examples (Python, JavaScript) [Coming Soon]</a>.      Get the metadata of a token.  `Cost: 0.25 Credit` (<a href=\"#section/Pricing\">See Pricing</a>)
         * @param {module:model/String} blockchain The blockchain you want to use 
         * @param {String} network The network of the blockchain you selected  - Solana: `devnet`, `mainnet-beta` - Ethereum: `ropsten`, `mainnet`  Defaults when not provided (not applicable to path parameters): - Solana: `devnet` - Ethereum: `ropsten`
         * @param {module:model/String} tokenBlockchainIdentifier The identifier of the token (e.g., `mint_address` on `Solana` or `token_address` on `Ethereum`) 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TokenMetadataResponse}
         */
      }, {
        key: "getTokenMetadata",
        value: function getTokenMetadata(blockchain, network, tokenBlockchainIdentifier) {
          return this.getTokenMetadataWithHttpInfo(blockchain, network, tokenBlockchainIdentifier).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
        /**
         * List all tokens
         * <a href=\"https://github.com/BL0CK-X/blockchain-api/tree/main/examples/tokens/get-all-tokens\" target=\"_blank\">See examples (Python, JavaScript) [Coming Soon]</a>.      List all tokens.  `Cost: 1 Credit` (<a href=\"#section/Pricing\">See Pricing</a>)
         * @param {module:model/String} blockchain The blockchain you want to use 
         * @param {String} network The network of the blockchain you selected  - Solana: `devnet`, `mainnet-beta` - Ethereum: `ropsten`, `mainnet`  Defaults when not provided (not applicable to path parameters): - Solana: `devnet` - Ethereum: `ropsten`
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/TokenMetadataResponse>} and HTTP response
         */
      }, {
        key: "listAllTokensWithHttpInfo",
        value: function listAllTokensWithHttpInfo(blockchain, network) {
          var postBody = null;
          if (blockchain === void 0 || blockchain === null) {
            throw new Error("Missing the required parameter 'blockchain' when calling listAllTokens");
          }
          if (network === void 0 || network === null) {
            throw new Error("Missing the required parameter 'network' when calling listAllTokens");
          }
          var pathParams = {
            "blockchain": blockchain,
            "network": network
          };
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["APIKeyID", "APISecretKey"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = [_TokenMetadataResponse["default"]];
          return this.apiClient.callApi("/{blockchain}/{network}/all_tokens", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * List all tokens
         * <a href=\"https://github.com/BL0CK-X/blockchain-api/tree/main/examples/tokens/get-all-tokens\" target=\"_blank\">See examples (Python, JavaScript) [Coming Soon]</a>.      List all tokens.  `Cost: 1 Credit` (<a href=\"#section/Pricing\">See Pricing</a>)
         * @param {module:model/String} blockchain The blockchain you want to use 
         * @param {String} network The network of the blockchain you selected  - Solana: `devnet`, `mainnet-beta` - Ethereum: `ropsten`, `mainnet`  Defaults when not provided (not applicable to path parameters): - Solana: `devnet` - Ethereum: `ropsten`
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/TokenMetadataResponse>}
         */
      }, {
        key: "listAllTokens",
        value: function listAllTokens(blockchain, network) {
          return this.listAllTokensWithHttpInfo(blockchain, network).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
      }]);
      return TokenApi2;
    }();
    exports["default"] = TokenApi;
  }
});

// node_modules/theblockchainapi/dist/api/TransactionApi.js
var require_TransactionApi = __commonJS({
  "node_modules/theblockchainapi/dist/api/TransactionApi.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    var _GeneralTransaction = _interopRequireDefault(require_GeneralTransaction());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var TransactionApi = function() {
      function TransactionApi2(apiClient) {
        _classCallCheck(this, TransactionApi2);
        this.apiClient = apiClient || _ApiClient["default"].instance;
      }
      _createClass(TransactionApi2, [{
        key: "getTransactionWithHttpInfo",
        value: function getTransactionWithHttpInfo(blockchain, network, transactionBlockchainIdentifier) {
          var postBody = null;
          if (blockchain === void 0 || blockchain === null) {
            throw new Error("Missing the required parameter 'blockchain' when calling getTransaction");
          }
          if (network === void 0 || network === null) {
            throw new Error("Missing the required parameter 'network' when calling getTransaction");
          }
          if (transactionBlockchainIdentifier === void 0 || transactionBlockchainIdentifier === null) {
            throw new Error("Missing the required parameter 'transactionBlockchainIdentifier' when calling getTransaction");
          }
          var pathParams = {
            "blockchain": blockchain,
            "network": network,
            "transaction_blockchain_identifier": transactionBlockchainIdentifier
          };
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["APIKeyID", "APISecretKey"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = _GeneralTransaction["default"];
          return this.apiClient.callApi("/{blockchain}/transaction/{network}/{transaction_blockchain_identifier}", "GET", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * Get the details of a transaction made on a blockchain
         * <a href=\"https://github.com/BL0CK-X/blockchain-api/tree/main/examples/transaction/get-transaction\" target=\"_blank\">See examples (Python, JavaScript)</a>.      Get the details of a transaction made on the specified blockchain.  `Cost: 0.25 Credit` (<a href=\"#section/Pricing\">See Pricing</a>)
         * @param {module:model/String} blockchain The blockchain you want to use 
         * @param {String} network The network of the blockchain you selected  - Solana: `devnet`, `mainnet-beta` - Ethereum: `ropsten`, `mainnet`  Defaults when not provided (not applicable to path parameters): - Solana: `devnet` - Ethereum: `ropsten`
         * @param {String} transactionBlockchainIdentifier The transaction signature of the transaction.  Examples: - Solana: `5wHu1qwD7q5ifaN5nwdcDqNFo53GJqa7nLp2BeeEpcHCusb4GzARz4GjgzsEHMkBMgCJMGa6GSQ1VG96Exv8kt2W` - Ethereum: `0x5f36b787daa57bfe8568d69e24eae54ccb00720c6edfc826bd4a7b19c525eef4`
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GeneralTransaction}
         */
      }, {
        key: "getTransaction",
        value: function getTransaction(blockchain, network, transactionBlockchainIdentifier) {
          return this.getTransactionWithHttpInfo(blockchain, network, transactionBlockchainIdentifier).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
      }]);
      return TransactionApi2;
    }();
    exports["default"] = TransactionApi;
  }
});

// node_modules/theblockchainapi/dist/api/WalletApi.js
var require_WalletApi = __commonJS({
  "node_modules/theblockchainapi/dist/api/WalletApi.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    var _GeneralAirdropRequest = _interopRequireDefault(require_GeneralAirdropRequest());
    var _GeneralBalanceRequest = _interopRequireDefault(require_GeneralBalanceRequest());
    var _GeneralBalanceResponse = _interopRequireDefault(require_GeneralBalanceResponse());
    var _GeneralGeneratePrivateKeyResponse = _interopRequireDefault(require_GeneralGeneratePrivateKeyResponse());
    var _GeneralSecretPhrase = _interopRequireDefault(require_GeneralSecretPhrase());
    var _GeneralTransactionMadeResponse = _interopRequireDefault(require_GeneralTransactionMadeResponse());
    var _GeneralTransactionResponse = _interopRequireDefault(require_GeneralTransactionResponse());
    var _GeneralTransferRequest = _interopRequireDefault(require_GeneralTransferRequest());
    var _GenerateSeedPhraseRequest = _interopRequireDefault(require_GenerateSeedPhraseRequest());
    var _SupplyWalletRequest = _interopRequireDefault(require_SupplyWalletRequest());
    var _WalletIdentifiers = _interopRequireDefault(require_WalletIdentifiers());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    var WalletApi = function() {
      function WalletApi2(apiClient) {
        _classCallCheck(this, WalletApi2);
        this.apiClient = apiClient || _ApiClient["default"].instance;
      }
      _createClass(WalletApi2, [{
        key: "derivePrivateKeyWithHttpInfo",
        value: function derivePrivateKeyWithHttpInfo(blockchain, supplyWalletRequest) {
          var postBody = supplyWalletRequest;
          if (blockchain === void 0 || blockchain === null) {
            throw new Error("Missing the required parameter 'blockchain' when calling derivePrivateKey");
          }
          if (supplyWalletRequest === void 0 || supplyWalletRequest === null) {
            throw new Error("Missing the required parameter 'supplyWalletRequest' when calling derivePrivateKey");
          }
          var pathParams = {
            "blockchain": blockchain
          };
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["APIKeyID", "APISecretKey"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = _GeneralGeneratePrivateKeyResponse["default"];
          return this.apiClient.callApi("/{blockchain}/wallet/private_key", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * Derive private key
         * <a href=\"https://github.com/BL0CK-X/blockchain-api/tree/main/examples/wallet/derive-private-key\" target=\"_blank\">See examples (Python, JavaScript)</a>.  Use this endpoint to securely derive a private key for a wallet.   For example, if you have a seed phrase and want to derive the corresponding private key, use this endpoint.  `Cost: 0 Credit` (Free) (<a href=\"#section/Pricing\">See Pricing</a>)
         * @param {module:model/String} blockchain The blockchain you want to use 
         * @param {module:model/SupplyWalletRequest} supplyWalletRequest 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GeneralGeneratePrivateKeyResponse}
         */
      }, {
        key: "derivePrivateKey",
        value: function derivePrivateKey(blockchain, supplyWalletRequest) {
          return this.derivePrivateKeyWithHttpInfo(blockchain, supplyWalletRequest).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
        /**
         * Derive wallet identifier
         * <a href=\"https://github.com/BL0CK-X/blockchain-api/tree/main/examples/wallet/derive-wallet-identifier\" target=\"_blank\">See examples (Python, JavaScript)</a>.  Derive the identifier for a wallet.  `Cost: 0 Credit` (Free) (<a href=\"#section/Pricing\">See Pricing</a>)
         * @param {module:model/String} blockchain The blockchain you want to use 
         * @param {module:model/SupplyWalletRequest} supplyWalletRequest 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/WalletIdentifiers} and HTTP response
         */
      }, {
        key: "deriveWalletIdentifierWithHttpInfo",
        value: function deriveWalletIdentifierWithHttpInfo(blockchain, supplyWalletRequest) {
          var postBody = supplyWalletRequest;
          if (blockchain === void 0 || blockchain === null) {
            throw new Error("Missing the required parameter 'blockchain' when calling deriveWalletIdentifier");
          }
          if (supplyWalletRequest === void 0 || supplyWalletRequest === null) {
            throw new Error("Missing the required parameter 'supplyWalletRequest' when calling deriveWalletIdentifier");
          }
          var pathParams = {
            "blockchain": blockchain
          };
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["APIKeyID", "APISecretKey"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = _WalletIdentifiers["default"];
          return this.apiClient.callApi("/{blockchain}/wallet/identifier", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * Derive wallet identifier
         * <a href=\"https://github.com/BL0CK-X/blockchain-api/tree/main/examples/wallet/derive-wallet-identifier\" target=\"_blank\">See examples (Python, JavaScript)</a>.  Derive the identifier for a wallet.  `Cost: 0 Credit` (Free) (<a href=\"#section/Pricing\">See Pricing</a>)
         * @param {module:model/String} blockchain The blockchain you want to use 
         * @param {module:model/SupplyWalletRequest} supplyWalletRequest 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/WalletIdentifiers}
         */
      }, {
        key: "deriveWalletIdentifier",
        value: function deriveWalletIdentifier(blockchain, supplyWalletRequest) {
          return this.deriveWalletIdentifierWithHttpInfo(blockchain, supplyWalletRequest).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
        /**
         * Generate private key
         * <a href=\"https://github.com/BL0CK-X/blockchain-api/tree/main/examples/wallet/generate-private-key\" target=\"_blank\">See examples (Python, JavaScript)</a>.  Use this endpoint to securely and randomly generate a private key for a wallet.   `Cost: 0 Credit` (Free) (<a href=\"#section/Pricing\">See Pricing</a>)
         * @param {module:model/String} blockchain The blockchain you want to use 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GeneralGeneratePrivateKeyResponse} and HTTP response
         */
      }, {
        key: "generatePrivateKeyWithHttpInfo",
        value: function generatePrivateKeyWithHttpInfo(blockchain) {
          var postBody = null;
          if (blockchain === void 0 || blockchain === null) {
            throw new Error("Missing the required parameter 'blockchain' when calling generatePrivateKey");
          }
          var pathParams = {
            "blockchain": blockchain
          };
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["APIKeyID", "APISecretKey"];
          var contentTypes = [];
          var accepts = ["application/json"];
          var returnType = _GeneralGeneratePrivateKeyResponse["default"];
          return this.apiClient.callApi("/{blockchain}/wallet/generate/private_key", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * Generate private key
         * <a href=\"https://github.com/BL0CK-X/blockchain-api/tree/main/examples/wallet/generate-private-key\" target=\"_blank\">See examples (Python, JavaScript)</a>.  Use this endpoint to securely and randomly generate a private key for a wallet.   `Cost: 0 Credit` (Free) (<a href=\"#section/Pricing\">See Pricing</a>)
         * @param {module:model/String} blockchain The blockchain you want to use 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GeneralGeneratePrivateKeyResponse}
         */
      }, {
        key: "generatePrivateKey",
        value: function generatePrivateKey(blockchain) {
          return this.generatePrivateKeyWithHttpInfo(blockchain).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
        /**
         * Generate seed phrase
         * <a href=\"https://github.com/BL0CK-X/blockchain-api/tree/main/examples/wallet/generate-secret-phrase\" target=\"_blank\">See examples (Python, JavaScript)</a>.  Use this endpoint to securely and randomly generate a seed phrase for a wallet.   `Cost: 0 Credit` (Free) (<a href=\"#section/Pricing\">See Pricing</a>)
         * @param {module:model/String} blockchain The blockchain you want to use 
         * @param {Object} opts Optional parameters
         * @param {module:model/GenerateSeedPhraseRequest} opts.generateSeedPhraseRequest 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GeneralSecretPhrase} and HTTP response
         */
      }, {
        key: "generateSeedPhraseWithHttpInfo",
        value: function generateSeedPhraseWithHttpInfo(blockchain, opts) {
          opts = opts || {};
          var postBody = opts["generateSeedPhraseRequest"];
          if (blockchain === void 0 || blockchain === null) {
            throw new Error("Missing the required parameter 'blockchain' when calling generateSeedPhrase");
          }
          var pathParams = {
            "blockchain": blockchain
          };
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["APIKeyID", "APISecretKey"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = _GeneralSecretPhrase["default"];
          return this.apiClient.callApi("/{blockchain}/wallet/generate/secret_recovery_phrase", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * Generate seed phrase
         * <a href=\"https://github.com/BL0CK-X/blockchain-api/tree/main/examples/wallet/generate-secret-phrase\" target=\"_blank\">See examples (Python, JavaScript)</a>.  Use this endpoint to securely and randomly generate a seed phrase for a wallet.   `Cost: 0 Credit` (Free) (<a href=\"#section/Pricing\">See Pricing</a>)
         * @param {module:model/String} blockchain The blockchain you want to use 
         * @param {Object} opts Optional parameters
         * @param {module:model/GenerateSeedPhraseRequest} opts.generateSeedPhraseRequest 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GeneralSecretPhrase}
         */
      }, {
        key: "generateSeedPhrase",
        value: function generateSeedPhrase(blockchain, opts) {
          return this.generateSeedPhraseWithHttpInfo(blockchain, opts).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
        /**
         * Get an airdrop
         * <a href=\"https://github.com/BL0CK-X/blockchain-api/tree/main/examples/wallet/get-airdrop\" target=\"_blank\">See examples (Python, JavaScript)</a>.      - Ethereum: Receive an airdrop of 0.001 ETH on Ropsten (not real ETH).  - Solana: Use this endpoint to get an airdrop of SOL on the devnet (not real SOL). Amount of 0.015, which is the minimum amount of SOL you need to mint an NFT and then transfer it to another wallet.  `Cost: 0 Credit` (Free) (<a href=\"#section/Pricing\">See Pricing</a>)
         * @param {module:model/String} blockchain The blockchain you want to use 
         * @param {Object} opts Optional parameters
         * @param {module:model/GeneralAirdropRequest} opts.generalAirdropRequest 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GeneralTransactionMadeResponse} and HTTP response
         */
      }, {
        key: "getAirdropWithHttpInfo",
        value: function getAirdropWithHttpInfo(blockchain, opts) {
          opts = opts || {};
          var postBody = opts["generalAirdropRequest"];
          if (blockchain === void 0 || blockchain === null) {
            throw new Error("Missing the required parameter 'blockchain' when calling getAirdrop");
          }
          var pathParams = {
            "blockchain": blockchain
          };
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["APIKeyID", "APISecretKey"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = _GeneralTransactionMadeResponse["default"];
          return this.apiClient.callApi("/{blockchain}/wallet/airdrop", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * Get an airdrop
         * <a href=\"https://github.com/BL0CK-X/blockchain-api/tree/main/examples/wallet/get-airdrop\" target=\"_blank\">See examples (Python, JavaScript)</a>.      - Ethereum: Receive an airdrop of 0.001 ETH on Ropsten (not real ETH).  - Solana: Use this endpoint to get an airdrop of SOL on the devnet (not real SOL). Amount of 0.015, which is the minimum amount of SOL you need to mint an NFT and then transfer it to another wallet.  `Cost: 0 Credit` (Free) (<a href=\"#section/Pricing\">See Pricing</a>)
         * @param {module:model/String} blockchain The blockchain you want to use 
         * @param {Object} opts Optional parameters
         * @param {module:model/GeneralAirdropRequest} opts.generalAirdropRequest 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GeneralTransactionMadeResponse}
         */
      }, {
        key: "getAirdrop",
        value: function getAirdrop(blockchain, opts) {
          return this.getAirdropWithHttpInfo(blockchain, opts).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
        /**
         * Get wallet's balance of X
         * <a href=\"https://github.com/BL0CK-X/blockchain-api/tree/main/examples/wallet/get-wallet-balance\" target=\"_blank\">See examples (Python, JavaScript)</a>.      See the balance of a wallet in the native blockchain currency (e.g., ETH, SOL) or any token (e.g., ERC-20, NFTs, SPL, etc.).  To get the balance of a specific token, supply the `token_blockchain_identifier` of the token.   You can also use this endpoint to see whether or not a person owns an NFT. Just supply the `token_blockchain_identifier` of the NFT. A balance of \"1\" means the person owns the NFT, and a balance of \"0\" means the person does not own the NFT.  `Cost: 0.25 Credit` (<a href=\"#section/Pricing\">See Pricing</a>)
         * @param {module:model/String} blockchain The blockchain you want to use 
         * @param {Object} opts Optional parameters
         * @param {module:model/GeneralBalanceRequest} opts.generalBalanceRequest 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GeneralBalanceResponse} and HTTP response
         */
      }, {
        key: "getBalanceWithHttpInfo",
        value: function getBalanceWithHttpInfo(blockchain, opts) {
          opts = opts || {};
          var postBody = opts["generalBalanceRequest"];
          if (blockchain === void 0 || blockchain === null) {
            throw new Error("Missing the required parameter 'blockchain' when calling getBalance");
          }
          var pathParams = {
            "blockchain": blockchain
          };
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["APIKeyID", "APISecretKey"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = _GeneralBalanceResponse["default"];
          return this.apiClient.callApi("/{blockchain}/wallet/balance", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * Get wallet's balance of X
         * <a href=\"https://github.com/BL0CK-X/blockchain-api/tree/main/examples/wallet/get-wallet-balance\" target=\"_blank\">See examples (Python, JavaScript)</a>.      See the balance of a wallet in the native blockchain currency (e.g., ETH, SOL) or any token (e.g., ERC-20, NFTs, SPL, etc.).  To get the balance of a specific token, supply the `token_blockchain_identifier` of the token.   You can also use this endpoint to see whether or not a person owns an NFT. Just supply the `token_blockchain_identifier` of the NFT. A balance of \"1\" means the person owns the NFT, and a balance of \"0\" means the person does not own the NFT.  `Cost: 0.25 Credit` (<a href=\"#section/Pricing\">See Pricing</a>)
         * @param {module:model/String} blockchain The blockchain you want to use 
         * @param {Object} opts Optional parameters
         * @param {module:model/GeneralBalanceRequest} opts.generalBalanceRequest 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GeneralBalanceResponse}
         */
      }, {
        key: "getBalance",
        value: function getBalance(blockchain, opts) {
          return this.getBalanceWithHttpInfo(blockchain, opts).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
        /**
         * Transfer crypto, a token, or an NFT to another wallet
         * <a href=\"https://github.com/BL0CK-X/blockchain-api/tree/main/examples/wallet/transfer-crypto-token-or-nft\" target=\"_blank\">See transfer ETH/SOL/crypto example (Python, JavaScript)</a>.  <a href=\"https://github.com/BL0CK-X/blockchain-api/tree/main/examples/wallet/transfer-crypto-token-or-nft\" target=\"_blank\">See transfer NFT/token example (Python, JavaScript)</a>.  This is a powerful function. It might be slightly confusing because there are several optional parameters, so take some time to review it.   This function can send - The native currency of the selected blockchain (e.g., SOL, ETH, BNB, etc.) - A token (e.g., an SPL token, ERC-20 token, etc.) - An NFT  You can sign and submit the transaction for confirmation; and you can select to simply return the compiled transaction so that you can submit it to the user for signing (e.g., via Phantom or Metamask; no private keys required in this case).  If you're transferring an NFT or a token, supply its respective `token_blockchain_identifier`.  SENDER: Note that the wallet information is used to authorize the sending of the tokens and identifies the source of the tokens. If `return_compiled_transaction = false`, we sign and submit the transaction (`wallet` is required in this case; do not provide a value for `sender_blockchain_identifier`). If `return_compiled_transaction = true`, we compile the transaction (`sender_blockchain_identifier` is required in this case; do not provide `wallet`).  RECIPIENT: `recipient_blockchain_identifier` identifies the receiver. This is entirely separate from the information used for the SENDER above. So, in this API call, there are two wallets involved, but only one (namely, the SENDER) is needed to authorize the transaction (if you want us to sign and submitting it).  FEE_PAYER (Solana only): The fee payer of the transaction defaults to `wallet` (or `sender_blockchain_identifier`). To set a different fee payer, provide a value for `fee_payer_wallet`.  `Cost: 2 Credit` (<a href=\"#section/Pricing\">See Pricing</a>)
         * @param {module:model/String} blockchain The blockchain you want to use 
         * @param {Object} opts Optional parameters
         * @param {module:model/GeneralTransferRequest} opts.generalTransferRequest 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GeneralTransactionResponse} and HTTP response
         */
      }, {
        key: "transferWithHttpInfo",
        value: function transferWithHttpInfo(blockchain, opts) {
          opts = opts || {};
          var postBody = opts["generalTransferRequest"];
          if (blockchain === void 0 || blockchain === null) {
            throw new Error("Missing the required parameter 'blockchain' when calling transfer");
          }
          var pathParams = {
            "blockchain": blockchain
          };
          var queryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["APIKeyID", "APISecretKey"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = _GeneralTransactionResponse["default"];
          return this.apiClient.callApi("/{blockchain}/wallet/transfer", "POST", pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
        }
        /**
         * Transfer crypto, a token, or an NFT to another wallet
         * <a href=\"https://github.com/BL0CK-X/blockchain-api/tree/main/examples/wallet/transfer-crypto-token-or-nft\" target=\"_blank\">See transfer ETH/SOL/crypto example (Python, JavaScript)</a>.  <a href=\"https://github.com/BL0CK-X/blockchain-api/tree/main/examples/wallet/transfer-crypto-token-or-nft\" target=\"_blank\">See transfer NFT/token example (Python, JavaScript)</a>.  This is a powerful function. It might be slightly confusing because there are several optional parameters, so take some time to review it.   This function can send - The native currency of the selected blockchain (e.g., SOL, ETH, BNB, etc.) - A token (e.g., an SPL token, ERC-20 token, etc.) - An NFT  You can sign and submit the transaction for confirmation; and you can select to simply return the compiled transaction so that you can submit it to the user for signing (e.g., via Phantom or Metamask; no private keys required in this case).  If you're transferring an NFT or a token, supply its respective `token_blockchain_identifier`.  SENDER: Note that the wallet information is used to authorize the sending of the tokens and identifies the source of the tokens. If `return_compiled_transaction = false`, we sign and submit the transaction (`wallet` is required in this case; do not provide a value for `sender_blockchain_identifier`). If `return_compiled_transaction = true`, we compile the transaction (`sender_blockchain_identifier` is required in this case; do not provide `wallet`).  RECIPIENT: `recipient_blockchain_identifier` identifies the receiver. This is entirely separate from the information used for the SENDER above. So, in this API call, there are two wallets involved, but only one (namely, the SENDER) is needed to authorize the transaction (if you want us to sign and submitting it).  FEE_PAYER (Solana only): The fee payer of the transaction defaults to `wallet` (or `sender_blockchain_identifier`). To set a different fee payer, provide a value for `fee_payer_wallet`.  `Cost: 2 Credit` (<a href=\"#section/Pricing\">See Pricing</a>)
         * @param {module:model/String} blockchain The blockchain you want to use 
         * @param {Object} opts Optional parameters
         * @param {module:model/GeneralTransferRequest} opts.generalTransferRequest 
         * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GeneralTransactionResponse}
         */
      }, {
        key: "transfer",
        value: function transfer(blockchain, opts) {
          return this.transferWithHttpInfo(blockchain, opts).then(function(response_and_data) {
            return response_and_data.data;
          });
        }
      }]);
      return WalletApi2;
    }();
    exports["default"] = WalletApi;
  }
});

// node_modules/theblockchainapi/dist/index.js
var require_dist = __commonJS({
  "node_modules/theblockchainapi/dist/index.js"(exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "ATAResponse", {
      enumerable: true,
      get: function get() {
        return _ATAResponse["default"];
      }
    });
    Object.defineProperty(exports, "Account", {
      enumerable: true,
      get: function get() {
        return _Account["default"];
      }
    });
    Object.defineProperty(exports, "AccountContext", {
      enumerable: true,
      get: function get() {
        return _AccountContext["default"];
      }
    });
    Object.defineProperty(exports, "AccountIsCandyMachine", {
      enumerable: true,
      get: function get() {
        return _AccountIsCandyMachine["default"];
      }
    });
    Object.defineProperty(exports, "AccountIsNFT", {
      enumerable: true,
      get: function get() {
        return _AccountIsNFT["default"];
      }
    });
    Object.defineProperty(exports, "AccountValue", {
      enumerable: true,
      get: function get() {
        return _AccountValue["default"];
      }
    });
    Object.defineProperty(exports, "AirdropRequest", {
      enumerable: true,
      get: function get() {
        return _AirdropRequest["default"];
      }
    });
    Object.defineProperty(exports, "ApiClient", {
      enumerable: true,
      get: function get() {
        return _ApiClient["default"];
      }
    });
    Object.defineProperty(exports, "AvalancheCChainPublicAddress", {
      enumerable: true,
      get: function get() {
        return _AvalancheCChainPublicAddress["default"];
      }
    });
    Object.defineProperty(exports, "AvalancheXPChainPublicAddress", {
      enumerable: true,
      get: function get() {
        return _AvalancheXPChainPublicAddress["default"];
      }
    });
    Object.defineProperty(exports, "B58PrivateKey", {
      enumerable: true,
      get: function get() {
        return _B58PrivateKey["default"];
      }
    });
    Object.defineProperty(exports, "BSCPublicAddress", {
      enumerable: true,
      get: function get() {
        return _BSCPublicAddress["default"];
      }
    });
    Object.defineProperty(exports, "BalanceRequest", {
      enumerable: true,
      get: function get() {
        return _BalanceRequest["default"];
      }
    });
    Object.defineProperty(exports, "BalanceResponse", {
      enumerable: true,
      get: function get() {
        return _BalanceResponse["default"];
      }
    });
    Object.defineProperty(exports, "CCPayment", {
      enumerable: true,
      get: function get() {
        return _CCPayment["default"];
      }
    });
    Object.defineProperty(exports, "CCPaymentApi", {
      enumerable: true,
      get: function get() {
        return _CCPaymentApi["default"];
      }
    });
    Object.defineProperty(exports, "CCPaymentBlockchainPaymentDetails", {
      enumerable: true,
      get: function get() {
        return _CCPaymentBlockchainPaymentDetails["default"];
      }
    });
    Object.defineProperty(exports, "CCProject", {
      enumerable: true,
      get: function get() {
        return _CCProject["default"];
      }
    });
    Object.defineProperty(exports, "CCProjectApi", {
      enumerable: true,
      get: function get() {
        return _CCProjectApi["default"];
      }
    });
    Object.defineProperty(exports, "CCProjectCreateRequest", {
      enumerable: true,
      get: function get() {
        return _CCProjectCreateRequest["default"];
      }
    });
    Object.defineProperty(exports, "CCProjectCreateRequestCustomerIdToCollect", {
      enumerable: true,
      get: function get() {
        return _CCProjectCreateRequestCustomerIdToCollect["default"];
      }
    });
    Object.defineProperty(exports, "CCProjectCreateRequestPayoutMethod", {
      enumerable: true,
      get: function get() {
        return _CCProjectCreateRequestPayoutMethod["default"];
      }
    });
    Object.defineProperty(exports, "CCWebhook", {
      enumerable: true,
      get: function get() {
        return _CCWebhook["default"];
      }
    });
    Object.defineProperty(exports, "CCWebhookApi", {
      enumerable: true,
      get: function get() {
        return _CCWebhookApi["default"];
      }
    });
    Object.defineProperty(exports, "CCWebhookValidateRequest", {
      enumerable: true,
      get: function get() {
        return _CCWebhookValidateRequest["default"];
      }
    });
    Object.defineProperty(exports, "CandyMachineSearchRequest", {
      enumerable: true,
      get: function get() {
        return _CandyMachineSearchRequest["default"];
      }
    });
    Object.defineProperty(exports, "DoubleTransferResponse", {
      enumerable: true,
      get: function get() {
        return _DoubleTransferResponse["default"];
      }
    });
    Object.defineProperty(exports, "EthereumPublicAddress", {
      enumerable: true,
      get: function get() {
        return _EthereumPublicAddress["default"];
      }
    });
    Object.defineProperty(exports, "EthereumTransaction", {
      enumerable: true,
      get: function get() {
        return _EthereumTransaction["default"];
      }
    });
    Object.defineProperty(exports, "EthereumTransactionCompiledResponse", {
      enumerable: true,
      get: function get() {
        return _EthereumTransactionCompiledResponse["default"];
      }
    });
    Object.defineProperty(exports, "EthereumTransactionMadeResponse", {
      enumerable: true,
      get: function get() {
        return _EthereumTransactionMadeResponse["default"];
      }
    });
    Object.defineProperty(exports, "FeePayerWallet", {
      enumerable: true,
      get: function get() {
        return _FeePayerWallet["default"];
      }
    });
    Object.defineProperty(exports, "GeneralAirdropRequest", {
      enumerable: true,
      get: function get() {
        return _GeneralAirdropRequest["default"];
      }
    });
    Object.defineProperty(exports, "GeneralB58PrivateKey", {
      enumerable: true,
      get: function get() {
        return _GeneralB58PrivateKey["default"];
      }
    });
    Object.defineProperty(exports, "GeneralBalanceRequest", {
      enumerable: true,
      get: function get() {
        return _GeneralBalanceRequest["default"];
      }
    });
    Object.defineProperty(exports, "GeneralBalanceResponse", {
      enumerable: true,
      get: function get() {
        return _GeneralBalanceResponse["default"];
      }
    });
    Object.defineProperty(exports, "GeneralFeePayerWallet", {
      enumerable: true,
      get: function get() {
        return _GeneralFeePayerWallet["default"];
      }
    });
    Object.defineProperty(exports, "GeneralGeneratePrivateKeyResponse", {
      enumerable: true,
      get: function get() {
        return _GeneralGeneratePrivateKeyResponse["default"];
      }
    });
    Object.defineProperty(exports, "GeneralPrivateKey", {
      enumerable: true,
      get: function get() {
        return _GeneralPrivateKey["default"];
      }
    });
    Object.defineProperty(exports, "GeneralSecretPhrase", {
      enumerable: true,
      get: function get() {
        return _GeneralSecretPhrase["default"];
      }
    });
    Object.defineProperty(exports, "GeneralSecretRecoveryPhrase", {
      enumerable: true,
      get: function get() {
        return _GeneralSecretRecoveryPhrase["default"];
      }
    });
    Object.defineProperty(exports, "GeneralTransaction", {
      enumerable: true,
      get: function get() {
        return _GeneralTransaction["default"];
      }
    });
    Object.defineProperty(exports, "GeneralTransactionMadeResponse", {
      enumerable: true,
      get: function get() {
        return _GeneralTransactionMadeResponse["default"];
      }
    });
    Object.defineProperty(exports, "GeneralTransactionResponse", {
      enumerable: true,
      get: function get() {
        return _GeneralTransactionResponse["default"];
      }
    });
    Object.defineProperty(exports, "GeneralTransferRequest", {
      enumerable: true,
      get: function get() {
        return _GeneralTransferRequest["default"];
      }
    });
    Object.defineProperty(exports, "GeneralWallet", {
      enumerable: true,
      get: function get() {
        return _GeneralWallet["default"];
      }
    });
    Object.defineProperty(exports, "GeneratePrivateKey", {
      enumerable: true,
      get: function get() {
        return _GeneratePrivateKey["default"];
      }
    });
    Object.defineProperty(exports, "GenerateSeedPhraseRequest", {
      enumerable: true,
      get: function get() {
        return _GenerateSeedPhraseRequest["default"];
      }
    });
    Object.defineProperty(exports, "GetAllNFTsResponse", {
      enumerable: true,
      get: function get() {
        return _GetAllNFTsResponse["default"];
      }
    });
    Object.defineProperty(exports, "GetAllNFTsResponseMintedNfts", {
      enumerable: true,
      get: function get() {
        return _GetAllNFTsResponseMintedNfts["default"];
      }
    });
    Object.defineProperty(exports, "GetAllNFTsResponseUnmintedNfts", {
      enumerable: true,
      get: function get() {
        return _GetAllNFTsResponseUnmintedNfts["default"];
      }
    });
    Object.defineProperty(exports, "GetCandyMachineIDRequest", {
      enumerable: true,
      get: function get() {
        return _GetCandyMachineIDRequest["default"];
      }
    });
    Object.defineProperty(exports, "GetCandyMachineIDResponse", {
      enumerable: true,
      get: function get() {
        return _GetCandyMachineIDResponse["default"];
      }
    });
    Object.defineProperty(exports, "GetCandyMetadataErrorResponse", {
      enumerable: true,
      get: function get() {
        return _GetCandyMetadataErrorResponse["default"];
      }
    });
    Object.defineProperty(exports, "GetCandyMetadataRequest", {
      enumerable: true,
      get: function get() {
        return _GetCandyMetadataRequest["default"];
      }
    });
    Object.defineProperty(exports, "GetCandyMetadataResponse", {
      enumerable: true,
      get: function get() {
        return _GetCandyMetadataResponse["default"];
      }
    });
    Object.defineProperty(exports, "GetCandyMetadataResponseCreators", {
      enumerable: true,
      get: function get() {
        return _GetCandyMetadataResponseCreators["default"];
      }
    });
    Object.defineProperty(exports, "GetPublicKeyRequest", {
      enumerable: true,
      get: function get() {
        return _GetPublicKeyRequest["default"];
      }
    });
    Object.defineProperty(exports, "GetSPLTokenResponse", {
      enumerable: true,
      get: function get() {
        return _GetSPLTokenResponse["default"];
      }
    });
    Object.defineProperty(exports, "HexPrivateKey", {
      enumerable: true,
      get: function get() {
        return _HexPrivateKey["default"];
      }
    });
    Object.defineProperty(exports, "InputBlockchainIdentifier", {
      enumerable: true,
      get: function get() {
        return _InputBlockchainIdentifier["default"];
      }
    });
    Object.defineProperty(exports, "InputName", {
      enumerable: true,
      get: function get() {
        return _InputName["default"];
      }
    });
    Object.defineProperty(exports, "ListNFTsResponse", {
      enumerable: true,
      get: function get() {
        return _ListNFTsResponse["default"];
      }
    });
    Object.defineProperty(exports, "NFT", {
      enumerable: true,
      get: function get() {
        return _NFT["default"];
      }
    });
    Object.defineProperty(exports, "NFTCollection", {
      enumerable: true,
      get: function get() {
        return _NFTCollection["default"];
      }
    });
    Object.defineProperty(exports, "NFTData", {
      enumerable: true,
      get: function get() {
        return _NFTData["default"];
      }
    });
    Object.defineProperty(exports, "NFTMintErrorResponse", {
      enumerable: true,
      get: function get() {
        return _NFTMintErrorResponse["default"];
      }
    });
    Object.defineProperty(exports, "NFTMintFee", {
      enumerable: true,
      get: function get() {
        return _NFTMintFee["default"];
      }
    });
    Object.defineProperty(exports, "NFTMintRequest", {
      enumerable: true,
      get: function get() {
        return _NFTMintRequest["default"];
      }
    });
    Object.defineProperty(exports, "NFTOwnerAdvancedResponse", {
      enumerable: true,
      get: function get() {
        return _NFTOwnerAdvancedResponse["default"];
      }
    });
    Object.defineProperty(exports, "NFTOwnerAdvancedResponseContract", {
      enumerable: true,
      get: function get() {
        return _NFTOwnerAdvancedResponseContract["default"];
      }
    });
    Object.defineProperty(exports, "NFTOwnerResponse", {
      enumerable: true,
      get: function get() {
        return _NFTOwnerResponse["default"];
      }
    });
    Object.defineProperty(exports, "NFTSearchRequest", {
      enumerable: true,
      get: function get() {
        return _NFTSearchRequest["default"];
      }
    });
    Object.defineProperty(exports, "NFTSearchResponse", {
      enumerable: true,
      get: function get() {
        return _NFTSearchResponse["default"];
      }
    });
    Object.defineProperty(exports, "NameServiceApi", {
      enumerable: true,
      get: function get() {
        return _NameServiceApi["default"];
      }
    });
    Object.defineProperty(exports, "NearPublicKey", {
      enumerable: true,
      get: function get() {
        return _NearPublicKey["default"];
      }
    });
    Object.defineProperty(exports, "PrivateKey", {
      enumerable: true,
      get: function get() {
        return _PrivateKey["default"];
      }
    });
    Object.defineProperty(exports, "PublicKey", {
      enumerable: true,
      get: function get() {
        return _PublicKey["default"];
      }
    });
    Object.defineProperty(exports, "SecretPhrase", {
      enumerable: true,
      get: function get() {
        return _SecretPhrase["default"];
      }
    });
    Object.defineProperty(exports, "SecretRecoveryPhrase", {
      enumerable: true,
      get: function get() {
        return _SecretRecoveryPhrase["default"];
      }
    });
    Object.defineProperty(exports, "SolanaAccountApi", {
      enumerable: true,
      get: function get() {
        return _SolanaAccountApi["default"];
      }
    });
    Object.defineProperty(exports, "SolanaCandyMachineApi", {
      enumerable: true,
      get: function get() {
        return _SolanaCandyMachineApi["default"];
      }
    });
    Object.defineProperty(exports, "SolanaNFTApi", {
      enumerable: true,
      get: function get() {
        return _SolanaNFTApi["default"];
      }
    });
    Object.defineProperty(exports, "SolanaPublicKey", {
      enumerable: true,
      get: function get() {
        return _SolanaPublicKey["default"];
      }
    });
    Object.defineProperty(exports, "SolanaSPLTokenApi", {
      enumerable: true,
      get: function get() {
        return _SolanaSPLTokenApi["default"];
      }
    });
    Object.defineProperty(exports, "SolanaTransaction", {
      enumerable: true,
      get: function get() {
        return _SolanaTransaction["default"];
      }
    });
    Object.defineProperty(exports, "SolanaTransactionApi", {
      enumerable: true,
      get: function get() {
        return _SolanaTransactionApi["default"];
      }
    });
    Object.defineProperty(exports, "SolanaTransactionCompiledResponse", {
      enumerable: true,
      get: function get() {
        return _SolanaTransactionCompiledResponse["default"];
      }
    });
    Object.defineProperty(exports, "SolanaTransactionMadeResponse", {
      enumerable: true,
      get: function get() {
        return _SolanaTransactionMadeResponse["default"];
      }
    });
    Object.defineProperty(exports, "SolanaWalletApi", {
      enumerable: true,
      get: function get() {
        return _SolanaWalletApi["default"];
      }
    });
    Object.defineProperty(exports, "SupplyWalletRequest", {
      enumerable: true,
      get: function get() {
        return _SupplyWalletRequest["default"];
      }
    });
    Object.defineProperty(exports, "TokenApi", {
      enumerable: true,
      get: function get() {
        return _TokenApi["default"];
      }
    });
    Object.defineProperty(exports, "TokenMetadataResponse", {
      enumerable: true,
      get: function get() {
        return _TokenMetadataResponse["default"];
      }
    });
    Object.defineProperty(exports, "Transaction", {
      enumerable: true,
      get: function get() {
        return _Transaction["default"];
      }
    });
    Object.defineProperty(exports, "TransactionApi", {
      enumerable: true,
      get: function get() {
        return _TransactionApi["default"];
      }
    });
    Object.defineProperty(exports, "TransactionResult", {
      enumerable: true,
      get: function get() {
        return _TransactionResult["default"];
      }
    });
    Object.defineProperty(exports, "TransferRequest", {
      enumerable: true,
      get: function get() {
        return _TransferRequest["default"];
      }
    });
    Object.defineProperty(exports, "TransferResponse", {
      enumerable: true,
      get: function get() {
        return _TransferResponse["default"];
      }
    });
    Object.defineProperty(exports, "TransferResponseCompiled", {
      enumerable: true,
      get: function get() {
        return _TransferResponseCompiled["default"];
      }
    });
    Object.defineProperty(exports, "Wallet", {
      enumerable: true,
      get: function get() {
        return _Wallet["default"];
      }
    });
    Object.defineProperty(exports, "WalletApi", {
      enumerable: true,
      get: function get() {
        return _WalletApi["default"];
      }
    });
    Object.defineProperty(exports, "WalletIdentifiers", {
      enumerable: true,
      get: function get() {
        return _WalletIdentifiers["default"];
      }
    });
    var _ApiClient = _interopRequireDefault(require_ApiClient());
    var _ATAResponse = _interopRequireDefault(require_ATAResponse());
    var _Account = _interopRequireDefault(require_Account());
    var _AccountContext = _interopRequireDefault(require_AccountContext());
    var _AccountIsCandyMachine = _interopRequireDefault(require_AccountIsCandyMachine());
    var _AccountIsNFT = _interopRequireDefault(require_AccountIsNFT());
    var _AccountValue = _interopRequireDefault(require_AccountValue());
    var _AirdropRequest = _interopRequireDefault(require_AirdropRequest());
    var _AvalancheCChainPublicAddress = _interopRequireDefault(require_AvalancheCChainPublicAddress());
    var _AvalancheXPChainPublicAddress = _interopRequireDefault(require_AvalancheXPChainPublicAddress());
    var _B58PrivateKey = _interopRequireDefault(require_B58PrivateKey());
    var _BSCPublicAddress = _interopRequireDefault(require_BSCPublicAddress());
    var _BalanceRequest = _interopRequireDefault(require_BalanceRequest());
    var _BalanceResponse = _interopRequireDefault(require_BalanceResponse());
    var _CCPayment = _interopRequireDefault(require_CCPayment());
    var _CCPaymentBlockchainPaymentDetails = _interopRequireDefault(require_CCPaymentBlockchainPaymentDetails());
    var _CCProject = _interopRequireDefault(require_CCProject());
    var _CCProjectCreateRequest = _interopRequireDefault(require_CCProjectCreateRequest());
    var _CCProjectCreateRequestCustomerIdToCollect = _interopRequireDefault(require_CCProjectCreateRequestCustomerIdToCollect());
    var _CCProjectCreateRequestPayoutMethod = _interopRequireDefault(require_CCProjectCreateRequestPayoutMethod());
    var _CCWebhook = _interopRequireDefault(require_CCWebhook());
    var _CCWebhookValidateRequest = _interopRequireDefault(require_CCWebhookValidateRequest());
    var _CandyMachineSearchRequest = _interopRequireDefault(require_CandyMachineSearchRequest());
    var _DoubleTransferResponse = _interopRequireDefault(require_DoubleTransferResponse());
    var _EthereumPublicAddress = _interopRequireDefault(require_EthereumPublicAddress());
    var _EthereumTransaction = _interopRequireDefault(require_EthereumTransaction());
    var _EthereumTransactionCompiledResponse = _interopRequireDefault(require_EthereumTransactionCompiledResponse());
    var _EthereumTransactionMadeResponse = _interopRequireDefault(require_EthereumTransactionMadeResponse());
    var _FeePayerWallet = _interopRequireDefault(require_FeePayerWallet());
    var _GeneralAirdropRequest = _interopRequireDefault(require_GeneralAirdropRequest());
    var _GeneralB58PrivateKey = _interopRequireDefault(require_GeneralB58PrivateKey());
    var _GeneralBalanceRequest = _interopRequireDefault(require_GeneralBalanceRequest());
    var _GeneralBalanceResponse = _interopRequireDefault(require_GeneralBalanceResponse());
    var _GeneralFeePayerWallet = _interopRequireDefault(require_GeneralFeePayerWallet());
    var _GeneralGeneratePrivateKeyResponse = _interopRequireDefault(require_GeneralGeneratePrivateKeyResponse());
    var _GeneralPrivateKey = _interopRequireDefault(require_GeneralPrivateKey());
    var _GeneralSecretPhrase = _interopRequireDefault(require_GeneralSecretPhrase());
    var _GeneralSecretRecoveryPhrase = _interopRequireDefault(require_GeneralSecretRecoveryPhrase());
    var _GeneralTransaction = _interopRequireDefault(require_GeneralTransaction());
    var _GeneralTransactionMadeResponse = _interopRequireDefault(require_GeneralTransactionMadeResponse());
    var _GeneralTransactionResponse = _interopRequireDefault(require_GeneralTransactionResponse());
    var _GeneralTransferRequest = _interopRequireDefault(require_GeneralTransferRequest());
    var _GeneralWallet = _interopRequireDefault(require_GeneralWallet());
    var _GeneratePrivateKey = _interopRequireDefault(require_GeneratePrivateKey());
    var _GenerateSeedPhraseRequest = _interopRequireDefault(require_GenerateSeedPhraseRequest());
    var _GetAllNFTsResponse = _interopRequireDefault(require_GetAllNFTsResponse());
    var _GetAllNFTsResponseMintedNfts = _interopRequireDefault(require_GetAllNFTsResponseMintedNfts());
    var _GetAllNFTsResponseUnmintedNfts = _interopRequireDefault(require_GetAllNFTsResponseUnmintedNfts());
    var _GetCandyMachineIDRequest = _interopRequireDefault(require_GetCandyMachineIDRequest());
    var _GetCandyMachineIDResponse = _interopRequireDefault(require_GetCandyMachineIDResponse());
    var _GetCandyMetadataErrorResponse = _interopRequireDefault(require_GetCandyMetadataErrorResponse());
    var _GetCandyMetadataRequest = _interopRequireDefault(require_GetCandyMetadataRequest());
    var _GetCandyMetadataResponse = _interopRequireDefault(require_GetCandyMetadataResponse());
    var _GetCandyMetadataResponseCreators = _interopRequireDefault(require_GetCandyMetadataResponseCreators());
    var _GetPublicKeyRequest = _interopRequireDefault(require_GetPublicKeyRequest());
    var _GetSPLTokenResponse = _interopRequireDefault(require_GetSPLTokenResponse());
    var _HexPrivateKey = _interopRequireDefault(require_HexPrivateKey());
    var _InputBlockchainIdentifier = _interopRequireDefault(require_InputBlockchainIdentifier());
    var _InputName = _interopRequireDefault(require_InputName());
    var _ListNFTsResponse = _interopRequireDefault(require_ListNFTsResponse());
    var _NFT = _interopRequireDefault(require_NFT());
    var _NFTCollection = _interopRequireDefault(require_NFTCollection());
    var _NFTData = _interopRequireDefault(require_NFTData());
    var _NFTMintErrorResponse = _interopRequireDefault(require_NFTMintErrorResponse());
    var _NFTMintFee = _interopRequireDefault(require_NFTMintFee());
    var _NFTMintRequest = _interopRequireDefault(require_NFTMintRequest());
    var _NFTOwnerAdvancedResponse = _interopRequireDefault(require_NFTOwnerAdvancedResponse());
    var _NFTOwnerAdvancedResponseContract = _interopRequireDefault(require_NFTOwnerAdvancedResponseContract());
    var _NFTOwnerResponse = _interopRequireDefault(require_NFTOwnerResponse());
    var _NFTSearchRequest = _interopRequireDefault(require_NFTSearchRequest());
    var _NFTSearchResponse = _interopRequireDefault(require_NFTSearchResponse());
    var _NearPublicKey = _interopRequireDefault(require_NearPublicKey());
    var _PrivateKey = _interopRequireDefault(require_PrivateKey());
    var _PublicKey = _interopRequireDefault(require_PublicKey());
    var _SecretPhrase = _interopRequireDefault(require_SecretPhrase());
    var _SecretRecoveryPhrase = _interopRequireDefault(require_SecretRecoveryPhrase());
    var _SolanaPublicKey = _interopRequireDefault(require_SolanaPublicKey());
    var _SolanaTransaction = _interopRequireDefault(require_SolanaTransaction());
    var _SolanaTransactionCompiledResponse = _interopRequireDefault(require_SolanaTransactionCompiledResponse());
    var _SolanaTransactionMadeResponse = _interopRequireDefault(require_SolanaTransactionMadeResponse());
    var _SupplyWalletRequest = _interopRequireDefault(require_SupplyWalletRequest());
    var _TokenMetadataResponse = _interopRequireDefault(require_TokenMetadataResponse());
    var _Transaction = _interopRequireDefault(require_Transaction());
    var _TransactionResult = _interopRequireDefault(require_TransactionResult());
    var _TransferRequest = _interopRequireDefault(require_TransferRequest());
    var _TransferResponse = _interopRequireDefault(require_TransferResponse());
    var _TransferResponseCompiled = _interopRequireDefault(require_TransferResponseCompiled());
    var _Wallet = _interopRequireDefault(require_Wallet());
    var _WalletIdentifiers = _interopRequireDefault(require_WalletIdentifiers());
    var _CCPaymentApi = _interopRequireDefault(require_CCPaymentApi());
    var _CCProjectApi = _interopRequireDefault(require_CCProjectApi());
    var _CCWebhookApi = _interopRequireDefault(require_CCWebhookApi());
    var _NameServiceApi = _interopRequireDefault(require_NameServiceApi());
    var _SolanaAccountApi = _interopRequireDefault(require_SolanaAccountApi());
    var _SolanaCandyMachineApi = _interopRequireDefault(require_SolanaCandyMachineApi());
    var _SolanaNFTApi = _interopRequireDefault(require_SolanaNFTApi());
    var _SolanaSPLTokenApi = _interopRequireDefault(require_SolanaSPLTokenApi());
    var _SolanaTransactionApi = _interopRequireDefault(require_SolanaTransactionApi());
    var _SolanaWalletApi = _interopRequireDefault(require_SolanaWalletApi());
    var _TokenApi = _interopRequireDefault(require_TokenApi());
    var _TransactionApi = _interopRequireDefault(require_TransactionApi());
    var _WalletApi = _interopRequireDefault(require_WalletApi());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
  }
});
export default require_dist();
//# sourceMappingURL=theblockchainapi.js.map
